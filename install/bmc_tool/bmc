#!/usr/bin/perl
#
# bmc tool - a user friendly front-end to probe, configure, and manage the BMC 
#
# Copyright (c) 2012 Dell Inc.  All rights reserved.
#
# This tool is part of the PowerEdge C datacenter system management tools 
# from http://poweredgec.com
#
# michael_stumpf@dell.com
#

use POSIX;
use warnings;
use strict 'refs';
my $llI1llI11III1Illl1lIIlII1II1I11 = '2014-10-15 10:51:07';
my $IIll1llllIl11I1IIl11I1Ill11I1II = '';
my $IllI1IlIll111lI11lI1I111lIlllll = '1';
use constant ('EC_SUCCESS', 0);
use constant ('EC_ERROR', 1);
use constant ('EC_NOT_APPLICABLE', 4);
use constant ('EC_UNIMPLEMENTED', 5);
use constant ('EC_INVALID', 6);
sub l1II11II1l1I1IIII11I1lI1I11II11 {
    return '';
}
sub lI11llIl1IIIlI1I1I1lI1I1IIIll1l {
    return 'FAILED';
}
sub lI1l1lII11l1IlIIIII1IlIlI1l11ll {
    return 'UNIMPLEMENTED';
}
sub l11lIll11IIIII1Ill1I1lII1I1II1I {
    return 'INVALID';
}
sub l1II1IllIIII1I1ll1lIl1ll1IlI111 {
    return 'NOT_APPLICABLE';
}
sub Illll1ll1IIII1ll1I11IllI1I1lI1I {
    return 'UNAVAILABLE';
}
sub I1II1I1Il11IIII1I1lllI1IIlIllll {
    return 'UNSUPPORTED';
}
sub lIl11IllI1llllIIll1I1Illl1IlIIl {
    return 'DISABLED';
}
sub IllIl1Ill1l1l11Il11lIllllIlll11 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq lI1l1lII11l1IlIIIII1IlIlI1l11ll() or $lIl1II11I1llIIII1I1lIlIllI111I1 eq l11lIll11IIIII1Ill1I1lII1I1II1I() or $lIl1II11I1llIIII1I1lIlIllI111I1 eq l1II1IllIIII1I1ll1lIl1ll1IlI111() or $lIl1II11I1llIIII1I1lIlIllI111I1 eq Illll1ll1IIII1ll1I11IllI1I1lI1I() or $lIl1II11I1llIIII1I1lIlIllI111I1 eq I1II1I1Il11IIII1I1lllI1IIlIllll() or $lIl1II11I1llIIII1I1lIlIllI111I1 eq lIl11IllI1llllIIll1I1Illl1IlIIl()) {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub IlIl1II1l1I11I11IlIIlIlll1II11l {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq '') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub llI11ll1lI11llI1lIl11llI1I11lI1 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq '') {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
    else {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
}
sub lI1111lIll1l1II1l1II1II11Il1I1I {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'UNIMPLEMENTED') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub Illll1ll1ll1IIIIl111lIIIl1l1I1I {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'INVALID') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub l111I1IlIlII11ll11IIlllIl11Illl {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'NOT_APPLICABLE') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub II1l11l111l1ll1l1l1IllIl1I1I1ll {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'UNAVAILABLE') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub ll11lIlI111IIIl11IIlllII1l11I1I {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'UNAVAILABLE') {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
    else {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
}
sub Il1l1I11l1Il1111ll1l1Illl11Il11 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'UNSUPPORTED') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
sub lI1I1llll1I1Il1111Il1I11IlIlIII {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 eq 'DISABLED') {
        return $IllI1IlIll111lI11lI1I111lIlllll;
    }
    else {
        return $IIll1llllIl11I1IIl11I1Ill11I1II;
    }
}
my(@II1l1I1IlIl1IIIlllIIIlIlIll11Il) = (['nic', 'nic_selection', '02', '01', '00', '1', 'rw', '0'], ['nic', 'shared_nic_selection', '02', '02', '00', '1', 'rw', '1']);
my(@lllIllI1I1I1I111llI1II1I1IIII11) = ['sol', 'sol_idle_timeout', '03', '01', '00', '2', 'rw', '1'];
my(@Ill1lIlI1l1IIlllIlII1lIl1l1I1ll) = ['security_cfg', 'service_disabled', '04', '01', '00', '1', 'rw', '6'];
my(@lI111Ill1lI1l11I1lIIllI1ll11l11) = (['acct_status', 'num_of_users', '05', '01', '00', '1', 'r'], ['acct_status', 'num_of_enabled_users', '05', '02', '00', '1', 'r'], ['acct_status', 'user_name', '05', '03', '00', '17', 'r'], ['acct_status', 'account_status', '05', '04', '00', '1', 'r']);
my(@llIlIIll11lII11llllIl1llII1II11) = (['dns', 'dns_dhcp_enable', '06', '01', '00', '1', 'rw', '0'], ['dns', 'dns_server_1', '06', '02', '00', '4', 'rw'], ['dns', 'dns_server_2', '06', '03', '00', '4', 'rw'], ['dns', 'dns_register_bmc', '06', '04', '00', '1', 'rw', '0'], ['dns', 'dns_bmc_hostname', '06', '05', '00', '64', 'rw'], ['dns', 'dns_get_domain_from_dhcp', '06', '06', '00', '1', 'rw', '0'], ['dns', 'dns_domain_name', '06', '07', '00', '256', 'rw']);
my(@l1IlllIIllI111lI11Ill1IlIl1lllI) = (['websvr_cfg', 'web_server_enabled', '0c', '01', '00', '1', 'rw', '1'], ['websvr_cfg', 'max_web_sessions', '0c', '02', '00', '1', 'r'], ['websvr_cfg', 'active_web_sessions', '0c', '03', '00', '1', 'r'], ['websvr_cfg', 'web_server_timeout', '0c', '04', '00', '4', 'rw', '300'], ['websvr_cfg', 'http_port', '0c', '05', '00', '2', 'rw', '80'], ['websvr_cfg', 'https_port', '0c', '06', '00', '2', 'rw', '443']);
my(@lII1lIIll11lll111II1l1l11I1l1lI) = (['power_mgmt', 'power_mgmt_enable', '11', '01', '00', '1', 'rw'], ['power_mgmt', 'poweron_stagger_ac_recovery', '11', '02', '00', '1', 'rw'], ['power_mgmt', 'poweron_delay', '11', '03', '00', '2', 'rw'], ['power_mgmt', 'min_poweron_delay', '11', '04', '00', '2', 'r'], ['power_mgmt', 'max_poweron_delay', '11', '05', '00', '2', 'rw']);
my(@lI1l1l111I11I1IlIIlIllIlllII1lI) = (['ipv6', 'ipv6_enable', 'c0', '01', '00', '1', 'rw', '0'], ['ipv6', 'ipv6_address', 'c0', '02', '00', '40', 'rw'], ['ipv6', 'ipv6_gateway_ip', 'c0', '03', '00', '40', 'rw'], ['ipv6', 'ipv6_prefix', 'c0', '04', '00', '1', 'rw'], ['ipv6', 'ipv6_autoconfig', 'c0', '05', '00', '1', 'rw', '1'], ['ipv6', 'ipv6_link_local_addr', 'c0', '06', '00', '40', 'r'], ['ipv6', 'ipv6_auto_dns', 'c0', '07', '00', '1', 'rw', '0'], ['ipv6', 'ipv6_dns_server_1', 'c0', '08', '00', '40', 'rw'], ['ipv6', 'ipv6_dns_server_2', 'c0', '09', '00', '40', 'rw']);
my(@II11II1l1l1IIll1II1II111l1II1I1) = (['ipv6_trap', 'ipv6_snmp_trap_dest', 'c1', '01', '00', '3', 'rw'], ['ipv6_trap', 'ipv6_snmp_trap_dest_addr', 'c1', '02', '00', '40', 'rw'], ['ipv6_trap', 'ipv6_num_of_trap_dest', 'c1', '03', '00', '1', 'r']);
my(@llll11IllllIII11l1ll11I11I1IlIl) = (@II1l1I1IlIl1IIIlllIIIlIlIll11Il, @lllIllI1I1I1I111llI1II1I1IIII11, @Ill1lIlI1l1IIlllIlII1lIl1l1I1ll, @lI111Ill1lI1l11I1lIIllI1ll11l11, @llIlIIll11lII11llllIl1llII1II11, @l1IlllIIllI111lI11Ill1IlIl1lllI, @lII1lIIll11lll111II1l1l11I1l1lI, @lI1l1l111I11I1IlIIlIllIlllII1lI, @II11II1l1l1IIll1II1II111l1II1I1);
sub IllIl111IlIlIIlII1I11I11llIIlII {
    my $I1llIIlI1ll11lllII1lI1l1lIlIl1I = shift @_;
    my $i;
    my $I1l1I111I111111Il1II1lllIl1l1ll = -1;
    foreach $i (0 .. $#llll11IllllIII11l1ll11I11I1IlIl) {
        if ($llll11IllllIII11l1ll11I11I1IlIl[$i][1] eq $I1llIIlI1ll11lllII1lI1l1lIlIl1I) {
            $I1l1I111I111111Il1II1lllIl1l1ll = $i;
            last;
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11IllIl11lI1IIl1lIllllI1I1IIll {
    my $x = shift @_;
    if (not defined $x) {
        $x = '';
    }
    else {
        $x =~ s/^\s+//;
        $x =~ s/\s+$//;
    }
    return $x;
}
sub IlI1I1I1l11III1lll1I1IIlII11III {
    my $x = shift @_;
    if (defined $x) {
        $x =~ s/^\s+//;
    }
    return $x;
}
sub IIlIlIII1I1I1lII1111III1Il11I1I {
    my $x = shift @_;
    if (defined $x) {
        $x =~ s/\s+$//;
    }
    return $x;
}
sub l1Illl1llII111l1Il11Il111l1Illl {
    my $x = shift @_;
    if (defined $x) {
        $x =~ s/\s+/ /g;
    }
    return $x;
}
sub llIIllIl1ll1lI1IIIII1l1I1lI11ll {
    my $x = shift @_;
    my @l11IlI11llII1l111l1IIlIIl1lI1I1;
    if (defined $x) {
        @l11IlI11llII1l111l1IIlIIl1lI1I1 = split(/#/, $x, 0);
        $x = $l11IlI11llII1l111l1IIlIIl1lI1I1[0];
    }
    if (not defined $x) {
        $x = '';
    }
    return $x;
}
sub I1ll1II111I11lIlIIl1llI1111IlIl {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = shift @_;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = uc $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
}
sub IIIl1IIlIIIlll1l1I1I1l1llI111lI {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = shift @_;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = lc $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
}
sub ll1IIl11III1IIllllIllllll1lIIII {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $i;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $I1IlllIlII111IIlI111IlllI11ll1I;
    $lIl1II11I1llIIII1I1lIlIllI111I1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIl1II11I1llIIII1I1lIlIllI111I1);
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/\./, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    if ($#IllI11I11ll11Ill111IlIlI111IIlI != 3) {
        return 0;
    }
    foreach $i (0 .. $#IllI11I11ll11Ill111IlIlI111IIlI) {
        if ($IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /^-?\d+$/) {
            $I1IlllIlII111IIlI111IlllI11ll1I = int $IllI11I11ll11Ill111IlIlI111IIlI[$i];
            if ($I1IlllIlII111IIlI111IlllI11ll1I < 0 or $I1IlllIlII111IIlI111IlllI11ll1I >= 256) {
                return 0;
            }
        }
        else {
            return 0;
        }
    }
    return 1;
}
sub II1I1lI1II1IlIlIll1IIIlIl1IIlII {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    $lIl1II11I1llIIII1I1lIlIllI111I1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIl1II11I1llIIII1I1lIlIllI111I1);
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $i;
    my $I1IlllIlII111IIlI111IlllI11ll1I;
    my $Il1Il1l1Il1IlllIl1l11lI1IIIlllI = '';
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/\./, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    foreach $i (0 .. $#IllI11I11ll11Ill111IlIlI111IIlI) {
        $I1IlllIlII111IIlI111IlllI11ll1I = int $IllI11I11ll11Ill111IlIlI111IIlI[$i];
        $Il1Il1l1Il1IlllIl1l11lI1IIIlllI .= sprintf('%02x', $I1IlllIlII111IIlI111IlllI11ll1I);
        if ($i < $#IllI11I11ll11Ill111IlIlI111IIlI) {
            $Il1Il1l1Il1IlllIl1l11lI1IIIlllI .= ' ';
        }
    }
    return $Il1Il1l1Il1IlllIl1l11lI1IIIlllI;
}
sub I1IlII1lII111l11111llII11l11IlI {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    $lIl1II11I1llIIII1I1lIlIllI111I1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIl1II11I1llIIII1I1lIlIllI111I1);
    my $I1IlllIlII111IIlI111IlllI11ll1I;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $i;
    my $Il1Il1l1Il1IlllIl1l11lI1IIIlllI = '';
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/\s+/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    foreach $i (0 .. $#IllI11I11ll11Ill111IlIlI111IIlI) {
        $I1IlllIlII111IIlI111IlllI11ll1I = hex I11IllIl11lI1IIl1lIllllI1I1IIll($IllI11I11ll11Ill111IlIlI111IIlI[$i]);
        $Il1Il1l1Il1IlllIl1l11lI1IIIlllI .= sprintf('%d', $I1IlllIlII111IIlI111IlllI11ll1I);
        if ($i < $#IllI11I11ll11Ill111IlIlI111IIlI) {
            $Il1Il1l1Il1IlllIl1l11lI1IIIlllI .= '.';
        }
    }
    return $Il1Il1l1Il1IlllIl1l11lI1IIIlllI;
}
sub ll1Ill1I1III1I1lIIlI11IlI1I11l1 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $l1IIl1l11I111lIll1lI11lII1II1l1 = '';
    my @l1I111IIl11lII1l1I11lllIllIIl1I;
    my $i;
    @l1I111IIl11lII1l1I11lllIllIIl1I = split(/ +/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    for ($i = 0; $i <= $#l1I111IIl11lII1l1I11lllIllIIl1I; ++$i) {
        $l1IIl1l11I111lIll1lI11lII1II1l1 .= '0x' . $l1I111IIl11lII1l1I11lllIllIIl1I[$i];
        if ($i < $#l1I111IIl11lII1l1I11lllIllIIl1I) {
            $l1IIl1l11I111lIll1lI11lII1II1l1 .= ' ';
        }
    }
    return $l1IIl1l11I111lIll1lI11lII1II1l1;
}
sub II1ll1lII1111III111Il1lI11IlIII {
    my $llI1llI1lI11I1l1III1lI1l11lI111 = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $IllII1l1111IIlIl111l1l1IIIllII1 = shift @_ || ' ';
    my $IIlII1I1II1l1lIllll1lll1l11I1lI;
    my $i;
    $IIlII1I1II1l1lIllll1lll1l11I1lI = length $lIl1II11I1llIIII1I1lIlIllI111I1;
    for ($i = 0; $i < $llI1llI1lI11I1l1III1lI1l11lI111 - $IIlII1I1II1l1lIllll1lll1l11I1lI; ++$i) {
        $lIl1II11I1llIIII1I1lIlIllI111I1 .= $IllII1l1111IIlIl111l1l1IIIllII1;
    }
    return $lIl1II11I1llIIII1I1lIlIllI111I1;
}
sub lI1l11111111I1llIl11Il1Illl1111 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    if (IllIl1Ill1l1l11Il11lIllllIlll11 $lIl1II11I1llIIII1I1lIlIllI111I1) {
        return $lIl1II11I1llIIII1I1lIlIllI111I1;
    }
    if ($lIl1II11I1llIIII1I1lIlIllI111I1) {
        return 'yes';
    }
    else {
        return 'no';
    }
}
sub ll1111l111lllI1Il1II1I1IlI1lIIl {
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $IllII1l1111IIlIl111l1l1IIIllII1 = '';
    my $i = '';
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    for ($i = 0; $i < length $lIl1II11I1llIIII1I1lIlIllI111I1; ++$i) {
        $IllII1l1111IIlIl111l1l1IIIllII1 = substr($lIl1II11I1llIIII1I1lIlIllI111I1, $i, 1);
        $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf(' 0x%02x', ord $IllII1l1111IIlIl111l1l1IIIllII1);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIl1lllll1l1Illl1lIll1III1lIl1l {
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $i;
    my $I1l1I1llllI1I1II111Ill11I1Il11l = '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $III1I1IlIl11lIIII1111I1llI1lIIl;
    my($I111l1I1I11IIl1Il1ll1l11II11Il1, $II1lllIlIlIl111l11lI11IlIIlIll1, $l1llIIl11l11lllII11lIl11lIIl1I1) = @_;
    if (not $l1llIIl11l11lllII11lIl11lIIl1I1) {
        $l1llIIl11l11lllII11lIl11lIIl1I1 = '';
    }
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/\n/, $l1llIIl11l11lllII11lIl11lIIl1I1, 0);
    foreach $i (0 .. $#IllI11I11ll11Ill111IlIlI111IIlI) {
        if ($I111l1I1I11IIl1Il1ll1l11II11Il1 eq '') {
            if ($IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /$II1lllIlIlIl111l11lI11IlIIlIll1/) {
                $I1l1I1llllI1I1II111Ill11I1Il11l .= $IllI11I11ll11Ill111IlIlI111IIlI[$i] . "\n";
            }
        }
        if ($I111l1I1I11IIl1Il1ll1l11II11Il1 eq 'i') {
            if ($IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /$II1lllIlIlIl111l11lI11IlIIlIll1/i) {
                $I1l1I1llllI1I1II111Ill11I1Il11l .= $IllI11I11ll11Ill111IlIlI111IIlI[$i] . "\n";
            }
        }
        if ($I111l1I1I11IIl1Il1ll1l11II11Il1 eq 'v') {
            if (not $IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /$II1lllIlIlIl111l11lI11IlIIlIll1/i) {
                $I1l1I1llllI1I1II111Ill11I1Il11l .= $IllI11I11ll11Ill111IlIlI111IIlI[$i] . "\n";
            }
        }
        if ($I111l1I1I11IIl1Il1ll1l11II11Il1 =~ /^A(\d+)/) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = substr($I111l1I1I11IIl1Il1ll1l11II11Il1, 1);
            $III1I1IlIl11lIIII1111I1llI1lIIl = int $l11lIIl111IIIIl1l1Il1l1lI1ll111;
            if ($IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /$II1lllIlIlIl111l11lI11IlIIlIll1/) {
                $I1l1I1llllI1I1II111Ill11I1Il11l .= $IllI11I11ll11Ill111IlIlI111IIlI[$i] . "\n";
                my $I111lll11111lIII1IlI1lllllllllI;
                foreach $I111lll11111lIII1IlI1lllllllllI (1 .. $III1I1IlIl11lIIII1111I1llI1lIIl) {
                    $I1l1I1llllI1I1II111Ill11I1Il11l .= $IllI11I11ll11Ill111IlIlI111IIlI[$i + $I111lll11111lIII1IlI1lllllllllI] . "\n";
                }
            }
        }
    }
    return $I1l1I1llllI1I1II111Ill11I1Il11l;
}
sub l1Illl1l1ll1l1Ill1I1l1I1Ill11lI {
    my($lI1II1lIIl11llllIIIl11I11lIllll, $Ill1I11I1l1lI1IllI1lII1II1I1II1, $l1llIIl11l11lllII11lIl11lIIl1I1) = @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/$lI1II1lIIl11llllIIIl11I11lIllll/, $l1llIIl11l11lllII11lIl11lIIl1I1, 0);
    $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[$Ill1I11I1l1lI1IllI1lII1II1I1II1 - 1];
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIlIl11l1Il1I1l11IIII11IllIlIIl {
    my $lI1II1lIIl11llllIIIl11I11lIllll = shift @_;
    my $l1llIIl11l11lllII11lIl11lIIl1I1 = shift @_;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $Ill1llI1III1IIIIlllIIl1IllI11II;
    my $II1llII1II1III1IIl1II1l1IIIll1l;
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/$lI1II1lIIl11llllIIIl11I11lIllll/, $l1llIIl11l11lllII11lIl11lIIl1I1, 0);
    $Ill1llI1III1IIIIlllIIl1IllI11II = I11IllIl11lI1IIl1lIllllI1I1IIll($IllI11I11ll11Ill111IlIlI111IIlI[0]);
    $II1llII1II1III1IIl1II1l1IIIll1l = I11IllIl11lI1IIl1lIllllI1I1IIll($IllI11I11ll11Ill111IlIlI111IIlI[1]);
    return $Ill1llI1III1IIIIlllIIl1IllI11II, $II1llII1II1III1IIl1II1l1IIIll1l;
}
sub lI1l1IllIl11lI111lI1lIllll11ll1 {
    my $IllIl1lII1IIIIIll1III1IIl1llI11 = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(/$IllIl1lII1IIIIIll1III1IIl1llI11/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    return $l11IlI11llII1l111l1IIlIIl1lI1I1[0];
}
sub I1I1lII1I1lllI1111Il11II1I111II {
    my $IllIl1lII1IIIIIll1III1IIl1llI11 = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(/$IllIl1lII1IIIIIll1III1IIl1llI11/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    shift @l11IlI11llII1l111l1IIlIIl1lI1I1;
    my $I1l1I111I111111Il1II1lllIl1l1ll = join($IllIl1lII1IIIIIll1III1IIl1llI11, @l11IlI11llII1l111l1IIlIIl1lI1I1);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l111I1lll11I1lIIlIIl1I11lIlIIl1 {
    my $IllIl1lII1IIIIIll1III1IIl1llI11 = shift @_;
    my $llIll1llIIII11III1lII1Ill1lI1ll = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(/$IllIl1lII1IIIIIll1III1IIl1llI11/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    shift @l11IlI11llII1l111l1IIlIIl1lI1I1;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $l11IlI11llII1l111l1IIlIIl1lI1I1[0];
    if (not $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = '';
    }
    my(@lII1lII11IIIlIlIIIlIIIIlIIl1ll1) = split(/$llIll1llIIII11III1lII1Ill1lI1ll/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $lII1lII11IIIlIlIIIlIIIIlIIl1ll1[0];
    if (not $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = '';
    }
    return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
}
sub I1Il11lIl111l1l1IlIllI1lI1lIl1l {
    my $l1I1IIl1I11lIl1lIlI1l111II111Il = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    $l1I1IIl1I11lIl1lIlI1l111II111Il = $l1I1IIl1I11lIl1lIlI1l111II111Il - 1;
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(/\n/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    return $l11IlI11llII1l111l1IIlIIl1lI1I1[$l1I1IIl1I11lIl1lIlI1l111II111Il];
}
sub lI1lI11IlIllI11lI1IlI1IIIllIlIl {
    my $IIl1llllll1l1lIl1l1l1I11lll1IlI = shift @_;
    my $llI1l11llll1II1IIlIIIllI11lI11l = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    $IIl1llllll1l1lIl1l1l1I11lll1IlI -= 1;
    if ($llI1l11llll1II1IIlIIIllI11lI11l > 0) {
        $llI1l11llll1II1IIlIIIllI11lI11l -= 1;
    }
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(/\n/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    my $Ill1ll1111l1IIIIIlIlII1ll1III1I = $#l11IlI11llII1l111l1IIlIIl1lI1I1;
    if ($llI1l11llll1II1IIlIIIllI11lI11l <= 0) {
        $llI1l11llll1II1IIlIIIllI11lI11l += $Ill1ll1111l1IIIIIlIlII1ll1III1I;
    }
    if ($llI1l11llll1II1IIlIIIllI11lI11l > $Ill1ll1111l1IIIIIlIlII1ll1III1I) {
        $llI1l11llll1II1IIlIIIllI11lI11l = $Ill1ll1111l1IIIIIlIlII1ll1III1I;
    }
    my(@lII1lII11IIIlIlIIIlIIIIlIIl1ll1) = @l11IlI11llII1l111l1IIlIIl1lI1I1[$IIl1llllll1l1lIl1l1l1I11lll1IlI .. $llI1l11llll1II1IIlIIIllI11lI11l];
    my $I1l1I111I111111Il1II1lllIl1l1ll = join("\n", @lII1lII11IIIlIlIIIlIIIIlIIl1ll1);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub Ill1IIIll11l1lIlllI1l1lIlI1l1I1 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $I1II1IIIII1l1II1IlI11lllI1l1111 = shift @_;
    my $l1Illl11l1II1II11IIlI1lIlI1IIl1 = shift @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = '';
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    if (not defined $l1Illl11l1II1II11IIlI1lIlI1IIl1) {
        $l1Illl11l1II1II11IIlI1lIlI1IIl1 = $I1II1IIIII1l1II1IlI11lllI1l1111;
    }
    $lIl1II11I1llIIII1I1lIlIllI111I1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIl1II11I1llIIII1I1lIlIllI111I1);
    $lIl1II11I1llIIII1I1lIlIllI111I1 =~ s/\n//;
    my(@IllI11I11ll11Ill111IlIlI111IIlI) = split(' ', $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    for (my $i = $l1Illl11l1II1II11IIlI1lIlI1IIl1; $i >= $I1II1IIIII1l1II1IlI11lllI1l1111; --$i) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= $IllI11I11ll11Ill111IlIlI111IIlI[$i];
    }
    $I1l1I111I111111Il1II1lllIl1l1ll = hex $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub Il1ll11IllIIllIIIl11IIIIII1ll11 {
    my $lI1lIlII11l11lIIIlIIIIllII1111I = shift @_;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $lI1II1lIIl11llllIIIl11I11lIllll = shift @_ || ':';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', $lI1lIlII11l11lIIIlIIIIllII1111I, $lIl1II11I1llIIII1I1lIlIllI111I1);
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(/$lI1II1lIIl11llllIIIl11I11lIllll/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
    return I11IllIl11lI1IIl1lIllllI1I1IIll($l11IlI11llII1l111l1IIlIIl1lI1I1[1]);
}
sub l1I1IIIl1l1II11I11ll1Illl11II1l {
    my $l1llIIl11l11lllII11lIl11lIIl1I1 = shift @_;
    my $lllIllllIIl1Illl1lll1lllIl1I11l = shift @_;
    my $lIll1Il1lI1I1ll1Il111111II1I1II = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $ll1I1I11ll1llI1111IlllIlIllII1I;
    $ll1I1I11ll1llI1111IlllIlIllII1I = index($l1llIIl11l11lllII11lIl11lIIl1I1, $lllIllllIIl1Illl1lll1lllIl1I11l);
    if ($ll1I1I11ll1llI1111IlllIlIllII1I < 0) {
        return $l1llIIl11l11lllII11lIl11lIIl1I1;
    }
    my $l11IIII1IllIl11II1l1lIlI1l1IlII;
    my $Il1IllI11I1I1IlIlll1l111lIllIll;
    $l11IIII1IllIl11II1l1lIlI1l1IlII = substr($l1llIIl11l11lllII11lIl11lIIl1I1, 0, $ll1I1I11ll1llI1111IlllIlIllII1I);
    $Il1IllI11I1I1IlIlll1l111lIllIll = substr($l1llIIl11l11lllII11lIl11lIIl1I1, $ll1I1I11ll1llI1111IlllIlIllII1I + length($lllIllllIIl1Illl1lll1lllIl1I11l));
    $I1l1I111I111111Il1II1lllIl1l1ll = $l11IIII1IllIl11II1l1lIlI1l1IlII . $lIll1Il1lI1I1ll1Il111111II1I1II . $Il1IllI11I1I1IlIlll1l111lIllIll;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lII1l1IlIl1l1I1Il1lI1lIlI1lllIl {
    my $l1llIIl11l11lllII11lIl11lIIl1I1 = shift @_;
    my $lllIllllIIl1Illl1lll1lllIl1I11l = shift @_;
    my $lIll1Il1lI1I1ll1Il111111II1I1II = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $ll1I1I11ll1llI1111IlllIlIllII1I = 0;
    my $Il1l11llIl1III1lIl1I11I1l11I1I1;
    $Il1l11llIl1III1lIl1I11I1l11I1I1 = length($lIll1Il1lI1I1ll1Il111111II1I1II) - length($lllIllllIIl1Illl1lll1lllIl1I11l);
    while (1) {
        $ll1I1I11ll1llI1111IlllIlIllII1I = index($l1llIIl11l11lllII11lIl11lIIl1I1, $lllIllllIIl1Illl1lll1lllIl1I11l, $ll1I1I11ll1llI1111IlllIlIllII1I);
        if ($ll1I1I11ll1llI1111IlllIlIllII1I < 0) {
            return $l1llIIl11l11lllII11lIl11lIIl1I1;
        }
        my $l11IIII1IllIl11II1l1lIlI1l1IlII;
        my $Il1IllI11I1I1IlIlll1l111lIllIll;
        $l11IIII1IllIl11II1l1lIlI1l1IlII = substr($l1llIIl11l11lllII11lIl11lIIl1I1, 0, $ll1I1I11ll1llI1111IlllIlIllII1I);
        $Il1IllI11I1I1IlIlll1l111lIllIll = substr($l1llIIl11l11lllII11lIl11lIIl1I1, $ll1I1I11ll1llI1111IlllIlIllII1I + length($lllIllllIIl1Illl1lll1lllIl1I11l));
        $l1llIIl11l11lllII11lIl11lIIl1I1 = $l11IIII1IllIl11II1l1lIlI1l1IlII . $lIll1Il1lI1I1ll1Il111111II1I1II . $Il1IllI11I1I1IlIlll1l111lIllIll;
        $ll1I1I11ll1llI1111IlllIlIllII1I += $Il1l11llIl1III1lIl1I11I1l11I1I1;
    }
}
sub l1III1Il1Illllllll1II1Il11Il11l {
    my $Il1Il1l1Il1IlllIl1l11lI1IIIlllI = shift @_;
    my $I1I11l1Il1lIIl1l1IIl11IlIIIlIll = shift @_;
    my $lIIl1II1I1I1l1I1I1111lIIllI1l11 = shift @_;
    my $l11I11IlI1l11111lI1II1IlIll11II = '';
    my $x;
    my $IIlII1I1II1l1lIllll1lll1l11I1lI = length $Il1Il1l1Il1IlllIl1l11lI1IIIlllI;
    for (my $i = 0; $i < $IIlII1I1II1l1lIllll1lll1l11I1lI; ++$i) {
        $x = substr($Il1Il1l1Il1IlllIl1l11lI1IIIlllI, $i, 1);
        if ($x ne $I1I11l1Il1lIIl1l1IIl11IlIIIlIll) {
            $l11I11IlI1l11111lI1II1IlIll11II .= $x;
        }
        else {
            $l11I11IlI1l11111lI1II1IlIll11II .= $lIIl1II1I1I1l1I1I1111lIIllI1l11;
        }
    }
    return $l11I11IlI1l11111lI1II1IlIll11II;
}
sub lI11lll111l1ll1I1IlIIII111lIl11 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    if ($lIl1II11I1llIIII1I1lIlIllI111I1) {
        return 'yes';
    }
    else {
        return 'no';
    }
}
sub ll1l1lIII111Il1l1II1l1ll1ll1lIl {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIl1II11I1llIIII1I1lIlIllI111I1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIIl1IIlIIIlll1l1I1I1l1llI111lI($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'yes' or $l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'y') {
        return 1;
    }
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'no' or $l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'n') {
        return 0;
    }
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'true' or $l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 't') {
        return 1;
    }
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'false' or $l11lIIl111IIIIl1l1Il1l1lI1ll111 eq 'f') {
        return 0;
    }
    printf "I don't know how to interpret this as boolean:  %s\n", $lIl1II11I1llIIII1I1lIlIllI111I1;
    printf "Halting.\n\n";
    exit 1;
}
sub IlI11IIl1IIIll111IlIlIlIllll111 {
    my $l1lllllllIllI1lIlIIl1IlIIIl1IlI;
    my $IlI1Illll1IlIIl1IlIlI1l1IIlII1l;
    my(@llllIlI1lI11IlIllIl1II11llIIl1I) = ('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec');
    my(@l11111llllI1llllllIlI1l1l111lll) = ('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun');
    my($lI1lllI111I1I1IlllIl1Il1111Illl, $I1l1II1lIl1l1llllI1Il11I1IIIIl1, $lIllllIllI11I1IIII1l1lll1Il1IlI, $l1lIlI1111llI1I1IIllIIl1I1IIIII, $I1IIIIII11IlI11I1l1l1lIl1IIllIl, $III1ll1l1lI11I11lIl11l1II1llll1, $l1111lll1ll11l1Il1lll1IIIl1lll1, $lI1IIIlI1l11I11I11Illl111I11III, $l11IIllI1lIll11I1lI1lIlll1Il11I) = localtime();
    my $I1Il1lI1I1II1I1IlIIlllI11Il11Il = 1900 + $III1ll1l1lI11I11lIl11l1II1llll1;
    $l1lllllllIllI1lIlIIl1IlIIIl1IlI = sprintf('%04d-%02d-%02d', $I1Il1lI1I1II1I1IlIIlllI11Il11Il, $I1IIIIII11IlI11I1l1l1lIl1IIllIl, $l1lIlI1111llI1I1IIllIIl1I1IIIII);
    $IlI1Illll1IlIIl1IlIlI1l1IIlII1l = sprintf('%02d:%02d:%02d', $lIllllIllI11I1IIII1l1lll1Il1IlI, $I1l1II1lIl1l1llllI1Il11I1IIIIl1, $lI1lllI111I1I1IlllIl1Il1111Illl);
    return $l1lllllllIllI1lIlIIl1IlIIIl1IlI, $IlI1Illll1IlIIl1IlIlI1l1IIlII1l;
}
sub IIll11Il11IIlIllIIl1llIIlII11I1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = `date +"%s"`;
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11111ll11I111lIl1Il1III111lIII {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = `date +%s -d"$lIl1II11I1llIIII1I1lIlIllI111I1"`;
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l1l111l111I1l11lIIIl1l11llII11l {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $lI1II1lIIl11llllIIIl11I11lIllll = shift @_ || '/';
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my(@IllI11I11ll11Ill111IlIlI111IIlI) = split(/$lI1II1lIIl11llllIIIl11I11lIllll/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[2] . $lI1II1lIIl11llllIIIl11I11lIllll . $IllI11I11ll11Ill111IlIlI111IIlI[0] . $lI1II1lIIl11llllIIIl11I11lIllll . $IllI11I11ll11Ill111IlIlI111IIlI[1];
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub Il1IIllI1I1I111l1l1I1III1IlIII1 {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $lI1II1lIIl11llllIIIl11I11lIllll = shift @_ || '/';
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my(@IllI11I11ll11Ill111IlIlI111IIlI) = split(/$lI1II1lIIl11llllIIIl11I11lIllll/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[1] . $lI1II1lIIl11llllIIIl11I11lIllll . $IllI11I11ll11Ill111IlIlI111IIlI[2] . $lI1II1lIIl11llllIIIl11I11lIllll . $IllI11I11ll11Ill111IlIlI111IIlI[0];
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1Il1lII1I1II1lIIll1l11I1lIlI11 {
    my $lIl1l11IIIIIl1IlIlI1l1I1l11IllI = shift @_;
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = 'date -d @' . $lIl1l11IIIIIl1IlIlI1l1I1l11IllI . ' +"%Y-%m-%d %T"';
    my $I1l1I111I111111Il1II1lllIl1l1ll = `$lIlIlI1I11llIllI1lI1IlIIIII1I1l`;
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l11IIl1lI1II1lll1111III1IIIlIl1 {
    my $l1Illl1l1IIllllII1lIIlIII111III = shift @_;
    my $II1Il1Il1ll1I1l111I111IlI11II1l = 0;
    my $lIlI1I1111111l11II1lII1lI1I1Ill = 0;
    my $III1I1I1II111IIlI1ll1I1IllIll1I = 0;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    if ($l1Illl1l1IIllllII1lIIlIII111III > 86400) {
        $II1Il1Il1ll1I1l111I111IlI11II1l = floor($l1Illl1l1IIllllII1lIIlIII111III / 86400);
        $l1Illl1l1IIllllII1lIIlIII111III -= $II1Il1Il1ll1I1l111I111IlI11II1l * 86400;
    }
    if ($l1Illl1l1IIllllII1lIIlIII111III > 3600) {
        $lIlI1I1111111l11II1lII1lI1I1Ill = floor($l1Illl1l1IIllllII1lIIlIII111III / 3600);
        $l1Illl1l1IIllllII1lIIlIII111III -= $lIlI1I1111111l11II1lII1lI1I1Ill * 3600;
    }
    if ($l1Illl1l1IIllllII1lIIlIII111III > 60) {
        $III1I1I1II111IIlI1ll1I1IllIll1I = floor($l1Illl1l1IIllllII1lIIlIII111III / 60);
        $l1Illl1l1IIllllII1lIIlIII111III -= $III1I1I1II111IIlI1ll1I1IllIll1I * 60;
    }
    if ($II1Il1Il1ll1I1l111I111IlI11II1l > 0) {
        $I1l1I111I111111Il1II1lllIl1l1ll .= $II1Il1Il1ll1I1l111I111IlI11II1l . 'd ';
    }
    $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf('%02d%s%02d%s%02d', $lIlI1I1111111l11II1lII1lI1I1Ill, ':', $III1I1I1II111IIlI1ll1I1IllIll1I, ':', $l1Illl1l1IIllllII1lIIlIII111III);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
my $III1lI11lllI1IlI1ll1l1II1lIII1I = '';
my $lIll11I1IIlIlI1ll11llIlI1ll11I1 = '';
my $II1Il1IIIl1IIlIlll1l1IIIllIl1l1 = '1';
my $IlI1IIlII1Ill1Ill1I1IIll1I1ll11 = $IIll1llllIl11I1IIl11I1Ill11I1II;
my $I1IlII1IllI1lIIlI1lIl11lIIIl11I = 'unknown';
my $I1lIIII1II11ll1I11llI1llIIIIll1 = '';
my $llIIIl1IllllI1l1111I111llI1llIl = '';
my $Ill111ll1111lIl1Il1lll1l11l1llI = '';
my $Il1llIII1I11II1lIII11IlI1111ll1 = 'unknown';
my $I11IlIllllI1I1lI111IIlIIlIIlIIl = $IIll1llllIl11I1IIl11I1Ill11I1II;
my $IlIIIIl1lll11l1llI11Ill1l111lll = $IIll1llllIl11I1IIl11I1Ill11I1II;
my $I11I11lIIlI1111l1lII1III11Ill1I = 0;
my $IIl11I1lllI1l11l11l1lI1I1l1III1 = $IllI1IlIll111lI11lI1I111lIlllll;
my $IIIl1llII111111I1llll1I1IlI1l1I = '';
my $llIlll11IIll11I111l1l1111lIlIIl = '';
my $I1l1ll1IIlIllllIl1IIl1llIl111II = '';
my $lIlIIl1I1Ill1II11l11IIlI1I1IIll = '';
my $I1ll11I1l1ll11IIlll11IllII1II11 = '';
my $l111I1lI11l1Il1III1l1I1Il111ll1 = 0;
my $Il1IlIlIIII11lllI111lllI1lI11l1 = '';
my $ll1l1lIlIll1I1I1IlllIIIIlIl1II1 = 0;
my $l1II11l1lI1l1l1IlI1llIl1llI1Il1 = '';
my $l1lIll1llIIll11111llI111l1lll1I = 0;
my $I1II1lI1l1lllIII1IIIllI1IlllIl1 = '';
my $lI11ll1I1I11IIllI1lI1IllI1lIll1 = 0;
sub lIl1lIlIIlI1ll1Il1lIIIll1I111l1 {
    $l111I1lI11l1Il1III1l1I1Il111ll1 = 0;
    $ll1l1lIlIll1I1I1IlllIIIIlIl1II1 = 0;
    $l1lIll1llIIll11111llI111l1lll1I = 0;
    $lI11ll1I1I11IIllI1lI1IllI1lIll1 = 0;
}
sub IllIl1l1111I1I111IIll1Il1IllI1l {
    return $IIIl1llII111111I1llll1I1IlI1l1I;
}
sub l1lll11l11l1lIlII1I1IlllI11lI11 {
    $IIIl1llII111111I1llll1I1IlI1l1I = '';
}
sub I1I1I1IlIlIII111IllllIIl111I1I1 {
    $IIIl1llII111111I1llll1I1IlI1l1I = shift @_;
}
sub I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il {
    my($I1IIllIl11Il1lIIIlIll1II1Il1I1l, $llIllIII1IlII1l1l11l1I1II1III1l) = @_;
    if ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'IPMITOOL') {
        $III1lI11lllI1IlI1ll1l1II1lIII1I = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'IPMITOOL_FLAGS') {
        $lIll11I1IIlIlI1ll11llIlI1ll11I1 = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'USEKCS') {
        $II1Il1IIIl1IIlIlll1l1IIIllIl1l1 = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'PLAT') {
        $I1IlII1IllI1lIIlI1lIl11lIIIl11I = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'PLAT_VARIANT') {
        $I1lIIII1II11ll1I11llI1llIIIIll1 = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'PLAT_RAW') {
        $llIIIl1IllllI1l1111I111llI1llIl = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'PLAT_NAME') {
        $Ill111ll1111lIl1Il1lll1l11l1llI = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'PLAT_FAMILY') {
        $Il1llIII1I11II1lIII11IlI1111ll1 = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'VERBOSE') {
        $IlI1IIlII1Ill1Ill1I1IIll1I1ll11 = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'IPMIDEBUG') {
        $I11IlIllllI1I1lI111IIlIIlIIlIIl = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'NO_RESV_CACHING') {
        $IIl11I1lllI1l11l11l1lI1I1l1III1 = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'CURBMC') {
        $llIlll11IIll11I111l1l1111lIlIIl = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'CURUSER') {
        $I1l1ll1IIlIllllIl1IIl1llIl111II = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    elsif ($I1IIllIl11Il1lIIIlIll1II1Il1I1l eq 'CURPASS') {
        $lIlIIl1I1Ill1II11l11IIlI1I1IIll = $llIllIII1IlII1l1l11l1I1II1III1l;
    }
    else {
        printf "Unknown variable requested to be set:  $I1IIllIl11Il1lIIIlIll1II1Il1I1l\n";
        exit 1;
    }
}
sub ll1Il1lI1lI11lIlII1I1IIl1I1I1I1 {
    my $l11lIIIlIIIIlIIl1lIIll1lI1lI1l1 = shift @_;
    my $I1IIl1111I1Il1IlIIl111I1I1lIIIl = shift @_;
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = shift @_;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = shift @_;
    my($l1lllllllIllI1lIlIIl1IlIIIl1IlI, $IlI1Illll1IlIIl1IlIlI1l1IIlII1l) = IlI11IIl1IIIll111IlIlIlIllll111();
    if ($IlIIIIl1lll11l1llI11Ill1l111lll) {
        printf STDERR "%45s | %3s | %s\n", $I1IIl1111I1Il1IlIIl111I1I1lIIIl, '', $lIlIlI1I11llIllI1lI1IlIIIII1I1l;
        printf STDERR "%45s   %3s | %s\n", '', $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    else {
        printf STDERR "\n";
        printf STDERR "sequence num :  $l11lIIIlIIIIlIIl1lIIll1lI1lI1l1\n";
        printf STDERR "date_time    :  %s%s%s\n", $l1lllllllIllI1lIlIIl1IlIIIl1IlI, '__', $IlI1Illll1IlIIl1IlIlI1l1IIlII1l;
        printf STDERR "task name    :  $I1IIl1111I1Il1IlIIl111I1I1lIIIl\n";
        printf STDERR "command sent :  $lIlIlI1I11llIllI1lI1IlIIIII1I1l\n";
        printf STDERR "response ec  :  $l1II1lI1Il11lIIl1111Il1l11IIlll\n";
        printf STDERR "response data:  $I1l1I111I111111Il1II1lllIl1l1ll\n";
        printf STDERR "summary data :$l1II1lI1Il11lIIl1111Il1l11IIlll,$I1IIl1111I1Il1IlIIl111I1I1lIIIl,$l11lIIIlIIIIlIIl1lIIll1lI1lI1l1,%s%s%s\n", $l1lllllllIllI1lIlIIl1IlIIIl1IlI, '__', $IlI1Illll1IlIIl1IlIlI1l1IIlII1l;
        printf STDERR "\n";
    }
}
sub llI1Ill11lI1lI111II1l1I1I111I11 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l;
    if ($l111I1lI11l1Il1III1l1I1Il111ll1) {
        return $I1ll11I1l1ll11IIlll11IllII1II11;
    }
    else {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('fru', 'noerr');
        $l111I1lI11l1Il1III1l1I1Il111ll1 = 1;
        $I1ll11I1l1ll11IIlll11IllII1II11 = $I1l1I111I111111Il1II1lllIl1l1ll;
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
}
sub ll11l1lI1lIlIl1lI1I1111llll11II {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    if ($l1lIll1llIIll11111llI111l1lll1I) {
        return $l1II11l1lI1l1l1IlI1llIl1llI1Il1;
    }
    else {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('lan print 1', '');
        $l1lIll1llIIll11111llI111l1lll1I = 1;
        $l1II11l1lI1l1l1IlI1llIl1llI1Il1 = $I1l1I111I111111Il1II1lllIl1l1ll;
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
}
sub IIl11l111lIIlII1111ll111ll1I1Il {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $i;
    if ($lI11ll1I1I11IIllI1lI1IllI1lIll1) {
        return $I1II1lI1l1lllIII1IIIllI1IlllIl1;
    }
    else {
        I1I1I1IlIlIII111IllllIIl111I1I1 'SCBMC_get_sensor_info';
        for ($i = 0; $i < 3; ++$i) {
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x16', 'noerr');
            if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
                $lI11ll1I1I11IIllI1lI1IllI1lIll1 = 1;
                $I1II1lI1l1lllIII1IIIllI1IlllIl1 = $I1l1I111I111111Il1II1lllIl1l1ll;
                return $I1l1I111I111111Il1II1lllIl1l1ll;
            }
            sleep 2;
        }
        $lI11ll1I1I11IIllI1lI1IllI1lIll1 = 1;
        $I1II1lI1l1lllIII1IIIllI1IlllIl1 = Illll1ll1IIII1ll1I11IllI1I1lI1I();
        return Illll1ll1IIII1ll1I11IllI1I1lI1I();
    }
}
sub l1l1I1lI1ll1l1lllI1IIl1ll11IllI {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lllIIl1I11lll1IIll11IIIl1l11Ill;
    my $lll1lllIIIlII1I1I1ll111lI1Il1ll;
    my $l1ll1lII1l1II1llI11ll11II1lIIl1;
    my $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'unknown';
    my $lIll1IlIll1IlllIlI1lIIIIIIII1lI = '';
    my $lIlI11l1IIl1lIlIllllll111IIIllI = '';
    my $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'unknown';
    my $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'unknown';
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my @l1II1l111lI1II11IlI11l11l1lI11I;
    my $i;
    my $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    $lllIIl1I11lll1IIll11IIIl1l11Ill = uc Il1ll11IllIIllIIIl11IIIIII1ll11('Board Product', $lllIIIl1ll1I111llII1llllII1IIII);
    $lll1lllIIIlII1I1I1ll111lI1Il1ll = uc Il1ll11IllIIllIIIl11IIIIII1ll11('Product Name', $lllIIIl1ll1I111llII1llllII1IIII);
    $l1ll1lII1l1II1llI11ll11II1lIIl1 = uc Il1ll11IllIIllIIIl11IIIIII1ll11('Board Mfg', $lllIIIl1ll1I111llII1llllII1IIII);
    if (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C1100') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C1100';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C2100') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C2100';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C6100') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6100';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C6105') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6105';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C6145') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6145';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, '5125') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C5125';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C5125') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C5125';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C5220') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C5220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C6220') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C8220') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'C8220';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'C410X') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C410X';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    elsif (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'TITANIUM') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C410X';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PEC';
    }
    if ($l11I1lIll11ll1Il1ll1IIl1l1IIl1l ne 'unknown') {
        goto done;
    }
    if (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'CS24-TY') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'CS24-TY';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C1100';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'FS12-TY') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'FS12-TY';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C2100';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'XS23-TY') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'XS23-TY';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6100';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if (index($lll1lllIIIlII1I1I1ll111lI1Il1ll, 'RADON') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'RADON';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if (index($lllIIl1I11lll1IIll11IIIl1l11Ill, 'RADON') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'RADON';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if (index($lllIIl1I11lll1IIll11IIIl1l11Ill, 'C6220') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'RADON';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if (index($lllIIl1I11lll1IIll11IIIl1l11Ill, 'C8220') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'RADON';
        $lIlI11l1IIl1lIlIllllll111IIIllI = '';
        $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6220';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
        goto done;
    }
    if ($l1ll1lII1l1II1llI11ll11II1lIIl1 =~ /dell/i) {
        if ($lllIIl1I11lll1IIll11IIIl1l11Ill =~ /5442/) {
            $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C6100';
            $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'plutonium';
            $lIlI11l1IIl1lIlIllllll111IIIllI = '';
            $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
            $lIll1IlIll1IlllIlI1lIIIIIIII1lI = $lllIIl1I11lll1IIll11IIIl1l11Ill;
            goto done;
        }
        if ($lllIIl1I11lll1IIll11IIIl1l11Ill =~ /S81V/i) {
            $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C5125';
            $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'quark';
            $lIlI11l1IIl1lIlIllllll111IIIllI = '';
            $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
            $lIll1IlIll1IlllIlI1lIIIIIIII1lI = $lllIIl1I11lll1IIll11IIIl1l11Ill;
            goto done;
        }
        if ($lllIIl1I11lll1IIll11IIIl1l11Ill =~ /S99Q/i) {
            $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'C2100';
            $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'scoobyfish';
            $lIlI11l1IIl1lIlIllllll111IIIllI = '';
            $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
            $lIll1IlIll1IlllIlI1lIIIIIIII1lI = $lllIIl1I11lll1IIll11IIIl1l11Ill;
            goto done;
        }
        if ($lllIIl1I11lll1IIll11IIIl1l11Ill =~ /DCS2210/i) {
            $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'DCS2210';
            $IIlIIlII11Il1I1lIII1Il11lII1Ill = 'shamu';
            $lIlI11l1IIl1lIlIllllll111IIIllI = '';
            $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'DCS';
            $lIll1IlIll1IlllIlI1lIIIIIIII1lI = $lllIIl1I11lll1IIll11IIIl1l11Ill;
            goto done;
        }
    }
    if ($l11I1lIll11ll1Il1ll1IIl1l1IIl1l ne 'unknown') {
        goto done;
    }
    if (index($lllIIl1I11lll1IIll11IIIl1l11Ill, 'POWEREDGE R') >= 0) {
        $IIlIIlII11Il1I1lIII1Il11lII1Ill = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l = 'POWEREDGE';
        $I1l11l1l1l1lI1ll1Illl111IIIIIll = 'PE';
        goto done;
    }
    done: if ($l11I1lIll11ll1Il1ll1IIl1l1IIl1l eq 'C6105') {
        I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_version';
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = IlI1I1Ill1Ill1lI1l11lll1111lIII('mc info');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            @IllI11I11ll11Ill111IlIlI111IIlI = split(/\n/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
            foreach $i (0 .. $#IllI11I11ll11Ill111IlIlI111IIlI) {
                if ($IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /Firmware Revision/) {
                    @l1II1l111lI1II11IlI11l11l1lI11I = split(/:/, $IllI11I11ll11Ill111IlIlI111IIlI[$i], 0);
                    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($l1II1l111lI1II11IlI11l11l1lI11I[1]);
                    last;
                }
            }
            if ($I1l1I111I111111Il1II1lllIl1l1ll =~ /^3\./) {
                $lIlI11l1IIl1lIlIllllll111IIIllI = 'IPV6';
            }
        }
    }
    $I1IlII1IllI1lIIlI1lIl11lIIIl11I = $l11I1lIll11ll1Il1ll1IIl1l1IIl1l;
    $I1lIIII1II11ll1I11llI1llIIIIll1 = $lIlI11l1IIl1lIlIllllll111IIIllI;
    $llIIIl1IllllI1l1111I111llI1llIl = $lIll1IlIll1IlllIlI1lIIIIIIII1lI;
    $Ill111ll1111lIl1Il1lll1l11l1llI = $IIlIIlII11Il1I1lIII1Il11lII1Ill;
    $Il1llIII1I11II1lIII11IlI1111ll1 = $I1l11l1l1l1lI1ll1Illl111IIIIIll;
    return $Il1llIII1I11II1lIII11IlI1111ll1, $llIIIl1IllllI1l1111I111llI1llIl, $Ill111ll1111lIl1Il1lll1l11l1llI, $I1lIIII1II11ll1I11llI1llIIIIll1, $I1IlII1IllI1lIIlI1lIl11lIIIl11I;
}
sub Illll11l1I111Il1IlIII1l1IllIIl1 {
    my($lIl1II11I1llIIII1I1lIlIllI111I1) = @_;
    my(@l1I111IIl11lII1l1I11lllIllIIl1I) = split(/ +/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    my $i;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    for ($i = $#l1I111IIl11lII1l1I11lllIllIIl1I; $i >= 0; --$i) {
        $I1l1I111I111111Il1II1lllIl1l1ll .= $l1I111IIl11lII1l1I11lllIllIIl1I[$i];
        if ($i > 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll .= ' ';
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub II11IIl1ll1Il1Ill1I1IIl1II1Ill1 {
    my($lIl1II11I1llIIII1I1lIlIllI111I1) = @_;
    my(@l1I111IIl11lII1l1I11lllIllIIl1I) = split(/ +/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    my $i;
    my $I111lll11111lIII1IlI1lllllllllI;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1IlllIlII111IIlI111IlllI11ll1I = 0;
    $I111lll11111lIII1IlI1lllllllllI = 0;
    for ($i = $#l1I111IIl11lII1l1I11lllIllIIl1I; $i >= 0; --$i) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = hex $l1I111IIl11lII1l1I11lllIllIIl1I[$i];
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $l11lIIl111IIIIl1l1Il1l1lI1ll111 << $I111lll11111lIII1IlI1lllllllllI * 8;
        $I1IlllIlII111IIlI111IlllI11ll1I += $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        ++$I111lll11111lIII1IlI1lllllllllI;
    }
    return $I1IlllIlII111IIlI111IlllI11ll1I;
}
sub I1III1I11ll1lII1l11l1llI1l111ll {
    my($ll11ll1l11lIlIIIl11I1I1IlI1I1l1, $IIll111IllI1Ill1IIlIl1II11Il1l1) = @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IIl1l11I111lIll1lI11lII1II1l1 = '';
    my $i;
    my @l1I111IIl11lII1l1I11lllIllIIl1I;
    my $l1llll1llllI1111I111llI1II1I1lI = $IIll111IllI1Ill1IIlIl1II11Il1l1 * 2;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = sprintf("%0$l1llll1llllI1111I111llI1II1I1lI" . 'x', $ll11ll1l11lIlIIIl11I1I1IlI1I1l1);
    for ($i = 0; $i <= length $l11lIIl111IIIIl1l1Il1l1lI1ll111; ++$i) {
        $l1IIl1l11I111lIll1lI11lII1II1l1 .= substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, $i, 1);
        if (($i + 1) % 2 == 0) {
            if ($i + 1 < length $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
                $l1IIl1l11I111lIll1lI11lII1II1l1 .= ' ';
            }
        }
    }
    return $l1IIl1l11I111lIll1lI11lII1II1l1;
}
sub llll11IIIlI11lI1Il1I11I1lII11lI {
    my($lIl1II11I1llIIII1I1lIlIllI111I1, $lI11111lI1III1II1IIlll1lI1lIlll) = @_;
    my(@l1I111IIl11lII1l1I11lllIllIIl1I) = split(/ +/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    my $i;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    for ($i = 0; $i <= $#l1I111IIl11lII1l1I11lllIllIIl1I; ++$i) {
        if (defined $lI11111lI1III1II1IIlll1lI1lIlll) {
            if ($i < $lI11111lI1III1II1IIlll1lI1lIlll) {
                next;
            }
        }
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = hex $l1I111IIl11lII1l1I11lllIllIIl1I[$i];
        $I1l1I111I111111Il1II1lllIl1l1ll .= chr $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub ll1111llIIIIl11lIIlIl11llIll1l1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $IllII1l1111IIlIl111l1l1IIIllII1 = '';
    my $i = '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_ || '';
    my $I1llIlI1l11II11lll1IlIIl1I1lll1 = shift @_ || $IIll1llllIl11I1IIl11I1Ill11I1II;
    for ($i = 0; $i < length $lIl1II11I1llIIII1I1lIlIllI111I1; ++$i) {
        $IllII1l1111IIlIl111l1l1IIIllII1 = substr($lIl1II11I1llIIII1I1lIlIllI111I1, $i, 1);
        $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf(' 0x%02x', ord $IllII1l1111IIlIl111l1l1IIIllII1);
    }
    if ($I1llIlI1l11II11lll1IlIIl1I1lll1) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = sprintf(' 0x%02x', length $lIl1II11I1llIIII1I1lIlIllI111I1);
        $I1l1I111I111111Il1II1lllIl1l1ll = $l11lIIl111IIIIl1l1Il1l1lI1ll111 . $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1llI1llIIII1II1llI1lI1lIIl111I {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII(@_);
    $I1l1I111I111111Il1II1lllIl1l1ll = llII1llIl1IlIlII1llI1IlllIllll1($I1l1I111I111111Il1II1lllIl1l1ll);
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IlI1I1Ill1Ill1lI1l11lll1111lIII {
    my($l11Il11I1111l1I11I111ll1l11IIIl) = shift @_;
    my($lII1II1Illl111IIlll11I11Illl11l) = shift @_;
    my $l11Illll11l11llI111I1I111IllllI = '';
    my $l1l1llllIl111I11III1l11Il11IIll = '';
    my $ll1111l1Ill1I1Ill1111llllIl11lI = 0;
    my $lIIl111lIl11I11lIIlIIl111lI1l1I = 1;
    my $lIII1lIll111I1l1Il1Ill1IIl1I1I1 = '';
    my $I1Il1lIlll1IIl11II1lllI1111IIIl = '';
    $I1Il1lIlll1IIl11II1lllI1111IIIl = "$III1lI11lllI1IlI1ll1l1II1lIII1I $lIll11I1IIlIlI1ll11llIlI1ll11I1 ";
    if (not $II1Il1IIIl1IIlIlll1l1IIIllIl1l1) {
        $I1Il1lIlll1IIl11II1lllI1111IIIl .= '-H ' . $llIlll11IIll11I111l1l1111lIlIIl . ' -U ' . $I1l1ll1IIlIllllIl1IIl1llIl111II . ' -P ' . $lIlIIl1I1Ill1II11l11IIlI1I1IIll . ' ';
    }
    if (defined $lII1II1Illl111IIlll11I11Illl11l) {
        if ($lII1II1Illl111IIlll11I11Illl11l eq 'noerr') {
            $l11Illll11l11llI111I1I111IllllI = ' 2>/dev/null';
        }
        if ($lII1II1Illl111IIlll11I11Illl11l eq 'noerror') {
            $l11Illll11l11llI111I1I111IllllI = ' 2>/dev/null';
        }
        if ($lII1II1Illl111IIlll11I11Illl11l eq 'nooutput') {
            $l11Illll11l11llI111I1I111IllllI = ' >/dev/null 2>&1';
        }
        if ($lII1II1Illl111IIlll11I11Illl11l eq 'debug') {
            $l1l1llllIl111I11III1l11Il11IIll = ' 2>&1';
            $ll1111l1Ill1I1Ill1111llllIl11lI = 1;
        }
        if ($lII1II1Illl111IIlll11I11Illl11l eq 'nocallout') {
            $lIIl111lIl11I11lIIlIIl111lI1l1I = 0;
            $l1l1llllIl111I11III1l11Il11IIll = ' 2>&1';
        }
    }
    else {
        $l1l1llllIl111I11III1l11Il11IIll = ' 2>&1';
    }
    $lIII1lIll111I1l1Il1Ill1IIl1I1I1 = "$I1Il1lIlll1IIl11II1lllI1111IIIl $l11Il11I1111l1I11I111ll1l11IIIl $l1l1llllIl111I11III1l11Il11IIll $l11Illll11l11llI111I1I111IllllI";
    my $I1l1I111I111111Il1II1lllIl1l1ll = `$lIII1lIll111I1l1Il1Ill1IIl1I1I1`;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll = $?;
    if ($I11IlIllllI1I1lI111IIlIIlIIlIIl or $l1II1lI1Il11lIIl1111Il1l11IIlll or $ll1111l1Ill1I1Ill1111llllIl11lI) {
        if ($I11IlIllllI1I1lI111IIlIIlIIlIIl) {
            ll1Il1lI1lI11lIlII1I1IIl1I1I1I1 $I11I11lIIlI1111l1lII1III11Ill1I, $IIIl1llII111111I1llll1I1IlI1l1I, $lIII1lIll111I1l1Il1Ill1IIl1I1I1, $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        else {
            if ($lIIl111lIl11I11lIIlIIl111lI1l1I) {
                if ($l11Illll11l11llI111I1I111IllllI eq '') {
                    ll1Il1lI1lI11lIlII1I1IIl1I1I1I1 $I11I11lIIlI1111l1lII1III11Ill1I, $IIIl1llII111111I1llll1I1IlI1l1I, $lIII1lIll111I1l1Il1Ill1IIl1I1I1, $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
                }
            }
        }
    }
    ++$I11I11lIIlI1111l1lII1III11Ill1I;
    l1lll11l11l1lIlII1I1IlllI11lI11 ;
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llII1llIl1IlIlII1llI1IlllIllll1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = shift @_;
    $I1l1I111I111111Il1II1lllIl1l1ll =~ s/(?>\n|\x0D\x0A)//g;
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llII1Il1I11l1llIlI1I111IIl1lllI {
    my $lI11Il11I1II1Il11I1IllII1IIl111 = shift @_;
    my(@IllI11I11ll11Ill111IlIlI111IIlI) = split(' ', $lI11Il11I1II1Il11I1IllII1IIl111, 0);
    my $I1ll1IlIIl1ll111ll11lll1II1l1l1;
    my $l1IIl1llll1I1l11IIlIIlIllIIlI1l;
    $I1ll1IlIIl1ll111ll11lll1II1l1l1 = shift @IllI11I11ll11Ill111IlIlI111IIlI;
    $I1ll1IlIIl1ll111ll11lll1II1l1l1 = hex $I1ll1IlIIl1ll111ll11lll1II1l1l1;
    $I1ll1IlIIl1ll111ll11lll1II1l1l1 = $I1ll1IlIIl1ll111ll11lll1II1l1l1 << 2;
    $I1ll1IlIIl1ll111ll11lll1II1l1l1 = sprintf('0x20 0x%02x', $I1ll1IlIIl1ll111ll11lll1II1l1l1);
    $l1IIl1llll1I1l11IIlIIlIllIIlI1l = join(' ', @IllI11I11ll11Ill111IlIlI111IIlI);
    return $I1ll1IlIIl1ll111ll11lll1II1l1l1 . ' ' . $l1IIl1llll1I1l11IIlIIlIllIIlI1l;
}
sub IIl1IIl11l1IlI11ll11lI111IIIlI1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $ll1IIII111IIIIlI1ll11llII11IlII = $IIIl1llII111111I1llll1I1IlI1l1I;
    my $IIl1ll1I1lIII1111111l11lIIIl1l1 = $ll1IIII111IIIIlI1ll11llII11IlII . '__get_resv';
    I1I1I1IlIlIII111IllllIIl111I1I1 $IIl1ll1I1lIII1111111l11lIIIl1l1;
    if ($IIl11I1lllI1l11l11l1lI1I1l1III1) {
        $ll1l1lIlIll1I1I1IlllIIIIlIl1II1 = 0;
    }
    if ($ll1l1lIlIll1I1I1IlllIIIIlIl1II1) {
        $I1l1I111I111111Il1II1lllIl1l1ll = $Il1IlIlIIII11lllI111lllI1lI11l1;
        if ($I11IlIllllI1I1lI111IIlIIlIIlIIl) {
            ll1Il1lI1lI11lIlII1I1IIl1I1I1I1 'none', $IIl1ll1I1lIII1111111l11lIIIl1l1, "re-using cached reservation:  $I1l1I111I111111Il1II1lllIl1l1ll", '', '';
        }
    }
    else {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x01');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll != 0) {
            printf "\n";
            printf "Failed to acquire reservation for task $IIl1ll1I1lIII1111111l11lIIIl1l1 \n";
            printf "Exit code was:  $l1II1lI1Il11lIIl1111Il1l11IIlll \n";
            printf "Output was:     $I1l1I111I111111Il1II1lllIl1l1ll \n";
            printf "\n";
            I1I1I1IlIlIII111IllllIIl111I1I1 $ll1IIII111IIIIlI1ll11llII11IlII;
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        if ($I1l1I111I111111Il1II1lllIl1l1ll =~ /^Data length \=/) {
            print "\n";
            print "The version of ipmitool was detected as using older 'Dell' patches that are not \n";
            print "needed, and cause problems.  Please see the README file for instructions on how \n";
            print "to get a good copy of ipmitool.\n";
            print "\n";
            exit 1;
        }
        $ll1l1lIlIll1I1I1IlllIIIIlIl1II1 = 1;
        $Il1IlIlIIII11lllI111lllI1lI11l1 = $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    I1I1I1IlIlIII111IllllIIl111I1I1 $ll1IIII111IIIIlI1ll11llII11IlII;
    return '0x' . I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
}
sub l111lII111IIlIlIl1IlII1IllIlllI {
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $I1llllll1IllllIIl11lI1IIlIllI1I = join(' ', @_);
    my(@llll1lllIIIIlII111II11II11IlIl1) = split(/\s+/, $I1llllll1IllllIIl11lI1IIlIllI1I, 0);
    foreach $_ (@llll1lllIIIIlII111II11II11IlIl1) {
        $_ = I11IllIl11lI1IIl1lIllllI1I1IIll($_);
        if ($_ ne '') {
            if ($_ =~ /^0x/) {
                $_ = hex $_;
            }
            $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf('0x%02x ', $_);
        }
    }
    return I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
}
my $IIIl1Illl1lI1III1lll111l1I11l1l = '0';
sub II1lIIIllIllIll1Ill11lIIl1l1IlI {
    my $IIlII1I1II1l1lIllll1lll1l11I1lI;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $i;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @l1I111IIl11lII1l1I11lllIllIIl1I;
    my $Il1lll1II1lIll11lIlIlI111l1III1;
    my $Ill111l1l1II1ll1lIlIIIlII11III1 = shift @_;
    my $I1IlllI111lIlll1II1ll1IlIIllllI = shift @_;
    my $IIllIlI111IlI1II1lII1lllIlI1l11 = shift @_;
    my $I111II1l11lI1111lIIlIIl1l1Il1I1 = shift @_;
    if (not defined $I111II1l11lI1111lIIlIIl1l1Il1I1) {
        $I111II1l11lI1111lIIlIIl1l1Il1I1 = 1;
    }
    my $lIIIlIlIII1llI1llIlll1l1ll1I1lI = l111lII111IIlIlIl1IlII1IllIlllI($Ill111l1l1II1ll1lIlIIIlII11III1);
    my $IlIIIlllIlllI1I111lIllIlIl1I1l1 = l111lII111IIlIlIl1IlII1IllIlllI($I1IlllI111lIlll1II1ll1IlIIllllI);
    my $llIIlI11Illll1llIl1l11III1IIllI = l111lII111IIlIlIl1IlII1IllIlllI($IIllIlI111IlI1II1lII1lllIlI1l11);
    my $lI1IIlII1lI1ll11IlI1I111llIIlll = l111lII111IIlIlIl1IlII1IllIlllI($I111II1l11lI1111lIIlIIl1l1Il1I1);
    my $ll1IIII111IIIIlI1ll11llII11IlII = IllIl1l1111I1I111IIll1Il1IllI1l();
    my $IIl1ll1I1lIII1111111l11lIIIl1l1 = $ll1IIII111IIIIlI1ll11llII11IlII;
    my $l11Illll11l11llI111I1I111IllllI = '';
    if ($IIIl1Illl1lI1III1lll111l1I11l1l) {
        $l11Illll11l11llI111I1I111IllllI = 'noerr';
    }
    $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
    if ($I111II1l11lI1111lIIlIIl1l1Il1I1 > 0) {
        my @IlI1111I11IlIlI1l11llll111Ill11;
        my @l11l11llII1lIIl1ll1I111I1l1I1I1;
        my $I11IlIIII111I1l11lIlI11l11l1l11 = '';
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x02 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI 0x00 0x00 $lI1IIlII1lI1ll11IlI1I111llIIlll", $l11Illll11l11llI111I1I111IllllI);
        I1I1I1IlIlIII111IllllIIl111I1I1 $IIl1ll1I1lIII1111111l11lIIIl1l1;
        @IlI1111I11IlIlI1l11llll111Ill11 = split(/\s+/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        @l11l11llII1lIIl1ll1I111I1l1I1I1 = @IlI1111I11IlIlI1l11llll111Ill11[4 .. $#IlI1111I11IlIlI1l11llll111Ill11];
        $I11IlIIII111I1l11lIlI11l11l1l11 .= join(' ', @l11l11llII1lIIl1ll1I111I1l1I1I1);
        return $I11IlIIII111I1l11lIlI11l11l1l11;
    }
    else {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x02 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI 0x00 0x00 0x01", $l11Illll11l11llI111I1I111IllllI);
        I1I1I1IlIlIII111IllllIIl111I1I1 $IIl1ll1I1lIII1111111l11lIIIl1l1;
        @l1I111IIl11lII1l1I11lllIllIIl1I = split(/ +/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        $IIlII1I1II1l1lIllll1lll1l11I1lI = hex $l1I111IIl11lII1l1I11lllIllIIl1I[4];
        ++$IIlII1I1II1l1lIllll1lll1l11I1lI;
        if ($IIlII1I1II1l1lIllll1lll1l11I1lI == 1) {
            return '';
        }
        $lI1IIlII1lI1ll11IlI1I111llIIlll = sprintf('0x%02x', $IIlII1I1II1l1lIllll1lll1l11I1lI);
        my $lIl1l11lll111l1ll1lIII11lIIl1lI = $IIlII1I1II1l1lIllll1lll1l11I1lI;
        my $l1II111ll1IllIlI1IlI1I1IIl1llll = $IIll1llllIl11I1IIl11I1Ill11I1II;
        my $I1Il1111IIlIl11llIlIIII1llllIl1 = 0;
        my $l1I1lll1llIl1llIlIIl1llIl1IIl1I;
        my $IlI1lllll1Il11llllllIl1IIII11II;
        my $I1l11111lI111ll1IIll11IIIll11lI;
        my $I11IlIIII111I1l11lIlI11l11l1l11 = '';
        my @IlI1111I11IlIlI1l11llll111Ill11;
        my @l11l11llII1lIIl1ll1I111I1l1I1I1;
        my $Il1l11l11llll1II1lll1lI1lIl11I1 = 16;
        do {
            $IlI1lllll1Il11llllllIl1IIII11II = l111lII111IIlIlIl1IlII1IllIlllI($lIl1l11lll111l1ll1lIII11lIIl1lI);
            $l1I1lll1llIl1llIlIIl1llIl1IIl1I = l111lII111IIlIlIl1IlII1IllIlllI($I1Il1111IIlIl11llIlIIII1llllIl1);
            if ($lIl1l11lll111l1ll1lIII11lIIl1lI <= $Il1l11l11llll1II1lll1lI1lIl11I1) {
                $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x02 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI $l1I1lll1llIl1llIlIIl1llIl1IIl1I 0x00 $IlI1lllll1Il11llllllIl1IIII11II", $l11Illll11l11llI111I1I111IllllI);
                I1I1I1IlIlIII111IllllIIl111I1I1 $IIl1ll1I1lIII1111111l11lIIIl1l1;
                @IlI1111I11IlIlI1l11llll111Ill11 = split(/\s+/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
                @l11l11llII1lIIl1ll1I111I1l1I1I1 = @IlI1111I11IlIlI1l11llll111Ill11[4 .. $#IlI1111I11IlIlI1l11llll111Ill11];
                $I11IlIIII111I1l11lIlI11l11l1l11 .= join(' ', @l11l11llII1lIIl1ll1I111I1l1I1I1);
                $l1II111ll1IllIlI1IlI1I1IIl1llll = $IllI1IlIll111lI11lI1I111lIlllll;
            }
            else {
                $I1l11111lI111ll1IIll11IIIll11lI = '0x10';
                $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x02 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI $l1I1lll1llIl1llIlIIl1llIl1IIl1I 0x00 $I1l11111lI111ll1IIll11IIIll11lI", $l11Illll11l11llI111I1I111IllllI);
                I1I1I1IlIlIII111IllllIIl111I1I1 $IIl1ll1I1lIII1111111l11lIIIl1l1;
                @IlI1111I11IlIlI1l11llll111Ill11 = split(/\s+/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
                @l11l11llII1lIIl1ll1I111I1l1I1I1 = @IlI1111I11IlIlI1l11llll111Ill11[4 .. $#IlI1111I11IlIlI1l11llll111Ill11];
                $I11IlIIII111I1l11lIlI11l11l1l11 .= join(' ', @l11l11llII1lIIl1ll1I111I1l1I1I1);
                $I11IlIIII111I1l11lIlI11l11l1l11 .= ' ';
                $I1Il1111IIlIl11llIlIIII1llllIl1 += $Il1l11l11llll1II1lll1lI1lIl11I1;
                $lIl1l11lll111l1ll1lIII11lIIl1lI -= $Il1l11l11llll1II1lll1lI1lIl11I1;
            }
        } while not $l1II111ll1IllIlI1IlI1I1IIl1llll;
        $I11IlIIII111I1l11lIlI11l11l1l11 = I11IllIl11lI1IIl1lIllllI1I1IIll($I11IlIIII111I1l11lIlI11l11l1l11);
        $I11IlIIII111I1l11lIlI11l11l1l11 = substr($I11IlIIII111I1l11lIlI11l11l1l11, 3);
        $I11IlIIII111I1l11lIlI11l11l1l11 = I11IllIl11lI1IIl1lIllllI1I1IIll($I11IlIIII111I1l11lIlI11l11l1l11);
        return $I11IlIIII111I1l11lIlI11l11l1l11;
    }
}
sub lIl1IIllllIlll1Il1IIII1llI1IIl1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    $IIIl1Illl1lI1III1lll111l1I11l1l = '1';
    $I1l1I111I111111Il1II1lllIl1l1ll = II1lIIIllIllIll1Ill11lIIl1l1IlI(@_);
    $IIIl1Illl1lI1III1lll111l1I11l1l = '0';
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l111II1I1ll11l11lll1lll1llI1111 {
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @l11l1llIlI11ll1Ill1l11l11I1IllI;
    my $i;
    my $I1Il1111IIlIl11llIlIIII1llllIl1;
    my $llIllIII1IlII1l1l11l1I1II1III1l;
    my $Ill111l1l1II1ll1lIlIIIlII11III1 = shift @_;
    my $I1IlllI111lIlll1II1ll1IlIIllllI = shift @_;
    my $IIllIlI111IlI1II1lII1lllIlI1l11 = shift @_;
    my $IIll111IllI1Ill1IIlIl1II11Il1l1 = shift @_;
    my $lIIIlIlIII1llI1llIlll1l1ll1I1lI = l111lII111IIlIlIl1IlII1IllIlllI($Ill111l1l1II1ll1lIlIIIlII11III1);
    my $IlIIIlllIlllI1I111lIllIlIl1I1l1 = l111lII111IIlIlIl1IlII1IllIlllI($I1IlllI111lIlll1II1ll1IlIIllllI);
    my $llIIlI11Illll1llIl1l11III1IIllI = l111lII111IIlIlIl1IlII1IllIlllI($IIllIlI111IlI1II1lII1lllIlI1l11);
    my $lllI1I11IIII11l11I1IlIIlIIIlIIl = l111lII111IIlIlIl1IlII1IllIlllI($IIll111IllI1Ill1IIlIl1II11Il1l1);
    my $l11lIl1lIIIl1lllI11I1IIIIIl1lll = shift @_;
    if ($IIll111IllI1Ill1IIlIl1II11Il1l1 > 4) {
        printf "set_ext_cfg_field_fixed has not been tested on field width > 4.  Halting.\n";
        exit 1;
    }
    @l11l1llIlI11ll1Ill1l11l11I1IllI = split(/\s+/, $l11lIl1lIIIl1lllI11I1IIIIIl1lll, 0);
    if ($IIll111IllI1Ill1IIlIl1II11Il1l1 != $#l11l1llIlI11ll1Ill1l11l11I1IllI + 1) {
        printf "set_ext_cfg_field_fixed:  Got the following data: $l11lIl1lIIIl1lllI11I1IIIIIl1lll\n";
        printf "set_ext_cfg_field_fixed:  the passed in argument, field width (%d), does not match the actual data's field width (%d)\n", $IIll111IllI1Ill1IIlIl1II11Il1l1, $#l11l1llIlI11ll1Ill1l11l11I1IllI + 1;
        printf "Halting.\n";
        exit 1;
    }
    $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
    my $I1lII1Illl1llllIlIll11l1II1II1l = '0x01';
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x03 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI 0x00 0x00 $I1lII1Illl1llllIlIll11l1II1II1l $l11lIl1lIIIl1lllI11I1IIIIIl1lll");
    return 0;
}
sub l11IllIlII1IlI1lIII1I1IIllII1lI {
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $Ill111l1l1II1ll1lIlIIIlII11III1 = shift @_;
    my $I1IlllI111lIlll1II1ll1IlIIllllI = shift @_;
    my $IIllIlI111IlI1II1lII1lllIlI1l11 = shift @_;
    my $lIIIlIlIII1llI1llIlll1l1ll1I1lI = l111lII111IIlIlIl1IlII1IllIlllI($Ill111l1l1II1ll1lIlIIIlII11III1);
    my $IlIIIlllIlllI1I111lIllIlIl1I1l1 = l111lII111IIlIlIl1IlII1IllIlllI($I1IlllI111lIlll1II1ll1IlIIllllI);
    my $llIIlI11Illll1llIl1l11III1IIllI = l111lII111IIlIlIl1IlII1IllIlllI($IIllIlI111IlI1II1lII1lllIlI1l11);
    my $lIl1l1Ill1llIIIIllIIl11l1IIlllI = '';
    foreach $_ (@_) {
        $lIl1l1Ill1llIIIIllIIl11l1IIlllI .= l111lII111IIlIlIl1IlII1IllIlllI($_) . ' ';
    }
    my(@l11lIl1lIIIl1lllI11I1IIIIIl1lll) = split(/\s+/, $lIl1l1Ill1llIIIIllIIl11l1IIlllI, 0);
    my $lIl1l11lll111l1ll1lIII11lIIl1lI = @l11lIl1lIIIl1lllI11I1IIIIIl1lll;
    $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
    my $Il1l11l11llll1II1lll1lI1lIl11I1 = 16;
    my $l1II111ll1IllIlI1IlI1I1IIl1llll = $IIll1llllIl11I1IIl11I1Ill11I1II;
    my $I1Il1111IIlIl11llIlIIII1llllIl1 = 0;
    my $l1I1lll1llIl1llIlIIl1llIl1IIl1I;
    my $IlI1lllll1Il11llllllIl1IIII11II;
    my $IlIl1l1I1I11IIII1IIlIlllIII1111;
    my $l1lIIl1lI1llIIlII1I1I11lIl1lIlI;
    my @ll1lllIl1llIIlIlllll1lll1IIlll1;
    my $I1lII1Illl1llllIlIll11l1II1II1l = '0x00';
    do {
        $IlI1lllll1Il11llllllIl1IIII11II = l111lII111IIlIlIl1IlII1IllIlllI($lIl1l11lll111l1ll1lIII11lIIl1lI);
        $l1I1lll1llIl1llIlIIl1llIl1IIl1I = l111lII111IIlIlIl1IlII1IllIlllI($I1Il1111IIlIl11llIlIIII1llllIl1);
        if ($lIl1l11lll111l1ll1lIII11lIIl1lI <= $Il1l11l11llll1II1lll1lI1lIl11I1) {
            $I1lII1Illl1llllIlIll11l1II1II1l = '0x01';
            $l1lIIl1lI1llIIlII1I1I11lIl1lIlI = join(' ', @l11lIl1lIIIl1lllI11I1IIIIIl1lll);
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x03 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI $l1I1lll1llIl1llIlIIl1llIl1IIl1I 0x00 $I1lII1Illl1llllIlIll11l1II1II1l $l1lIIl1lI1llIIlII1I1I11lIl1lIlI");
            $l1II111ll1IllIlI1IlI1I1IIl1llll = $IllI1IlIll111lI11lI1I111lIlllll;
        }
        else {
            $IlIl1l1I1I11IIII1IIlIlllIII1111 = '0x10';
            @ll1lllIl1llIIlIlllll1lll1IIlll1 = @l11lIl1lIIIl1lllI11I1IIIIIl1lll[0..15];
            $l1lIIl1lI1llIIlII1I1I11lIl1lIlI = join(' ', @ll1lllIl1llIIlIlllll1lll1IIlll1);
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x03 $l1IllIIl1llIIIll111llI1lIlI11II $lIIIlIlIII1llI1llIlll1l1ll1I1lI $IlIIIlllIlllI1I111lIllIlIl1I1l1 $llIIlI11Illll1llIl1l11III1IIllI $l1I1lll1llIl1llIlIIl1llIl1IIl1I 0x00 $I1lII1Illl1llllIlIll11l1II1II1l $l1lIIl1lI1llIIlII1I1I11lIl1lIlI");
            @l11lIl1lIIIl1lllI11I1IIIIIl1lll = @l11lIl1lIIIl1lllI11I1IIIIIl1lll[16 .. $#l11lIl1lIIIl1lllI11I1IIIIIl1lll];
            $I1Il1111IIlIl11llIlIIII1llllIl1 += $Il1l11l11llll1II1lll1lI1lIl11I1;
            $lIl1l11lll111l1ll1lIII11lIIl1lI -= $Il1l11l11llll1II1lll1lI1lIl11I1;
        }
    } while not $l1II111ll1IllIlI1IlI1I1IIl1llll;
    return 0;
}
sub llIII1IIl111lIl1llllI1lII11IlII {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l111I1lll11I1lIIlIIl1I11lIlIIl1('\\(', '\\)', $lIl1II11I1llIIII1I1lIlIllI111I1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1I1lII1I1lllI1111Il11II1I111II('rsp=', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = hex $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
}
my $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 = '';
my $IIlI11l1l1II1IIlIlIII11llIl1IIl = '';
my $ll1lll1l1l11IlII11lIlI1111ll111 = '';
my $I111I1lI1I11III11IIll1IIl11l1ll = '';
my $IIll111lllII1l1111I1IlllIlll1Il = '';
my $l1lllI1IllIlIlI1111l1I11llllIII = 0;
my $I1l1IIlllIIIl1III1Il1l1lI1lI11I = $IllI1IlIll111lI11lI1I111lIlllll;
my(@l1ll1llll11II1Il1lIllIII1Il1lIl) = ();
my $ll11lIl1llII1111IIllllI1IIlIIIl = -1;
my $lIIIIlIll11IIlIlIlI11IlIllIIlIl = '';
my $IlII11l11lIIIll1IIll111lllIll1l = 0;
my $III1lllI1IlIIl111lII1llIIIIIll1 = 1;
my $lll1I1lIIl11I1l1I1IIII1ll1I1111 = '/opt/dell/pec/';
my @IllIlI11lllIIlIllIll1IIlIIl1IIl;
my @Ill11II1l1II11IlIlIll1l11l11l11;
my @I1I1II11ll1lI1lI1ll1111Il1l1ll1;
my @llIlII11I111I11lIII1l1lIl1lIlll;
my $ll11llII1ll1I1Ill1lI1l1llI111ll = 0;
my $ll11lllII1lIllIlI1II1IIlIIl111l = './pec-logs.sh';
sub l11II11111I11II1II1Ill11l1Il11l {
    printf "Command is not implemented for platform $IllII1l1IIIIlI1ll1IIlI1IIll1ll1\n";
}
sub I1llI1llIIIIIII11l1ll1l1lIllIlI {
    printf "Command is not applicable for platform $IllII1l1IIIIlI1ll1IIlI1IIll1ll1\n";
}
sub Il11III111lI111IIlllllllIIll1I1 {
    printf "Invalid command / syntax.\n";
    exit 6;
}
sub IlIll1III1IIII1l11I1IlllllI1I1l {
    my $IIlIl11I1l1111l1ll1lIlIlIlI11l1 = shift @_;
    my $l111l1I1lI1lIIIl1Il1l1llllIIlIl = shift @_;
    my $lI1ll1llIIlIIlI1IIll111IIll111I = shift @_;
    my $lIIll1IIII111llll11IlI11I1l1I1I;
    if (defined $lI1ll1llIIlIIlI1IIll111IIll111I) {
        my(@llll1lIllIIlIl1IIII11l1IllI11I1) = split(/,/, $lI1ll1llIIlIIlI1IIll111IIll111I, 0);
        foreach my $lll1IIl1111Illl11l1lIIllllI1lIl (@llll1lIllIIlIl1IIII11l1IllI11I1) {
            $lIIll1IIII111llll11IlI11I1l1I1I = $ENV{$lll1IIl1111Illl11l1lIIllllI1lIl};
            if (defined $lIIll1IIII111llll11IlI11I1l1I1I and -e $lIIll1IIII111llll11IlI11I1l1I1I) {
                return $lIIll1IIII111llll11IlI11I1l1I1I;
            }
        }
    }
    $lIIll1IIII111llll11IlI11I1l1I1I = $l111l1I1lI1lIIIl1Il1l1llllIIlIl;
    if (-e $lIIll1IIII111llll11IlI11I1l1I1I) {
        return $lIIll1IIII111llll11IlI11I1l1I1I;
    }
    $lIIll1IIII111llll11IlI11I1l1I1I = '/opt/dell/pec/' . $l111l1I1lI1lIIIl1Il1l1llllIIlIl;
    if (-e $lIIll1IIII111llll11IlI11I1l1I1I) {
        return $lIIll1IIII111llll11IlI11I1l1I1I;
    }
    $lIIll1IIII111llll11IlI11I1l1I1I = '/usr/sbin/' . lc($IIlIl11I1l1111l1ll1lIlIlIlI11l1);
    if (-e $lIIll1IIII111llll11IlI11I1l1I1I) {
        return $lIIll1IIII111llll11IlI11I1l1I1I;
    }
    printf "\n";
    printf qq[Error:  "$IIlIl11I1l1111l1ll1lIlIlIlI11l1" is required, but could not be found.\n];
    printf "  I looked for it in:  $l111l1I1lI1lIIIl1Il1l1llllIIlIl\n";
    if (defined $lI1ll1llIIlIIlI1IIll111IIll111I) {
        printf "  I also searched env variables in this list: $lI1ll1llIIlIIlI1IIll111IIll111I\n";
    }
    printf "  Halting; could not find it.\n\n";
    exit 1;
}
sub I1I1lIl1Il1Il11Il1llIllI1lllII1 {
    return $llI1llI11III1Illl1lIIlII1II1I11;
}
sub llIlllIIlIIll11IllIII1ll11l11II {
    my($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('-V');
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    my(@l11IlI11llII1l111l1IIlIIl1lI1I1) = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
    $I1l1I111I111111Il1II1lllIl1l1ll = $l11IlI11llII1l111l1IIlIIl1lI1I1[2];
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llIII1lIl1llI111Il1ll1I1IlllIIl {
    my $I1llllll1IllllIIl11lI1IIlIllI1I = shift @_ || '';
    my $I1l1I111I111111Il1II1lllIl1l1ll = $ll1lll1l1l11IlII11lIlI1111ll111;
    if ($I1llllll1IllllIIl11lI1IIlIllI1I eq 'terse') {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'unknown') {
        $I1l1I111I111111Il1II1lllIl1l1ll = $I1l1I111I111111Il1II1lllIl1l1ll . " ($I111I1lI1I11III11IIll1IIl11l1ll)";
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l1IlI1I111lI1lI1IlIl1lIII11l1II {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1111ll1lIIlI1IlI1l111lIII1lIl1 = shift @_;
    $I1l1I111I111111Il1II1lllIl1l1ll = `ping -c1 $l1111ll1lIIlI1IlI1l111lIII1lIl1`;
    $l1II1lI1Il11lIIl1111Il1l11IIlll = $?;
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        return 1;
    }
    return 0;
}
sub lll1IlllIIlll1I1ll1l11llll111Il {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1I1111I1IIl1lIIIIIIl11IlIIlllI = shift @_ || 'quiet';
    if ($I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        if ($l1I1111I1IIl1lIIIIIIl11IlIIlllI eq 'loud') {
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('mc info', 'debug');
        }
        else {
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('mc info', 'nooutput');
        }
    }
    else {
        if ($l1I1111I1IIl1lIIIIIIl11IlIIlllI eq 'loud') {
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('channel authcap 1 1', 'debug');
        }
        else {
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('channel authcap 1 1', 'nooutput');
        }
    }
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        return 1;
    }
    return 0;
}
sub I11I111l1I11lII111lIll1IlI1III1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_fcb_version';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x34 0x16');
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x34 0x75');
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x34', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll != 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = llII1llIl1IlIlII1llI1IlllIllll1($I1l1I111I111111Il1II1lllIl1l1ll);
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x12', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll != 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
            $I1l1I111I111111Il1II1lllIl1l1ll = sprintf('%s %s', $IllI11I11ll11Ill111IlIlI111IIlI[3], $IllI11I11ll11Ill111IlIlI111IIlI[4]);
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1II1111lI11l11l1II1ll1IlI1IIll {
    my $I1l1I111I111111Il1II1lllIl1l1ll = I11I111l1I11lII111lIll1IlI1III1();
    if (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if (l111I1IlIlII11ll11IIlllIl11Illl $I1l1I111I111111Il1II1lllIl1l1ll) {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    if ($I1l1I111I111111Il1II1lllIl1l1ll eq '00 00') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my(@l1I1Illl1l1Il11lII1l11Il1lllI1I) = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        my $II1lIlI111llI111lll1lllIIllI1II = $l1I1Illl1l1Il11lII1l11Il1lllI1I[0] . '.' . $l1I1Illl1l1Il11lII1l11Il1lllI1I[1];
        $II1lIlI111llI111lll1lllIIllI1II =~ s/^0*(.)/$1/;
        return $II1lIlI111llI111lll1lllIIllI1II;
    }
}
sub IIIIIIIIIIIII1III111IlIII1lllI1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_pic_version';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x34 0x70');
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIl11II1IIIlIIlI1II1lII1IllI1l1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = IIIIIIIIIIIII1III111IlIII1lllI1();
    my $l111llIII1llII1II1llIIIlI1II1lI = 'UNKNOWN';
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if (l111I1IlIlII11ll11IIlllIl11Illl $I1l1I111I111111Il1II1lllIl1l1ll) {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        if ($I1l1I111I111111Il1II1lllIl1l1ll eq '10') {
            $l111llIII1llII1II1llIIIlI1II1lI = 'PIC16';
        }
        elsif ($I1l1I111I111111Il1II1lllIl1l1ll eq '12') {
            $l111llIII1llII1II1llIIIlI1II1lI = 'PIC18';
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        if ($I1l1I111I111111Il1II1lllIl1l1ll eq '01 18') {
            $l111llIII1llII1II1llIIIlI1II1lI = 'PIC18';
        }
    }
    return $l111llIII1llII1II1llIIIlI1II1lI;
}
sub l1IlII1I11IIlIl11lIl11llI1lllII {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll = 0;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $IIII1IIllllIll1Il1l11I111IIlIlI;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bios_version';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x06 0x59 0x00 0xc0 0x00 0x00');
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x1E');
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        if ($IIlI11l1l1II1IIlIlIII11llIl1IIl eq '') {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x1E');
        }
        if ($IIlI11l1l1II1IIlIlIII11llIl1IIl eq 'IPV6') {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x4b');
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            @IllI11I11ll11Ill111IlIlI111IIlI = split(/00/, $I1l1I111I111111Il1II1lllIl1l1ll, 0);
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($IllI11I11ll11Ill111IlIlI111IIlI[0]);
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x06 0x59 0x00 0x01 0x00 0x00');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        shift @IllI11I11ll11Ill111IlIlI111IIlI;
        shift @IllI11I11ll11Ill111IlIlI111IIlI;
        shift @IllI11I11ll11Ill111IlIlI111IIlI;
        shift @IllI11I11ll11Ill111IlIlI111IIlI;
        $I1l1I111I111111Il1II1lllIl1l1ll = join(' ', @IllI11I11ll11Ill111IlIlI111IIlI);
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100') {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x30', 'noerr');
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x06 0x59 0x00 0x01 0x00 0x00');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        shift @IllI11I11ll11Ill111IlIlI111IIlI;
        shift @IllI11I11ll11Ill111IlIlI111IIlI;
        my $i = 0;
        $IIII1IIllllIll1Il1l11I111IIlIlI = shift @IllI11I11ll11Ill111IlIlI111IIlI;
        while ($IIII1IIllllIll1Il1l11I111IIlIlI eq '00') {
            ++$i;
            $IIII1IIllllIll1Il1l11I111IIlIlI = shift @IllI11I11ll11Ill111IlIlI111IIlI;
            if ($i > 10) {
                last;
            }
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = join(' ', @IllI11I11ll11Ill111IlIlI111IIlI);
    }
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l11IlI11lIlllIlIlllIIIlllII1IlI {
    my($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = l1IlII1I11IIlIl11lIl11llI1lllII();
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll != 0) {
        $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        if ($I1l1I111I111111Il1II1lllIl1l1ll eq '11 00 00 00') {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        my(@lIl1llIl1IlllllI1lI1I1l1IIlIIll) = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        my $I1lII1l111l1llI11IIII1l111III1I = $lIl1llIl1IlllllI1lI1I1l1IIlIIll[2] . '.' . $lIl1llIl1IlllllI1lI1I1l1IIlIIll[3];
        $I1lII1l111l1llI11IIII1l111III1I =~ s/^0*(.)/$1/;
        $I1l1I111I111111Il1II1lllIl1l1ll = $I1lII1l111l1llI11IIII1l111III1I;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100') {
        my(@lIl1llIl1IlllllI1lI1I1l1IIlIIll) = split(/00/, $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        $I1l1I111I111111Il1II1lllIl1l1ll = llll11IIIlI11lI1Il1I11I1lII11lI($lIl1llIl1IlllllI1lI1I1l1IIlIIll[0]);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IlIlIIIll11I11lIll1lIlIII11l11l {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my(@IlI1111I11IlIlI1l11llll111Ill11) = split(' ', $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    my $l11IlI11llII1l111l1IIlIIl1lI1I1 = $IlI1111I11IlIlI1l11llll111Ill11[2];
    my $lII1lII11IIIlIlIIIlIIIIlIIl1ll1 = substr($IlI1111I11IlIlI1l11llll111Ill11[3], 0, 1);
    my $IIIll11IlII11l1ll1Illl1l1II1lII = substr($IlI1111I11IlIlI1l11llll111Ill11[3], 1, 1);
    my $d = $IlI1111I11IlIlI1l11llll111Ill11[12] . substr($IlI1111I11IlIlI1l11llll111Ill11[13], 0, 1);
    my $I1I11I1111l11I11II1I1IIII11l1l1 = substr($IlI1111I11IlIlI1l11llll111Ill11[13], 1, 1);
    my $lI11IIllIllII11l11IIl11Ill1llI1 = substr($IlI1111I11IlIlI1l11llll111Ill11[14], 1, 1);
    $I1l1I111I111111Il1II1lllIl1l1ll = $l11IlI11llII1l111l1IIlIIl1lI1I1 . '.0' . $lII1lII11IIIlIlIIIlIIIIlIIl1ll1 . '.0' . $IIIll11IlII11l1ll1Illl1l1II1lII . '.' . $d . '.' . $I1I11I1111l11I11II1I1IIII11l1l1;
    if ($lI11IIllIllII11l11IIl11Ill1llI1 eq '0') {
        $I1l1I111I111111Il1II1lllIl1l1ll .= ' (recovery)';
    }
    else {
        $I1l1I111I111111Il1II1lllIl1l1ll .= " (bank $lI11IIllIllII11l11IIl11Ill1llI1)";
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IllIII1I1ll11III1IIIIlIIIlIllI1 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_intel_me_version';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        $I1l1I111I111111Il1II1lllIl1l1ll = Illll1ll1IIII1ll1I11IllI1I1lI1I();
        if (l11lI1I111I1I11IIl1IIl1llI111II() eq 'on') {
            I1I1I1IlIlIII111IllllIIl111I1I1 'sense_intel_me_version';
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = I1llI1llIIII1II1llI1lI1lIIl111I('-b 6 -t 0x2c raw 06 01', 'noerr');
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
                $I1l1I111I111111Il1II1lllIl1l1ll = IlIlIIIll11I11lIll1lIlIII11l11l($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            }
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = Illll1ll1IIII1ll1I11IllI1I1lI1I();
        if (l11lI1I111I1I11IIl1IIl1llI111II() eq 'on') {
            I1I1I1IlIlIII111IllllIIl111I1I1 'enable_local_message_channel_for_bridged_commands';
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x06 0x32 0x00 0x01', 'noerr');
            I1I1I1IlIlIII111IllllIIl111I1I1 'sense_intel_me_version';
            ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = IlI1I1Ill1Ill1lI1l11lll1111lIII('-b 0 -t 0x2c raw 06 01', 'nocallout');
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
                $I1l1I111I111111Il1II1lllIl1l1ll = IlIlIIIll11I11lIll1lIlIII11l11l($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            }
            else {
                my $Il11lI111lll1lIlll1I1lIIlIllIll = llIII1IIl111lIl1llllI1lII11IlII($l11lIIl111IIIIl1l1Il1l1lI1ll111);
                if ($Il11lI111lll1lIlll1I1lIIlIllIll eq 213) {
                    I1I1I1IlIlIII111IllllIIl111I1I1 'turn_on_intel_me';
                    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0xe3 0x00');
                    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_intel_me_version';
                    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = IlI1I1Ill1Ill1lI1l11lll1111lIII('-b 0 -t 0x2c raw 06 01', 'nocallout');
                    $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
                    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
                        $I1l1I111I111111Il1II1lllIl1l1ll = IlIlIIIll11I11lIll1lIlIII11l11l($l11lIIl111IIIIl1l1Il1l1lI1ll111);
                    }
                }
            }
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lII11IllllI1llIl1lIlIlI111I1II1 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_is_intel_me_off';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = IlI1I1Ill1Ill1lI1l11lll1111lIII('-b 0 -t 0x2c raw 06 01', 'nocallout');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            return 0;
        }
        else {
            my $Il11lI111lll1lIlll1I1lIIlIllIll = llIII1IIl111lIl1llllI1lII11IlII($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            if ($Il11lI111lll1lIlll1I1lIIlIllIll eq 213) {
                return 1;
            }
            return 2;
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIlIII1lI1l11IlI1llI1I11II11I1I {
    my $I1II1lll1111lI11IIIl1IlI1lII1I1 = shift @_;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lI11lIlII1I1IlIII11l1II11IllIII;
    my $Il11lI111lll1lIlll1I1lIIlIllIll = 0;
    I1I1I1IlIlIII111IllllIIl111I1I1 'read_bmc_sensor_' . $I1II1lll1111lI11IIIl1IlI1lII1I1;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = sprintf('raw 0x04 0x2d 0x%02x', $I1II1lll1111lI11IIIl1IlI1lII1I1);
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = I1llI1llIIII1II1llI1lI1lIIl111I($l11lIIl111IIIIl1l1Il1l1lI1ll111, 'nocallout');
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll ne '0') {
        $lI11lIlII1I1IlIII11l1II11IllIII = lI11llIl1IIIlI1I1I1lI1I1IIIll1l();
        $lI11lIlII1I1IlIII11l1II11IllIII = $I1l1I111I111111Il1II1lllIl1l1ll =~ /rsp=(.+)\)/;
        $Il11lI111lll1lIlll1I1lIIlIllIll = hex $1;
        if ($Il11lI111lll1lIlll1I1lIIlIllIll == 203) {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll1ll1IIII1ll1I11IllI1I1lI1I();
        }
    }
    else {
        my(@l1I1Illl1l1Il11lII1l11Il1lllI1I) = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        $I1l1I111I111111Il1II1lllIl1l1ll = $l1I1Illl1l1Il11lII1l11Il1lllI1I[0];
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub ll11lI1lIII1Il1l1I1I1l1Il11IIII {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @I111111l1l1ll1lIlIII1l1lllll1I1;
    my $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    I1I1I1IlIlIII111IllllIIl111I1I1 'read_power_draw_Intel_ME';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0xe2 0x00 0x00 0x00', 'noerr');
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        @I111111l1l1ll1lIlIII1l1lllll1I1 = split(' ', $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        $I1l1I111I111111Il1II1lllIl1l1ll = $I111111l1l1ll1lIlIII1l1lllll1I1[2] . $I111111l1l1ll1lIlIII1l1lllll1I1[1];
        $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11111lI1lIl111lIII1I11Ill111ll {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @I111111l1l1ll1lIlIII1l1lllll1I1;
    my $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    I1I1I1IlIlIII111IllllIIl111I1I1 'read_power_draw_DCMI';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x2c 0x02 0xdc 0x01 0x00 0x00', 'noerr');
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        @I111111l1l1ll1lIlIII1l1lllll1I1 = split(' ', $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        $I1l1I111I111111Il1II1lllIl1l1ll = $I111111l1l1ll1lIlIII1l1lllll1I1[2] . $I111111l1l1ll1lIlIII1l1lllll1I1[1];
        $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lI111llIII1I1lI1I11lIIIlIl1llIl {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl11l111lIIlII1111ll111ll1I1Il();
    if (II1l11l111l1ll1l1l1IllIl1I1I1ll $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
        return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    }
    $I1l1I111I111111Il1II1lllIl1l1ll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($l11lIIl111IIIIl1l1Il1l1lI1ll111, 6, 7);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11llI111lIlIl1Il1I11I11llIl1ll {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    my $i;
    my $Il11l1lI1lI1IIlIlI1IIl1IIl1lI1l = 0;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl11l111lIIlII1111ll111ll1I1Il();
    if (II1l11l111l1ll1l1l1IllIl1I1I1ll $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
        return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    }
    for ($i = 0; $i < 8; ++$i) {
        $I1l1I111I111111Il1II1lllIl1l1ll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($l11lIIl111IIIIl1l1Il1l1lI1ll111, 12 + $i * 2, 13 + $i * 2);
        $Il11l1lI1lI1IIlIlI1IIl1IIl1lI1l += $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $Il11l1lI1lI1IIlIlI1IIl1IIl1lI1l;
}
sub l1I11lllII1lIl1I1Il1I11I111l111 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $IlIIl1111l1II1I111Il11I111lI11I;
    my $II1llII1II1III1IIl1II1l1IIIll1l;
    my $IIlllIl1Il1ll1lI1I11I11I11IlllI;
    my $I1I11lll11lIlI11l1lllIl11l1l1I1 = 0;
    while (1) {
        ($IlIIl1111l1II1I111Il11I111lI11I, $II1llII1II1III1IIl1II1l1IIIll1l) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x59 0x01');
        if ($IlIIl1111l1II1I111Il11I111lI11I == 0) {
            last;
        }
    }
    sleep 1;
    while (1) {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = I1llI1llIIII1II1llI1lI1lIIl111I('-t 0x68 raw 0x36 0x04', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            last;
        }
        sleep 1;
    }
    while (1) {
        ($IlIIl1111l1II1I111Il11I111lI11I, $II1llII1II1III1IIl1II1l1IIIll1l) = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x59 0x00');
        if ($IlIIl1111l1II1I111Il11I111lI11I == 0) {
            last;
        }
    }
    my(@IllI11I11ll11Ill111IlIlI111IIlI) = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
    $IIlllIl1Il1ll1lI1I11I11I11IlllI = hex $IllI11I11ll11Ill111IlIlI111IIlI[21];
    $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex $IllI11I11ll11Ill111IlIlI111IIlI[22];
    $IIlllIl1Il1ll1lI1I11I11I11IlllI *= 6;
    return $IIlllIl1Il1ll1lI1I11I11I11IlllI;
}
sub II1I11IlIl1Il1IIlll11lll1111lII {
    my $II1l1II111lII1llll1llIllllI111I = 'bmc';
    my $I111I11Illl1II1l1lll1l11IlI1I11 = shift @_;
    my $IIlllIl1Il1ll1lI1I11I11I11IlllI = 0;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @I111111l1l1ll1lIlIII1l1lllll1I1;
    if (defined $I111I11Illl1II1l1lll1l11IlI1I11) {
        if ($I111I11Illl1II1l1lll1l11IlI1I11 eq 'nm') {
            $II1l1II111lII1llll1llIllllI111I = 'nm';
        }
    }
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125') {
        $I1l1I111I111111Il1II1lllIl1l1ll = Illll1ll1IIII1ll1I11IllI1I1lI1I();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = ll11lI1lIII1Il1l1I1I1l1Il11IIII();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I11111lI1lIl111lIII1I11Ill111ll();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I11111lI1lIl111lIII1I11Ill111ll();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = lI111llIII1I1lI1I11lIIIlIl1llIl();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I11111lI1lIl111lIII1I11Ill111ll();
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lll1II1I1II1l11I11IlIlII1IlllI1 {
    my $lI11II1ll1l1lIllIIl1llI11I11IlI = shift @_;
    my $IllII1lIll1l1II1I11IllIllllllI1 = shift @_;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1II1l1I1IIIIlI1II1l11IlI1IlIII = '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lIl11Ill111l11l1lIl1IlIllllll1I = sprintf('0x%02x', $lI11II1ll1l1lIllIIl1llI11I11IlI);
    my $ll1111I111IllII1lII1Ill1lI1I1l1 = sprintf('0x%02x', $IllII1lIll1l1II1I11IllIllllllI1);
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = I1llI1llIIII1II1llI1lI1lIIl111I("-t0x2c -b 0x00 raw 0x2e 0xc2 0x57 0x01 0x00 $lIl11Ill111l11l1lIl1IlIllllll1I $ll1111I111IllII1lII1Ill1lI1I1l1", 'noerr');
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        $I1II1l1I1IIIIlI1II1l11IlI1IlIII = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($l11lIIl111IIIIl1l1Il1l1lI1ll111, 6, 7);
    }
    return $I1II1l1I1IIIIlI1II1l11IlI1IlIII;
}
sub l1111IllIIl1l1IIll1IIl111II111l {
    my $II1l1II111lII1llll1llIllllI111I = 'bmc';
    my $I111I11Illl1II1l1lll1l11IlI1I11 = shift @_;
    my $IIlllIl1Il1ll1lI1I11I11I11IlllI = 0;
    if (defined $I111I11Illl1II1l1lll1l11IlI1I11) {
        if ($I111I11Illl1II1l1lll1l11IlI1I11 eq 'nm') {
            $II1l1II111lII1llll1llIllllI111I = 'nm';
        }
    }
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100') {
        $I1l1I111I111111Il1II1lllIl1l1ll = II1I11IlIl1Il1IIlll11lll1111lII();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = II1I11IlIl1Il1IIlll11lll1111lII();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex IIlIII1lI1l11IlI1llI1I11II11I1I(163);
        $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex IIlIII1lI1l11IlI1llI1I11II11I1I(164);
        $I1l1I111I111111Il1II1lllIl1l1ll = 12 * $IIlllIl1Il1ll1lI1I11I11I11IlllI;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex IIlIII1lI1l11IlI1llI1I11II11I1I(112);
        $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex IIlIII1lI1l11IlI1llI1I11II11I1I(113);
        $I1l1I111I111111Il1II1lllIl1l1ll = 12 * $IIlllIl1Il1ll1lI1I11I11I11IlllI;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex IIlIII1lI1l11IlI1llI1I11II11I1I(163);
        $IIlllIl1Il1ll1lI1I11I11I11IlllI += hex IIlIII1lI1l11IlI1llI1I11II11I1I(164);
        $I1l1I111I111111Il1II1lllIl1l1ll = 12 * $IIlllIl1Il1ll1lI1I11I11I11IlllI;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1I11lllII1lIl1I1Il1I11I111l111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I11llI111lIlIl1Il1I11I11llIl1ll();
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub Illl1I1IlIllll1I1III1IlI1111l11 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $III1IllllllII11IIIl1l11II1II1Il;
    my $l1IlIll111IIII11lIIII1l11IIIIIl = '';
    my $II1I1lIIlI1l1llll11l1l1II1lI11I = '';
    my $IllI1l1IIIlI1II1lIllll111IlllIl = '';
    I1I1I1IlIlIII111IllllIIl111I1I1 'DCMI_get_power_limit';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x2c 0x03 0xdc 0x00 0x00', 'nocallout');
    $III1IllllllII11IIIl1l11II1II1Il = I11IllIl11lI1IIl1lIllllI1I1IIll($III1IllllllII11IIIl1l11II1II1Il);
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        $l1IlIll111IIII11lIIII1l11IIIIIl = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 3, 3);
        $II1I1lIIlI1l1llll11l1l1II1lI11I = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 4, 5);
        $IllI1l1IIIlI1II1lIllll111IlllIl = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 6, 9);
        if ($II1I1lIIlI1l1llll11l1l1II1lI11I > 2000) {
            print "power limit is way too big ( $II1I1lIIlI1l1llll11l1l1II1lI11I ) \n";
            print "DCMI Get Power Limit raw output: \n";
            print "$III1IllllllII11IIIl1l11II1II1Il\n\n";
        }
    }
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1IlIll111IIII11lIIII1l11IIIIIl, $II1I1lIIlI1l1llll11l1l1II1lI11I, $IllI1l1IIIlI1II1lIllll111IlllIl;
}
sub lIl11IlIl1I1llI1II11l1lll1lI1l1 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $III1IllllllII11IIIl1l11II1II1Il;
    my $l1lll1l111I11l1Il1lIl1Ill1II111 = '';
    my $l1l1ll1III11IIlI11IIlI1I11lIll1 = '';
    my $I1lI11llIIIIIIlIIlIllIlII1IIlII = '';
    my $l1IllllI1lll1lllI1II1I111ll1III = '';
    my $IIIl111ll11lllIl1l1lI11II111lll = '';
    my $lIIlIll11lIII11l1llllII1I1l1I1l = '';
    I1I1I1IlIlIII111IllllIIl111I1I1 'SCBMC_get_chassis_enclosure_power_capping';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x18', 'nocallout');
    $III1IllllllII11IIIl1l11II1II1Il = I11IllIl11lI1IIl1lIllllI1I1IIll($III1IllllllII11IIIl1l11II1II1Il);
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        $l1lll1l111I11l1Il1lIl1Ill1II111 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 0, 0);
        $l1l1ll1III11IIlI11IIlI1I11lIll1 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 1, 2);
        $I1lI11llIIIIIIlIIlIllIlII1IIlII = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 3, 3);
        $l1IllllI1lll1lllI1II1I111ll1III = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 4, 4);
        $IIIl111ll11lllIl1l1lI11II111lll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 7, 7);
        $lIIlIll11lIII11l1llllII1I1l1I1l = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 8, 8);
    }
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1lll1l111I11l1Il1lIl1Ill1II111, $l1l1ll1III11IIlI11IIlI1I11lIll1, $I1lI11llIIIIIIlIIlIllIlII1IIlII, $l1IllllI1lll1lllI1II1I111ll1III, $IIIl111ll11lllIl1l1lI11II111lll, $lIIlIll11lIII11l1llllII1I1l1I1l;
}
sub lllllIIl1lIlll1lI1I11III1lIlll1 {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $III1IllllllII11IIIl1l11II1II1Il;
    my $lll111llIlI11Ill11l1I1IIIlI1lI1 = '';
    my $IlII1l1I1lI11I1I1I1l1Il1lI1ll11 = '';
    my $IlIIIlll11I11Ill1lIII111lIlIIll = '';
    my $IlI111111l1lII1III111llll11I11l = '';
    my $l11IIlII11I1ll1IIlIlIlIII1l1I1I = 65535;
    my $lII1IllI1IIIl1llII1I1l1lllIl1I1 = 65535;
    my $I111llI1llll1IIl1llIlll1l1l1l1I = 65535;
    my $l1lIl11l111111l1lIlI1IIIl1111ll = 65535;
    my $IIlI1lIl1lI1ll1l1111IlIl1IIII11 = 65535;
    my $IlII111llI11l111I1Il1IlIllI1IIl = 65535;
    my $I1Il1lIIlIlll1I1Il1lII1I1lllIII = 65535;
    my $lI1l111IlIl1111llIl11lIIl1IIlI1 = 65535;
    I1I1I1IlIlIII111IllllIIl111I1I1 'SCBMC_get_psu_info';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x1F', 'nocallout');
    $III1IllllllII11IIIl1l11II1II1Il = I11IllIl11lI1IIl1lIllllI1I1IIll($III1IllllllII11IIIl1l11II1II1Il);
    $III1IllllllII11IIIl1l11II1II1Il = lII1l1IlIl1l1I1Il1lI1lIlI1lllIl($III1IllllllII11IIIl1l11II1II1Il, "\n", '');
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        $lll111llIlI11Ill11l1I1IIIlI1lI1 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 3, 3);
        $IlII1l1I1lI11I1I1I1l1Il1lI1ll11 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 4, 4);
        $IlIIIlll11I11Ill1lIII111lIlIIll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 5, 5);
        $IlI111111l1lII1III111llll11I11l = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 6, 6);
        $l11IIlII11I1ll1IIlIlIlIII1l1I1I = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 7, 8);
        $lII1IllI1IIIl1llII1I1l1lllIl1I1 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 9, 10);
        $I111llI1llll1IIl1llIlll1l1l1l1I = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 11, 12);
        $l1lIl11l111111l1lIlI1IIIl1111ll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 13, 14);
        $IIlI1lIl1lI1ll1l1111IlIl1IIII11 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 15, 16);
        $IlII111llI11l111I1Il1IlIllI1IIl = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 17, 18);
        $I1Il1lIIlIlll1I1Il1lII1I1lllIII = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 19, 20);
        $lI1l111IlIl1111llIl11lIIl1IIlI1 = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($III1IllllllII11IIIl1l11II1II1Il, 21, 22);
    }
    my $I1I1lI11lII1l1l1l1I1lI1I1lIllII = 0;
    my $I1Il1l1IlIl1I1I1I111II111IlI111 = '';
    if ($l11IIlII11I1ll1IIlIlIlIII1l1I1I != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$l11IIlII11I1ll1IIlIlIlIII1l1I1I, ";
    }
    if ($lII1IllI1IIIl1llII1I1l1lllIl1I1 != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$lII1IllI1IIIl1llII1I1l1lllIl1I1, ";
    }
    if ($I111llI1llll1IIl1llIlll1l1l1l1I != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$I111llI1llll1IIl1llIlll1l1l1l1I, ";
    }
    if ($l1lIl11l111111l1lIlI1IIIl1111ll != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$l1lIl11l111111l1lIlI1IIIl1111ll, ";
    }
    if ($IIlI1lIl1lI1ll1l1111IlIl1IIII11 != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$IIlI1lIl1lI1ll1l1111IlIl1IIII11, ";
    }
    if ($IlII111llI11l111I1Il1IlIllI1IIl != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$IlII111llI11l111I1Il1IlIllI1IIl, ";
    }
    if ($I1Il1lIIlIlll1I1Il1lII1I1lllIII != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$I1Il1lIIlIlll1I1Il1lII1I1lllIII, ";
    }
    if ($lI1l111IlIl1111llIl11lIIl1IIlI1 != 65535) {
        ++$I1I1lI11lII1l1l1l1I1lI1I1lIllII;
        $I1Il1l1IlIl1I1I1I111II111IlI111 .= "$lI1l111IlIl1111llIl11lIIl1IIlI1, ";
    }
    if ($I1I1lI11lII1l1l1l1I1lI1I1lIllII > 0) {
        $I1Il1l1IlIl1I1I1I111II111IlI111 = substr($I1Il1l1IlIl1I1I1I111II111IlI111, 0, -2);
    }
    return $l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111;
}
sub lllII1l111IllI11I11IllIl1l1111I {
    my $llIllIII1IlII1l1l11l1I1II1III1l = shift @_ || 0;
    my $IIlI11lIll1l11l11IIl1I1III111Il;
    my $lllIlIIIlIIllIIl11Il11I11I111lI = 0;
    my $I1I11l11l1lI1ll11l1ll1IIlI1l111 = '';
    $IIlI11lIll1l11l11IIl1I1III111Il = $llIllIII1IlII1l1l11l1I1II1III1l & 1;
    if ($IIlI11lIll1l11l11IIl1I1III111Il) {
        $lllIlIIIlIIllIIl11Il11I11I111lI = $llIllIII1IlII1l1l11l1I1II1III1l & 15;
        if ($lllIlIIIlIIllIIl11Il11I11I111lI == 0) {
            $I1I11l11l1lI1ll11l1ll1IIlI1l111 = 'PSU vendor mismatch';
        }
        elsif ($lllIlIIIlIIllIIl11Il11I11I111lI == 1) {
            $I1I11l11l1lI1ll11l1ll1IIlI1l111 = 'PSU revision/fw version mismatch';
        }
        elsif ($lllIlIIIlIIllIIl11Il11I11I111lI == 2) {
            $I1I11l11l1lI1ll11l1ll1IIlI1l111 = '(reserved)';
        }
        elsif ($lllIlIIIlIIllIIl11Il11I11I111lI == 3) {
            $I1I11l11l1lI1ll11l1ll1IIlI1l111 = 'PSU rating mismatch';
        }
        elsif ($lllIlIIIlIIllIIl11Il11I11I111lI == 4) {
            $I1I11l11l1lI1ll11l1ll1IIlI1l111 = 'Voltage rating mismatch';
        }
        else {
            $I1I11l11l1lI1ll11l1ll1IIlI1l111 = 'UNKNOWN';
        }
    }
    return $IIlI11lIll1l11l11IIl1I1III111Il, $lllIlIIIlIIllIIl11Il11I11I111lI, $I1I11l11l1lI1ll11l1ll1IIlI1l111;
}
sub IIlIIlII1IIIlll1l11l1l1IlI1I11l {
    my $llIllIII1IlII1l1l11l1I1II1III1l = shift @_ || 0;
    my $lI1IlI1II1Il1IIIlIl1Il11llll1II = '';
    my $IIII1IIllllIll1Il1l11I111IIlIlI = 0;
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 1) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'fully redundant   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 2) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'redundancy lost   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 4) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'redundancy degraded   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 8) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'non-redundant but sufficient   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 16) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'reserved   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 32) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'non-redundant and insufficient   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 64) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'reserved   ';
    }
    if ($llIllIII1IlII1l1l11l1I1II1III1l & 128) {
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
        $lI1IlI1II1Il1IIIlIl1Il11llll1II .= 'reserved   ';
    }
    return $lI1IlI1II1Il1IIIlIl1Il11llll1II;
}
sub II11IlII1I1I1llIlIIIlIIIll11I1l {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl11l111lIIlII1111ll111ll1I1Il();
        if (II1l11l111l1ll1l1l1IllIl1I1I1ll $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
            return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($l11lIIl111IIIIl1l1Il1l1lI1ll111, 10);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIlI1Ill111lllIlIllI11ll1I1IlIl {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl11l111lIIlII1111ll111ll1I1Il();
        if (II1l11l111l1ll1l1l1IllIl1I1I1ll $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
            return $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($l11lIIl111IIIIl1l1Il1l1lI1ll111, 11);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IllIllI1l1l111I1IIlll1I1IlI1II1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $IIll11lllIIIIII1IIlII1lllIlI1lI;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_ip';
    $IIll11lllIIIIII1IIlII1lllIlI1lI = ll11l1lI1lIlIl1lI1I1111llll11II();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'IP Address', $IIll11lllIIIIII1IIlII1lllIlI1lI);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('v', 'Source', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l11llIl11l1l11Il1I11II1lIIll1II {
    my $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
    my $IIll11lllIIIIII1IIlII1lllIlI1lI;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_ipsrc';
    $IIll11lllIIIIII1IIlII1lllIlI1lI = ll11l1lI1lIlIl1lI1I1111llll11II();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'IP Address Source', $IIll11lllIIIIII1IIlII1lllIlI1lI);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = lc I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /^dhcp/) {
        $I1l1I111I111111Il1II1lllIl1l1ll = 'dhcp';
    }
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /^static/) {
        $I1l1I111I111111Il1II1lllIl1l1ll = 'static';
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIl1IIl1lI11I1I1lI11lIlI111l111 {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_vlan';
    my $IIll11lllIIIIII1IIlII1lllIlI1lI;
    $IIll11lllIIIIII1IIlII1lllIlI1lI = ll11l1lI1lIlIl1lI1I1111llll11II();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'VLAN ID', $IIll11lllIIIIII1IIlII1lllIlI1lI);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I1l1I111I111111Il1II1lllIl1l1ll = lc I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llIIlI1Il1lIII1lIl111l1I111lll1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_subnet';
    my $IIll11lllIIIIII1IIlII1lllIlI1lI;
    $IIll11lllIIIIII1IIlII1lllIlI1lI = ll11l1lI1lIlIl1lI1I1111llll11II();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Subnet Mask', $IIll11lllIIIIII1IIlII1lllIlI1lI);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I1l1I111I111111Il1II1lllIl1l1ll = lc I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llIII1111II1lIl1IIII11llI1l1l1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_mac';
    my $IIll11lllIIIIII1IIlII1lllIlI1lI;
    $IIll11lllIIIIII1IIlII1lllIlI1lI = ll11l1lI1lIlIl1lI1I1111llll11II();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'MAC Address', $IIll11lllIIIIII1IIlII1lllIlI1lI);
    @IllI11I11ll11Ill111IlIlI111IIlI = split(/:/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
    shift @IllI11I11ll11Ill111IlIlI111IIlI;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = join(':', @IllI11I11ll11Ill111IlIlI111IIlI);
    $I1l1I111I111111Il1II1lllIl1l1ll = lc I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub III1IIlll1l111I1IIlI1IlI11IllII {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $lllIIIl1ll1I111llII1llllII1IIII;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_ppid';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
        $I1l1I111I111111Il1II1lllIl1l1ll = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Board Extra', $lllIIIl1ll1I111llII1llllII1IIII);
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        $I1l1I111I111111Il1II1lllIl1l1ll = I1Il11lIl111l1l1IlIllI1lI1lIl1l(1, $I1l1I111I111111Il1II1lllIl1l1ll);
        $I1l1I111I111111Il1II1lllIl1l1ll = Il1ll11IllIIllIIIl11IIIIII1ll11('Board Extra', $I1l1I111I111111Il1II1lllIl1l1ll);
    }
    else {
        $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Board Serial', $lllIIIl1ll1I111llII1llllII1IIII);
        $I1l1I111I111111Il1II1lllIl1l1ll = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $I1l1I111I111111Il1II1lllIl1l1ll = uc I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lll1I1I11l111lI1lIl1l11lIllIIlI {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $i;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my @l1II1l111lI1II11IlI11l11l1lI11I;
    my $lllIIIl1ll1I111llII1llllII1IIII;
    $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Product Serial', $lllIIIl1ll1I111llII1llllII1IIII);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l11l111llIlIll111lll1III11lII1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lllIIIl1ll1I111llII1llllII1IIII;
    $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Chassis Serial', $lllIIIl1ll1I111llII1llllII1IIII);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I1l1I111I111111Il1II1lllIl1l1ll = $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l111IIl11IIl1lIIl1lI1l1lllIII1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $lllIIIl1ll1I111llII1llllII1IIII;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_asset_tag';
    $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Product Asset Tag', $lllIIIl1ll1I111llII1llllII1IIII);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l1Illl1l1ll1l1Ill1I1l1I1Ill11lI(':', 2, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    if ($I1l1I111I111111Il1II1lllIl1l1ll eq '') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l11lI1I111I1I11IIl1IIl1llI111II {
    my $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_host_power_state';
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis power status');
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /Chassis Power is on/) {
        $I1l1I111I111111Il1II1lllIl1l1ll = 'on';
    }
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /Chassis Power is off/) {
        $I1l1I111I111111Il1II1lllIl1l1ll = 'off';
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llIlIlIlIlII1I111IIIl11lllI1lII {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_hostname';
    $I1l1I111I111111Il1II1lllIl1l1ll = II1lIIIllIllIll1Ill11lIIl1l1IlI(6, 5, 0, 0);
    $I1l1I111I111111Il1II1lllIl1l1ll = llll11IIIlI11lI1Il1I11I1lII11lI($I1l1I111I111111Il1II1lllIl1l1ll);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIIlIlIII1ll111l1IIIlI11IIl11I1 {
    my $I1lII1I1I1IlIIlIII1IIllIl11I1II = shift @_;
    $I1lII1I1I1IlIIlIII1IIllIl11I1II = substr($I1lII1I1I1IlIIlIII1IIllIl11I1II, 0, 63);
    my $Il1IIl1IllllI1I1IIIII1II1IIl1Il = ll1111llIIIIl11lIIlIl11llIll1l1($I1lII1I1I1IlIIlIII1IIllIl11I1II, $IllI1IlIll111lI11lI1I111lIlllll);
    II1lIIIllIllIll1Ill11lIIl1l1IlI 6, 4, 0, 1;
    l11IllIlII1IlI1lIII1I1IIllII1lI 6, 4, 0, 0;
    sleep 1;
    II1lIIIllIllIll1Ill11lIIl1l1IlI 6, 4, 0, 1;
    l11IllIlII1IlI1lIII1I1IIllII1lI 6, 5, 0, $Il1IIl1IllllI1I1IIIII1II1IIl1Il;
    sleep 1;
}
my $lll1lllIIl1IlIlIl1lI1l11ll1lIlI = 1;
my $l11ll11l1IlllIII1I1l11l1IIlIlI1 = 2;
my $Il111l1I1ll1IllIIll11I1IllI1lIl = 4;
my $Il1I11lllIllll1I1Il1I1IIl1111lI = 8;
my $I1IlI1IllI1I11lI1Ill1l1II11lllI = 16;
sub I1I111IIIIlIl1IIl1II1lIIll1I1I1 {
    my $l1I11IIIll1III1ll1I1Il1lllI1l1I = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    if (IllIl1l1111I1I111IIll1Il1IllI1l() eq '') {
        I1I1I1IlIlIII111IllllIIl111I1I1 'sense_security';
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125') {
        if ($l1I11IIIll1III1ll1I1Il1lllI1l1I eq $Il1I11lllIllll1I1Il1I1IIl1111lI) {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
    }
    if ($l1I11IIIll1III1ll1I1Il1lllI1l1I eq $I1IlI1IllI1I11lI1Ill1l1II11lllI) {
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
            $I1l1I111I111111Il1II1lllIl1l1ll = $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 4;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 1;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 1;
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(lIl1IIllllIlll1Il1IIII1llI1IIl1($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(II1lIIIllIllIll1Ill11lIIl1l1IlI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll & hex $l1I11IIIll1III1ll1I1Il1lllI1l1I;
        $I1l1I111I111111Il1II1lllIl1l1ll = $I1l1I111I111111Il1II1lllIl1l1ll ? 1 : 0;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub ll1I1I11lI1IlIIl1ll1l1llI1I1lIl {
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_security_lockdown';
    return I1I111IIIIlIl1IIl1II1lIIll1I1I1($lll1lllIIl1IlIlIl1lI1l11ll1lIlI);
}
sub I1lI1111I1II1IIlI1I1lllI1l1l1ll {
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_security_ikvm';
    return I1I111IIIIlIl1IIl1II1lIIll1I1I1($l11ll11l1IlllIII1I1l11l1IIlIlI1);
}
sub llIIl11IlllII1Il111I111l1IllIlI {
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_security_http';
    return I1I111IIIIlIl1IIl1II1lIIll1I1I1($Il111l1I1ll1IllIIll11I1IllI1lIl);
}
sub I1l11lIlIIlIll1IllII1I11llllIl1 {
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_security_sshtelnet';
    return I1I111IIIIlIl1IIl1II1lIIll1I1I1($Il1I11lllIllll1I1Il1I1IIl1111lI);
}
sub l11IlI1111IIII1l1lIlI1lI1IlI1II {
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_security_snmp';
    return I1I111IIIIlIl1IIl1II1lIIll1I1I1($I1IlI1IllI1I11lI1Ill1l1II11lllI);
}
sub l1IIII1llllIllIIIlI1I1I11lIlllI {
    my $Il111l1I1I1I1lIII1I1l1Illll11II = shift @_;
    my $llIllIII1IlII1l1l11l1I1II1III1l = shift @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1II1lI1lIl1111lII1ll11ll1llII1 = ~$Il111l1I1I1I1lIII1I1l1Illll11II;
    my $I1Il111IIII1Il111Il1I1IlIl1lIII = 0;
    if ($llIllIII1IlII1l1l11l1I1II1III1l) {
        $I1Il111IIII1Il111Il1I1IlIl1lIII = $Il111l1I1I1I1lIII1I1l1Illll11II;
    }
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'set_security';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125') {
        if ($Il111l1I1I1I1lIII1I1l1Illll11II eq $Il1I11lllIllll1I1Il1I1IIl1111lI) {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
    }
    if ($Il111l1I1I1I1lIII1I1l1Illll11II eq $I1IlI1IllI1I11lI1Ill1l1II11lllI) {
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
            $I1l1I111I111111Il1II1lllIl1l1ll = $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125') {
        if ($Il111l1I1I1I1lIII1I1l1Illll11II == $lll1lllIIl1IlIlIl1lI1l11ll1lIlI and $llIllIII1IlII1l1l11l1I1II1III1l) {
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 4;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 1;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 1;
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1(II1lIIIllIllIll1Ill11lIIl1l1IlI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = hex $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $l11lIIl111IIIIl1l1Il1l1lI1ll111 & $l1II1lI1lIl1111lII1ll11ll1llII1 | $I1Il111IIII1Il111Il1I1IlIl1lIII;
        $I1l1I111I111111Il1II1lllIl1l1ll = l11IllIlII1IlI1lIII1I1IIllII1lI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $l11lIIl111IIIIl1l1Il1l1lI1ll111);
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(lIl1IIllllIlll1Il1IIII1llI1IIl1($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(II1lIIIllIllIll1Ill11lIIl1l1IlI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll;
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1Il1lI1lll1Il11lI1l1IlI1II1lII {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_http_enabled';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 12;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 1;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 1;
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1(lIl1IIllllIlll1Il1IIII1llI1IIl1($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        else {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1(II1lIIIllIllIll1Ill11lIIl1l1IlI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111) {
            if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 == 1) {
                $I1l1I111I111111Il1II1lllIl1l1ll = 1;
            }
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1l1l1llIIII1ll1llIIlIIl1I1lII1 {
    my $l11lII11IlIl1l1I1II11Il1lIllIlI = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'set_http_enabled';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 12;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 1;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 1;
        $I1l1I111I111111Il1II1lllIl1l1ll = l11IllIlII1IlI1lIII1I1IIllII1lI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $l11lII11IlIl1l1I1II11Il1lIllIlI);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIIllll1I11l1lI1l1Il111lIl1lI1l {
    my $l1I11IIIll1III1ll1I1Il1lllI1l1I = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_http_port';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 12;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 5;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 2;
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(lIl1IIllllIlll1Il1IIII1llI1IIl1($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(lIl1IIllllIlll1Il1IIII1llI1IIl1($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        $I1l1I111I111111Il1II1lllIl1l1ll =~ s/\s*//g;
        $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1IIIl111I1l11I1l1l1llII1I1II1I {
    my $I1lI1lIII1II1IlI111IIII1lI1l1ll = shift @_;
    $I1lI1lIII1II1IlI111IIII1lI1l1ll = int $I1lI1lIII1II1IlI111IIII1lI1l1ll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'set_http_port';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 12;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 5;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 2;
        $I1l1I111I111111Il1II1lllIl1l1ll = lIIlIll1l1l1IIllIIIIllllll1IIll('asdf', 'set', $Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1, $I1lI1lIII1II1IlI111IIII1lI1l1ll);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l1lI1l1I11Il1IllIIlI11Il111I11l {
    my $l1I11IIIll1III1ll1I1Il1lllI1l1I = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_https_port';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 12;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 6;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 2;
        if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(lIl1IIllllIlll1Il1IIII1llI1IIl1($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = Illll11l1I111Il1IlIII1l1IllIIl1(II1lIIIllIllIll1Ill11lIIl1l1IlI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1));
        }
        $I1l1I111I111111Il1II1lllIl1l1ll =~ s/\s*//g;
        $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1I11IlIlll11lI1111l1l1II1lII1l {
    my $I1lI1lIII1II1IlI111IIII1lI1l1ll = shift @_;
    $I1lI1lIII1II1IlI111IIII1lI1l1ll = int $I1lI1lIII1II1IlI111IIII1lI1l1ll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'set_https_port';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        my $Ill111l1l1II1ll1lIlIIIlII11III1 = 12;
        my $I1IlllI111lIlll1II1ll1IlIIllllI = 6;
        my $IIllIlI111IlI1II1lII1lllIlI1l11 = 0;
        my $IIll111IllI1Ill1IIlIl1II11Il1l1 = 2;
        $I1l1I111I111111Il1II1lllIl1l1ll = lIIlIll1l1l1IIllIIIIllllll1IIll('asdf', 'set', $Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1, $I1lI1lIII1II1IlI111IIII1lI1l1ll);
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l1Il111II1Il1lII1l1lI111Ill1l11 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_nic_mode';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x02 $l1IllIIl1llIIIll111llI1lIlI11II 0x02 0x01 0x00 0x00 0x00 0x01");
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $IllI11I11ll11Ill111IlIlI111IIlI[4];
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq '00') {
            $I1l1I111I111111Il1II1lllIl1l1ll = 'shared';
        }
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq '01') {
            $I1l1I111I111111Il1II1lllIl1l1ll = 'dedicated';
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x34 0x14');
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq '00') {
            $I1l1I111I111111Il1II1lllIl1l1ll = 'shared';
        }
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 eq '01') {
            $I1l1I111I111111Il1II1lllIl1l1ll = 'dedicated';
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1l11I11lI1llll1I11lI1IIl1llIIl {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $IIll1l1l1II11lIIIIlI1ll1l1Il1II;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    $IIll1l1l1II11lIIIIlI1ll1l1Il1II = '';
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 =~ /^sh/i) {
        $IIll1l1l1II11lIIIIlI1ll1l1Il1II = 'shared';
    }
    if ($lIl1II11I1llIIII1I1lIlIllI111I1 =~ /^d/i) {
        $IIll1l1l1II11lIIIIlI1ll1l1Il1II = 'dedicated';
    }
    if ($IIll1l1l1II11lIIIIlI1ll1l1Il1II eq '') {
        print "error:  I do not know what mode $lIl1II11I1llIIII1I1lIlIllI111I1 is.  Please use 'shared' or 'dedicated'.\n";
        exit 1;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $IIll1l1l1II11lIIIIlI1ll1l1Il1II eq 'shared' ? '00' : '01';
        $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
        I1llI1llIIII1II1llI1lI1lIIl111I "raw 0x30 0x03 $l1IllIIl1llIIIll111llI1lIlI11II 0x02 0x01 0x00 0x00 0x00 1 $l11lIIl111IIIIl1l1Il1l1lI1ll111";
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $IIll1l1l1II11lIIIIlI1ll1l1Il1II eq 'shared' ? '00' : '01';
        I1llI1llIIII1II1llI1lI1lIIl111I "raw 0x34 0x13 $l11lIIl111IIIIl1l1Il1l1lI1ll111";
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    l11II11111I11II1II1Ill11l1Il11l ;
}
sub I1lll1ll11Il11lIII1l11II111l11l {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_reqd_psu_count';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x1f', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
            $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[5];
            $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub II11II11Ill1IlIllIIllllI111IIII {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_redundant_psu_available';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x1f', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
            $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[6];
            $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llIIl1lIIIllI1I1ll1lIl1I11lll1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_node_number';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II1IllIIII1I1ll1lIl1ll1IlI111();
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x34 0x11');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x2d');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        if ($IIlI11l1l1II1IIlIlIII11llIl1IIl eq '') {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x2d');
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
        }
        if ($IIlI11l1l1II1IIlIlIII11llIl1IIl eq 'IPV6') {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x4c');
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x7d');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x12', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
            @IllI11I11ll11Ill111IlIlI111IIlI = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
            $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[9];
            $I1l1I111I111111Il1II1lllIl1l1ll = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($I1l1I111I111111Il1II1lllIl1l1ll);
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1Il1lIIlII11lIIlIIllII1IlIll1I {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my @l1II1l111lI1II11IlI11l11l1lI11I;
    my $i;
    I1I1I1IlIlIII111IllllIIl111I1I1 'sense_bmc_version';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = IlI1I1Ill1Ill1lI1l11lll1111lIII('mc info');
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
        @IllI11I11ll11Ill111IlIlI111IIlI = split(/\n/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        foreach $i (0 .. $#IllI11I11ll11Ill111IlIlI111IIlI) {
            if ($IllI11I11ll11Ill111IlIlI111IIlI[$i] =~ /Firmware Revision/) {
                @l1II1l111lI1II11IlI11l11l1lI11I = split(/:/, $IllI11I11ll11Ill111IlIlI111IIlI[$i], 0);
                $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($l1II1l111lI1II11IlI11l11l1lI11I[1]);
                last;
            }
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11Ill1I1IlIl1I1lII1l1lll1lI1ll {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $II1llII1II1III1IIl1II1l1IIIll1l = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x06 0x52 0x07 0xa0 0x06 0x3c 0x1d');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        @IllI11I11ll11Ill111IlIlI111IIlI = split(/\s+/, $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[0];
        if (hex $I1l1I111I111111Il1II1lllIl1l1ll == 32) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'X3.5';
        }
        if (hex $I1l1I111I111111Il1II1lllIl1l1ll == 48) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'Nucleon';
        }
        if (hex $I1l1I111I111111Il1II1lllIl1l1ll == 64) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'Viper';
        }
        if (hex $I1l1I111I111111Il1II1lllIl1l1ll == 255) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'unprogrammed';
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll, $II1llII1II1III1IIl1II1l1IIIll1l;
}
sub lI1ll1lll11I1lIII1lI11IIlIllIlI {
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $II1llII1II1III1IIl1II1l1IIIll1l = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $IIII1IIllllIll1Il1l11I111IIlIlI;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l11IlIIllllIllIl1lII1lI111lI1I1 = 0;
    my $IIlI1l1IlIl1Il1l11l1lll1Il111II;
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100') {
        $II1llII1II1III1IIl1II1l1IIIll1l = l1II1IllIIII1I1ll1lIl1ll1IlI111();
        $I1l1I111I111111Il1II1lllIl1l1ll = '';
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        if ($IIll111lllII1l1111I1IlllIlll1Il eq 'PEC') {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'X3.5';
            $I1l1I111I111111Il1II1lllIl1l1ll = '';
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $II1llII1II1III1IIl1II1l1IIIll1l = 'X5';
        $I1l1I111I111111Il1II1lllIl1l1ll = '';
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        if ($IIll111lllII1l1111I1IlllIlll1Il eq 'PEC') {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'X3.5';
            $I1l1I111I111111Il1II1lllIl1l1ll = '';
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5125' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C5220') {
        $II1llII1II1III1IIl1II1l1IIIll1l = 'Viking';
        $I1l1I111I111111Il1II1lllIl1l1ll = '';
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $II1llII1II1III1IIl1II1l1IIIll1l = l1II1IllIIII1I1ll1lIl1ll1IlI111();
        $I1l1I111I111111Il1II1lllIl1l1ll = '';
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('sdr type Fan');
        $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
        @IllI11I11ll11Ill111IlIlI111IIlI = split(/\n/, $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        $IIII1IIllllIll1Il1l11I111IIlIlI = 0;
        foreach $_ (@IllI11I11ll11Ill111IlIlI111IIlI) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1ll1II111I11lIlIIl1llI1111IlIl($_);
            if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /FAN/) {
                ++$IIII1IIllllIll1Il1l11I111IIlIlI;
            }
        }
        $II1llII1II1III1IIl1II1l1IIIll1l = 'unknown';
        $I1l1I111I111111Il1II1lllIl1l1ll = $IIII1IIllllIll1Il1l11I111IIlIlI;
        if ($IIII1IIllllIll1Il1l11I111IIlIlI == 2) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'Scorpion';
        }
        if ($IIII1IIllllIll1Il1l11I111IIlIlI == 4) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'X6';
        }
        if ($IIII1IIllllIll1Il1l11I111IIlIlI == 6) {
            $II1llII1II1III1IIl1II1l1IIIll1l = 'Zeus';
        }
        my $llIl11l11llI1I11111ll1llIlll1II = $I1l1I111I111111Il1II1lllIl1l1ll;
        my $l1l1IIIlI111IIII1l1II1IlI1lIll1 = $II1llII1II1III1IIl1II1l1IIIll1l;
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        $II1llII1II1III1IIl1II1l1IIIll1l = 'unknown';
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0x12', 'noerr');
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll == 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = Ill1IIIll11l1lIlllI1l1lIlI1l1I1($I1l1I111I111111Il1II1lllIl1l1ll, 22);
            $I1l1I111I111111Il1II1lllIl1l1ll = ($I1l1I111I111111Il1II1lllIl1l1ll & 254) >> 1;
            if ($I1l1I111I111111Il1II1lllIl1l1ll eq 1) {
                $II1llII1II1III1IIl1II1l1IIIll1l = 'Scorpion';
            }
            if ($I1l1I111I111111Il1II1lllIl1l1ll eq 2) {
                $II1llII1II1III1IIl1II1l1IIIll1l = 'X6';
            }
            if ($I1l1I111I111111Il1II1lllIl1l1ll eq 3) {
                $II1llII1II1III1IIl1II1l1IIIll1l = 'Zeus';
            }
        }
        if ($II1llII1II1III1IIl1II1l1IIIll1l eq 'unknown') {
            $IIlI1l1IlIl1Il1l11l1lll1Il111II = IIl11l111lIIlII1111ll111ll1I1Il();
            if (II1l11l111l1ll1l1l1IllIl1I1I1ll $IIlI1l1IlIl1Il1l11l1lll1Il111II) {
                $l11IlIIllllIllIl1lII1lI111lI1I1 = 1;
            }
        }
        if ($l1l1IIIlI111IIII1l1II1IlI1lIll1 ne $II1llII1II1III1IIl1II1l1IIIll1l) {
            if ($l11IlIIllllIllIl1lII1lI111lI1I1) {
                return 0, Illll1ll1IIII1ll1I11IllI1I1lI1I();
            }
            printf "The two detection methods for chassis type do not agree.\n";
            print "fans: $llIl11l11llI1I11111ll1llIlll1II  ---->  this chassis appears to be: $l1l1IIIlI111IIII1l1II1IlI1lIll1\n";
            print "bits: $I1l1I111I111111Il1II1lllIl1l1ll  ---> chassis type: $II1llII1II1III1IIl1II1l1IIIll1l\n\n";
            print "Setting to 'unknown'\n\n";
            $I1l1I111I111111Il1II1lllIl1l1ll = 0;
            $II1llII1II1III1IIl1II1l1IIIll1l = 'unknown';
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll, $II1llII1II1III1IIl1II1l1IIIll1l;
}
sub IlI1I11I1Illl11IIIIllIllIIll11l {
    my($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII(q[chassis status | grep 'Restore Policy' | cut -d':' -f2]);
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub III1III1IlIIl1l1l1llllI1l1l1IIl {
    my $IIl1IIIIIIlIII1lIlIllllII11III1 = shift @_ || '0';
    $IIl1IIIIIIlIII1lIlIllllII11III1 = int $IIl1IIIIIIlIII1lIlIllllII11III1;
    my $I1II1lll1111lI11IIIl1IlI1lII1I1;
    my $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        if ($IIl1IIIIIIlIII1lIlIllllII11III1 < 1 or $IIl1IIIIIIlIII1lIlIllllII11III1 > 16) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        $I1II1lll1111lI11IIIl1IlI1lII1I1 = 80 + ($IIl1IIIIIIlIII1lIlIllllII11III1 - 1);
        $I1l1I111I111111Il1II1lllIl1l1ll = IIlIII1lI1l11IlI1llI1I11II11I1I($I1II1lll1111lI11IIIl1IlI1lII1I1);
        if (II1l11l111l1ll1l1l1IllIl1I1I1ll $I1l1I111I111111Il1II1lllIl1l1ll) {
            $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        }
        if (ll11lIlI111IIIl11IIlllII1l11I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
            $I1l1I111I111111Il1II1lllIl1l1ll = hex($I1l1I111I111111Il1II1lllIl1l1ll) * 2;
            $I1l1I111I111111Il1II1lllIl1l1ll = sprintf('%d', $I1l1I111I111111Il1II1lllIl1l1ll);
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l111l1llI11I11IlIlI1ll11III1l1l {
    my $IIl1IIIIIIlIII1lIlIllllII11III1 = shift @_ || '0';
    $IIl1IIIIIIlIII1lIlIllllII11III1 = int $IIl1IIIIIIlIII1lIlIllllII11III1;
    my $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        if ($IIl1IIIIIIlIII1lIlIllllII11III1 < 1 or $IIl1IIIIIIlIII1lIlIllllII11III1 > 16) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = III1III1IlIIl1l1l1llllI1l1l1IIl($IIl1IIIIIIlIII1lIlIllllII11III1);
        if (II1l11l111l1ll1l1l1IllIl1I1I1ll $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
            $I1l1I111I111111Il1II1lllIl1l1ll = 'off';
        }
        if (ll11lIlI111IIIl11IIlllII1l11I1I $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = int $l11lIIl111IIIIl1l1Il1l1lI1ll111;
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 > 5) {
                $I1l1I111I111111Il1II1lllIl1l1ll = 'on';
            }
            if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 <= 5 and $l11lIIl111IIIIl1l1Il1l1lI1ll111 >= 0) {
                $I1l1I111I111111Il1II1lllIl1l1ll = 'off';
            }
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lII11Illl1IIll1IlIIlI11l1I11l1l {
    my $IIl1IIIIIIlIII1lIlIllllII11III1 = shift @_;
    $IIl1IIIIIIlIII1lIlIllllII11III1 = int $IIl1IIIIIIlIII1lIlIllllII11III1;
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
    my $x;
    my $lI1IIIIIlIIl11lIllIlI1l1l1l1111;
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        if ($IIl1IIIIIIlIII1lIlIllllII11III1 < 1 or $IIl1IIIIIIlIII1lIlIllllII11III1 > 16) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
        $I1l1I111I111111Il1II1lllIl1l1ll = l1II11II1l1I1IIII11I1lI1I11II11();
        $x = 1 << $IIl1IIIIIIlIII1lIlIllllII11III1 - 1;
        $lI1IIIIIlIIl11lIllIlI1l1l1l1111 = sprintf('0x%02x 0x%02x', $x & 255, ($x & 65280) >> 8);
        I1I1I1IlIlIII111IllllIIl111I1I1 'toggle_gpgpu_sled_power';
        ($l1II1lI1Il11lIIl1111Il1l11IIlll, $l11lIIl111IIIIl1l1Il1l1lI1ll111) = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0xf0 $lI1IIIIIlIIl11lIllIlI1l1l1l1111");
        sleep 2;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11IIIl1lI1lIIll1II1lI1IlIlIll1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = I1II1I1Il11IIII1I1lllI1IIlIllll();
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $l1l1I1lllll1lIlIIIl1l1II11l1lIl;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1lIIIllIll1ll1l1II1111IlIIllIl;
    my $I1IlIlllII1IIllII11l1llI1I1ll1l;
    my $Ill1Illl1llIl111II1lI11l1IIllI1;
    $l1l1I1lllll1lIlIIIl1l1II11l1lIl = shift @_;
    $l1l1I1lllll1lIlIIIl1l1II11l1lIl = I11IllIl11lI1IIl1lIllllI1I1IIll($l1l1I1lllll1lIlIIIl1l1II11l1lIl);
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = llIIl1lIIIllI1I1ll1lIl1I11lll1l();
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 != 4) {
            printf "Attempted to set fan speed from node %s.  Please do this from node 4.\n", $l11lIIl111IIIIl1l1Il1l1lI1ll111;
            return Illll1ll1IIII1ll1I11IllI1I1lI1I();
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = llIIl1lIIIllI1I1ll1lIl1I11lll1l();
        if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 != 2) {
            printf "Attempted to set fan speed from node %s.  Please do this from node 2.\n", $l11lIIl111IIIIl1l1Il1l1lI1ll111;
            return Illll1ll1IIII1ll1I11IllI1I1lI1I();
        }
    }
    if (not $l1l1I1lllll1lIlIIIl1l1II11l1lIl eq 'auto') {
        if ($l1l1I1lllll1lIlIIIl1l1II11l1lIl < 0 or $l1l1I1lllll1lIlIIIl1l1II11l1lIl > 100) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l11lIll11IIIII1Ill1I1lII1I1II1I();
            return $I1l1I111I111111Il1II1lllIl1l1ll;
        }
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        if ($l1l1I1lllll1lIlIIIl1l1II11l1lIl eq 'auto') {
            $l1l1I1lllll1lIlIIIl1l1II11l1lIl = '0';
        }
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1III1I11ll1lII1l11l1llI1l111ll($l1l1I1lllll1lIlIIIl1l1II11l1lIl, 1);
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x34 0x74 0x01 0x$l11lIIl111IIIIl1l1Il1l1lI1ll111");
        my(@IIl11Il1Il1II1lIIlIl11IllIl1I1I) = split(' ', $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        if ($IIl11Il1Il1II1lIIlIl11IllIl1I1I[0] eq '01') {
            $I1l1I111I111111Il1II1lllIl1l1ll = 1;
        }
        else {
            printf "Error:  command did not appear to work\n";
        }
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C2100' or $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C1100') {
        if ($l1l1I1lllll1lIlIIIl1l1II11l1lIl eq 'auto') {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x30 0x11 0xFF');
        }
        else {
            $l1l1I1lllll1lIlIIIl1l1II11l1lIl = floor($l1l1I1lllll1lIlIIIl1l1II11l1lIl / 100 * 63);
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1III1I11ll1lII1l11l1llI1l111ll($l1l1I1lllll1lIlIIIl1l1II11l1lIl, 1);
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x11 0x00 0x$l11lIIl111IIIIl1l1Il1l1lI1ll111");
        }
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        if ($l1l1I1lllll1lIlIIIl1l1II11l1lIl eq 'auto') {
            $l1l1I1lllll1lIlIIIl1l1II11l1lIl = 0;
        }
        else {
            $l1l1I1lllll1lIlIIIl1l1II11l1lIl = $l1l1I1lllll1lIlIIIl1l1II11l1lIl | 128;
        }
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1III1I11ll1lII1l11l1llI1l111ll($l1l1I1lllll1lIlIIIl1l1II11l1lIl, 1);
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x34 0x61 0x$l11lIIl111IIIIl1l1Il1l1lI1ll111");
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        if ($l1l1I1lllll1lIlIIIl1l1II11l1lIl eq 'auto') {
            $I1IlIlllII1IIllII11l1llI1I1ll1l = 160;
            $Ill1Illl1llIl111II1lI11l1IIllI1 = 0;
        }
        else {
            $I1IlIlllII1IIllII11l1llI1I1ll1l = 32;
            $Ill1Illl1llIl111II1lI11l1IIllI1 = $l1l1I1lllll1lIlIIIl1l1II11l1lIl;
        }
        $I1IlIlllII1IIllII11l1llI1I1ll1l = I1III1I11ll1lII1l11l1llI1l111ll($I1IlIlllII1IIllII11l1llI1I1ll1l, 1);
        $Ill1Illl1llIl111II1lI11l1IIllI1 = I1III1I11ll1lII1l11l1llI1l111ll($Ill1Illl1llIl111II1lI11l1IIllI1, 1);
        if ($l1l1I1lllll1lIlIIIl1l1II11l1lIl eq 'auto') {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x19 0x$I1IlIlllII1IIllII11l1llI1I1ll1l 0x00");
        }
        else {
            $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x19 0x$I1IlIlllII1IIllII11l1llI1I1ll1l 0x$Ill1Illl1llIl111II1lI11l1IIllI1");
        }
        return $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l1I11l1lIlI1IIII1I1lIIIIlI1lI1l {
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $lll1II11l1IlII1111lll1II1l1l1l1) = @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $I1llIllI1I1Il1I11l1I1I1I1ll1111 = ll1111llIIIIl11lIIlIl11llIll1l1($lll1II11l1IlII1111lll1II1l1l1l1, $IllI1IlIll111lI11lI1I111lIlllll);
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x20 0x11 $I1llIllI1I1Il1I11l1I1I1I1ll1111");
        return;
    }
    l11II11111I11II1II1Ill11l1Il11l ;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub II1111II1l1IlI11III1111IlII11lI {
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $l1l1111I111IIIl11l11II1lllllll1, $l1Il111l1IIIIIIIlI11ll1l11I111I, $l1IIl1lll1I1I1lI1IlIl1l1I1l1ll1, $IIIl11l1lIl11l11llll11l1llIIl1l, $I1l1IIllll1llI1I11l1l11lll1lII1, $III1111Ill1l11IIII1llIII1llII1I) = @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $IIIlIl11llIll1IllIll111I1l1l11I = '';
    if (not defined $III1111Ill1l11IIII1llIII1llII1I) {
        printf "Usage:\n";
        printf "     Provide the mac address in hex, separated by spaces as such:\n";
        printf "\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  aa bb cc dd ee ff\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    $l1l1111I111IIIl11l11II1lllllll1 = sprintf('0x%02x', hex $l1l1111I111IIIl11l11II1lllllll1);
    $l1Il111l1IIIIIIIlI11ll1l11I111I = sprintf('0x%02x', hex $l1Il111l1IIIIIIIlI11ll1l11I111I);
    $l1IIl1lll1I1I1lI1IlIl1l1I1l1ll1 = sprintf('0x%02x', hex $l1IIl1lll1I1I1lI1IlIl1l1I1l1ll1);
    $IIIl11l1lIl11l11llll11l1llIIl1l = sprintf('0x%02x', hex $IIIl11l1lIl11l11llll11l1llIIl1l);
    $I1l1IIllll1llI1I11l1l11lll1lII1 = sprintf('0x%02x', hex $I1l1IIllll1llI1I11l1l11lll1lII1);
    $III1111Ill1l11IIII1llIII1llII1I = sprintf('0x%02x', hex $III1111Ill1l11IIII1llIII1llII1I);
    $IIIlIl11llIll1IllIll111I1l1l11I = "$l1l1111I111IIIl11l11II1lllllll1 $l1Il111l1IIIIIIIlI11ll1l11I111I $l1IIl1lll1I1I1lI1IlIl1l1I1l1ll1 $IIIl11l1lIl11l11llll11l1llIIl1l $I1l1IIllll1llI1I11l1l11lll1lII1 $III1111Ill1l11IIII1llIII1llII1I";
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I('raw 0x06 0x05 0x64 0x52 0x45 0x4d 0x24 0x73 0x74 0x38');
        $I1l1I111I111111Il1II1lllIl1l1ll = IlI1I1Ill1Ill1lI1l11lll1111lIII("raw 0x0c 0x01 0x01 0x05 $IIIlIl11llIll1IllIll111I1l1l11I", 'noerr');
        return;
    }
    l11II11111I11II1II1Ill11l1Il11l ;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIIIl1lIlI1I1IIIlII1111IIIl1lIl {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1IIlIl1I111I11I1lI1l1I11l11lIl) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  mac_addr_file_name\n";
        printf "\n";
        printf "This function takes the output of 'print_both_macs' as input, and sets both BMC mac addresses.\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        printf "\n";
        printf "This function cannot be used remotely, because it is possible to render the BMC inaccessible.\n";
        printf "\n";
        exit 1;
    }
    my @llIIIIl11IIl11lII1IlI11IIl1Il11;
    my $IIlIl111I1lII111IIll1I1I1I1I11l = '';
    my $I111lIl1I1lIIlIllIl1Il1ll1II11l = '';
    my $lIl1111llI1I111llII1IlI1IllI1lI;
    my $l1I1IlI111111ll11ll1lI1llI1Il1I;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    die "\nError:  Could not open BMC MAC address file $I1IIlIl1I111I11I1lI1l1I11l11lIl\n\n" unless open TMPFILE, $I1IIlIl1I111I11I1lI1l1I11l11lIl;
    while (defined($_ = <TMPFILE>)) {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $_;
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = llIIllIl1ll1lI1IIIII1l1I1lI11ll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        @llIIIIl11IIl11lII1IlI11IIl1Il11 = split(/,/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        $lIl1111llI1I111llII1IlI1IllI1lI = I11IllIl11lI1IIl1lIllllI1I1IIll($llIIIIl11IIl11lII1IlI11IIl1Il11[0]);
        $l1I1IlI111111ll11ll1lI1llI1Il1I = I11IllIl11lI1IIl1lIllllI1I1IIll($llIIIIl11IIl11lII1IlI11IIl1Il11[1]);
        if ($lIl1111llI1I111llII1IlI1IllI1lI eq 'shared') {
            $IIlIl111I1lII111IIll1I1I1I1I11l = $l1I1IlI111111ll11ll1lI1llI1Il1I;
        }
        if ($lIl1111llI1I111llII1IlI1IllI1lI eq 'dedicated') {
            $I111lIl1I1lIIlIllIl1Il1ll1II11l = $l1I1IlI111111ll11ll1lI1llI1Il1I;
        }
    }
    close TMPFILE;
    if ($IIlIl111I1lII111IIll1I1I1I1I11l eq '' or $I111lIl1I1lIIlIllIl1Il1ll1II11l eq '') {
        printf "File provided must contain both shared and dedicated BMC MAC addresses.\n";
        exit 1;
    }
    my $I11Il1IIII1IIl1lIlI1lIlI1llI111;
    my @I1I1II11lllIlllIIIIl11lI1Illl1I;
    my $IlI1llI1lI11lI1lI11IlII11III1I1;
    $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'shared') {
        $I11Il1IIII1IIl1lIlI1lIlI1llI111 = $IIlIl111I1lII111IIll1I1I1I1I11l;
    }
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'dedicated') {
        $I11Il1IIII1IIl1lIlI1lIlI1llI111 = $I111lIl1I1lIIlIllIl1Il1ll1II11l;
    }
    @I1I1II11lllIlllIIIIl11lI1Illl1I = split(/:/, $I11Il1IIII1IIl1lIlI1lIlI1llI111, 0);
    print "Setting $IlI1llI1lI11lI1lI11IlII11III1I1 MAC to: $I11Il1IIII1IIl1lIlI1lIlI1llI111 \n";
    II1111II1l1IlI11III1111IlII11lI 'set_bmc_mac', $I1I1II11lllIlllIIIIl11lI1Illl1I[0], $I1I1II11lllIlllIIIIl11lI1Illl1I[1], $I1I1II11lllIlllIIIIl11lI1Illl1I[2], $I1I1II11lllIlllIIIIl11lI1Illl1I[3], $I1I1II11lllIlllIIIIl11lI1Illl1I[4], $I1I1II11lllIlllIIIIl11lI1Illl1I[5];
    sleep 10;
    lIl1lIlIIlI1ll1Il1lIIIll1I111l1 ;
    print "(switching bmc nic)\n";
    IlII1IlI11Il11Il1lll1I11IlIIl1l('nic_mode', 'toggle', '', 'silent');
    sleep 30;
    lIl1lIlIIlI1ll1Il1lIIIll1I111l1 ;
    $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'shared') {
        $I11Il1IIII1IIl1lIlI1lIlI1llI111 = $IIlIl111I1lII111IIll1I1I1I1I11l;
    }
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'dedicated') {
        $I11Il1IIII1IIl1lIlI1lIlI1llI111 = $I111lIl1I1lIIlIllIl1Il1ll1II11l;
    }
    @I1I1II11lllIlllIIIIl11lI1Illl1I = split(/:/, $I11Il1IIII1IIl1lIlI1lIlI1llI111, 0);
    print "Setting $IlI1llI1lI11lI1lI11IlII11III1I1 MAC to: $I11Il1IIII1IIl1lIlI1lIlI1llI111 \n";
    II1111II1l1IlI11III1111IlII11lI 'set_bmc_mac', $I1I1II11lllIlllIIIIl11lI1Illl1I[0], $I1I1II11lllIlllIIIIl11lI1Illl1I[1], $I1I1II11lllIlllIIIIl11lI1Illl1I[2], $I1I1II11lllIlllIIIIl11lI1Illl1I[3], $I1I1II11lllIlllIIIIl11lI1Illl1I[4], $I1I1II11lllIlllIIIIl11lI1Illl1I[5];
    sleep 10;
    lIl1lIlIIlI1ll1Il1lIIIll1I111l1 ;
    print "(switching bmc nic)\n";
    IlII1IlI11Il11Il1lll1I11IlIIl1l('nic_mode', 'toggle', '', 'silent');
    sleep 30;
    lIl1lIlIIlI1ll1Il1lIIIll1I111l1 ;
    print "done.\n";
    print "\n";
}
sub IllIllI11lI1IIIlIlIl1I1l11l111I {
    my $i;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1llI1lIllI1IIlII1I11lII1lIIIll, $lllI1lI11lI1IIIlll1IlIl1lI11l1l) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  get|set  [timeout_in_seconds; 0 to disable]\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = II1lIIIllIllIll1Ill11lIIl1l1IlI(12, 4, 0, 4);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        printf "%d\n", $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1III1I11ll1lII1l11l1llI1l111ll($lllI1lI11lI1IIIlll1IlIl1lI11l1l, 4);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = ll1Ill1I1III1I1lIIlI11IlI1I11l1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        l111II1I1ll11l11lll1lll1llI1111 12, 4, 0, 4, $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        print "\n";
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub lI1lll111lIlI1ll11lIlIlIll11l1I {
    my $I1l1I111I111111Il1II1lllIl1l1ll = IllIII1I1ll11III1IIIIlIIIlIllI1();
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        l11II11111I11II1II1Ill11l1Il11l ;
    }
    print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
}
sub Il11IIIIlIIlllIl1111I1l1lI1111I {
    my $I1l1I111I111111Il1II1lllIl1l1ll = III1IIlll1l111I1IIlI1IlI11IllII();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub l1lIlIl11l11I1I1ll1lIlIl1l1lllI {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lll1I1I11l111lI1lIl1l11lIllIIlI();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIl1IlI1l1I1III11IlI1Ill111II1I {
    my $I1l1I111I111111Il1II1lllIl1l1ll = l111IIl11IIl1lIIl1lI1l1lllIII1l();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIIl11IlIIl1I1l1IllI1I1l1I11ll1 {
    my $i;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('mc reset cold');
    print "\n";
}
sub I11IIlIlll1ll11lIIIlllI1ll1IIII {
    if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        print "\n";
        print "This command must be run locally on the system.\n";
        print "\n";
        exit 1;
    }
    $ll11lllII1lIllIlI1II1IIlIIl111l = IlIll1III1IIII1l11I1IlllllI1I1l('pec-logs', $ll11lllII1lIllIlI1II1IIlIIl111l, 'PECLOGS');
    print "\n";
    print "\n";
    print "\n";
    print "Using $ll11lllII1lIllIlI1II1IIlIIl111l --bmc-reset to drive a hard reset... \n";
    print "\n";
    print "Please wait 60-90 seconds for the BMC to reboot.  It will respond to 'bmc ping' before it\n";
    print "has fully rebooted.  Commands may not be reliable until it has quiesced.\n";
    print "\n";
    print "\n";
    print "\n";
    `$ll11lllII1lIllIlI1II1IIlIIl111l --bmc-reset`;
    exit 0;
}
sub ll11l1lI1IIIlIl111l1IIl1I1l1I1I {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lI1l1lII11l1IlIIIII1IlIlI1l11ll();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $Il111II1IIlIl1l11111II1llIlI1l1;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $l11lIl1lIIIl1lllI11I1IIIIIl1lll) = @_;
    I1I1I1IlIlIII111IllllIIl111I1I1 'set_asset_tag';
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        $l11lIl1lIIIl1lllI11I1IIIIIl1lll = substr($l11lIl1lIIIl1lllI11I1IIIIIl1lll, 0, 10);
        $Il111II1IIlIl1l11111II1llIlI1l1 = ll1111llIIIIl11lIIlIl11llIll1l1($l11lIl1lIIIl1lllI11I1IIIIIl1lll, $IllI1IlIll111lI11lI1I111lIlllll);
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x34 0x12 $Il111II1IIlIl1l11111II1llIlI1l1");
        print "\n";
        return;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6145') {
        $l11lIl1lIIIl1lllI11I1IIIIIl1lll = substr($l11lIl1lIIIl1lllI11I1IIIIIl1lll, 0, 20);
        $Il111II1IIlIl1l11111II1llIlI1l1 = ll1111llIIIIl11lIIlIl11llIll1l1($l11lIl1lIIIl1lllI11I1IIIIIl1lll, $IllI1IlIll111lI11lI1I111lIlllll);
        $I1l1I111I111111Il1II1lllIl1l1ll = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x34 0x12 $Il111II1IIlIl1l11111II1llIlI1l1");
        print "\n";
        return;
    }
    print "\n";
    l11II11111I11II1II1Ill11l1Il11l ;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IlllI1Il1ll1llII1lI1I1I1lI1II11 {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1llI1lIllI1IIlII1I11lII1lIIIll, $I1lII1I1I1IlIIlIII1IIllIl11I1II) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  get|set  [hostname]\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = llIlIlIlIlII1I111IIIl11lllI1lII();
        printf "$l11lIIl111IIIIl1l1Il1l1lI1ll111\n";
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        lIIlIlIII1ll111l1IIIlI11IIl11I1 $I1lII1I1I1IlIIlIII1IIllIl11I1II;
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
my $l1lI1Il111I1IlI1II1IIII11lIlIll = 'zyz';
sub IIllIIl11lIll1IIll1l1IIIllII1II {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    $I1l1I111I111111Il1II1lllIl1l1ll = llIlIlIlIlII1I111IIIl11lllI1lII();
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    if (not $I1l1I111I111111Il1II1lllIl1l1ll =~ /$l1lI1Il111I1IlI1II1IIII11lIlIll/) {
        return 'none';
    }
    my(@IllI11I11ll11Ill111IlIlI111IIlI) = split(/$l1lI1Il111I1IlI1II1IIII11lIlIll/, $I1l1I111I111111Il1II1lllIl1l1ll, 0);
    shift @IllI11I11ll11Ill111IlIlI111IIlI;
    $I1l1I111I111111Il1II1lllIl1l1ll = $IllI11I11ll11Ill111IlIlI111IIlI[0] || '';
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIl1ll1l1IIIlI1lIIl111I1II111ll {
    my $lI11I1l11I11l1I1l11IlIlIlIIlll1 = shift @_;
    my $llIl11Il1l11III1ll1IlI1l1Ill11I;
    my @IllI11I11ll11Ill111IlIlI111IIlI;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $I1l1I111I111111Il1II1lllIl1l1ll = llIlIlIlIlII1I111IIIl11lllI1lII();
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    if (not $I1l1I111I111111Il1II1lllIl1l1ll =~ /$l1lI1Il111I1IlI1II1IIII11lIlIll/) {
        $llIl11Il1l11III1ll1IlI1l1Ill11I = $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    else {
        @IllI11I11ll11Ill111IlIlI111IIlI = split(/$l1lI1Il111I1IlI1II1IIII11lIlIll/, $I1l1I111I111111Il1II1lllIl1l1ll, 0);
        $llIl11Il1l11III1ll1IlI1l1Ill11I = $IllI11I11ll11Ill111IlIlI111IIlI[0];
    }
    if ($lI11I1l11I11l1I1l11IlIlIlIIlll1 eq '') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $llIl11Il1l11III1ll1IlI1l1Ill11I;
    }
    else {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $llIl11Il1l11III1ll1IlI1l1Ill11I . $l1lI1Il111I1IlI1II1IIII11lIlIll . $lI11I1l11I11l1I1l11IlIlIlIIlll1;
    }
    lIIlIlIII1ll111l1IIIlI11IIl11I1 $l11lIIl111IIIIl1l1Il1l1lI1ll111;
}
sub I1Ill11IIllIlIIIIlI1Il1IIIIIl1l {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lII11Il1l111l1IIIlIl1lI111I111l;
    my $lI1II1lIIl11llllIIIl11I11lIllll = 'zyz';
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1llI1lIllI1IIlII1I11lII1lIIIll, $lll1lllll1Il111l1ll1lIl1llIlIlI) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  get|set|clear  [state_value]\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIllIIl11lIll1IIll1l1IIIllII1II();
        printf "$l11lIIl111IIIIl1l1Il1l1lI1ll111\n";
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        IIl1ll1l1IIIlI1lIIl111I1II111ll $lll1lllll1Il111l1ll1lIl1llIlIlI;
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'clear') {
        IIl1ll1l1IIIlI1lIIl111I1II111ll '';
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub IIl1lIlll1lIIll1I1Ill1I1lll11I1 {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @lll1Ill1l1IIlI1IIllIlllllllIllI;
    my $llI1I11lll111l1llI11lll1I11I111;
    my $Il1I1IIlIll1II11l1ll111I1lI1lll;
    my $lI1IlI1II1IIIlll1ll1l111ll1IlIl;
    my $IIllI1I1llllIllII1llII11Ill1111;
    my $I1l11Il1l11I1IlllII1llll1l11ll1;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1I1Ill1Ill1lI1l11lll1111lIII('sdr type fan -v ');
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    my(@III1l1l1IIll1IIlII111l1I1l1IIlI) = split(/Sensor ID/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
    shift @III1l1l1IIll1IIlII111l1I1l1IIlI;
    my @Il1lI1llllIII11Ill11111II11I1I1;
    foreach my $I11l111I11l1ll1lI11Il1II1ll1Ill (@III1l1l1IIll1IIlII111l1I1l1IIlI) {
        my @IIl1I1I11lIlll11II1111I11ll11ll;
        $I11l111I11l1ll1lI11Il1II1ll1Ill = 'Sensor ID' . $I11l111I11l1ll1lI11Il1II1ll1Ill;
        $llI1I11lll111l1llI11lll1I11I111 = '';
        $Il1I1IIlIll1II11l1ll111I1lI1lll = '';
        $lI1IlI1II1IIIlll1ll1l111ll1IlIl = '';
        $IIllI1I1llllIllII1llII11Ill1111 = '';
        $llI1I11lll111l1llI11lll1I11I111 = Il1ll11IllIIllIIIl11IIIIII1ll11('Sensor ID', $I11l111I11l1ll1lI11Il1II1ll1Ill);
        $Il1I1IIlIll1II11l1ll111I1lI1lll = Il1ll11IllIIllIIIl11IIIIII1ll11('Sensor Reading', $I11l111I11l1ll1lI11Il1II1ll1Ill);
        $IIllI1I1llllIllII1llII11Ill1111 = Il1ll11IllIIllIIIl11IIIIII1ll11('Upper critical', $I11l111I11l1ll1lI11Il1II1ll1Ill) || 0;
        $I1l11Il1l11I1IlllII1llll1l11ll1 = Il1ll11IllIIllIIIl11IIIIII1ll11('Normal Maximum', $I11l111I11l1ll1lI11Il1II1ll1Ill) || 0;
        $llI1I11lll111l1llI11lll1I11I111 = I11IllIl11lI1IIl1lIllllI1I1IIll(lI1l1IllIl11lI111lI1lIllll11ll1('\\(', $llI1I11lll111l1llI11lll1I11I111));
        $Il1I1IIlIll1II11l1ll111I1lI1lll = I11IllIl11lI1IIl1lIllllI1I1IIll(lI1l1IllIl11lI111lI1lIllll11ll1('\\(', $Il1I1IIlIll1II11l1ll111I1lI1lll));
        $IIllI1I1llllIllII1llII11Ill1111 = int $IIllI1I1llllIllII1llII11Ill1111;
        $IIllI1I1llllIllII1llII11Ill1111 = sprintf('%d', $IIllI1I1llllIllII1llII11Ill1111);
        $I1l11Il1l11I1IlllII1llll1l11ll1 = int $I1l11Il1l11I1IlllII1llll1l11ll1;
        $I1l11Il1l11I1IlllII1llll1l11ll1 = sprintf('%d', $I1l11Il1l11I1IlllII1llll1l11ll1);
        if ($Il1I1IIlIll1II11l1ll111I1lI1lll =~ /no reading/i) {
            $lI1IlI1II1IIIlll1ll1l111ll1IlIl = Illll1ll1IIII1ll1I11IllI1I1lI1I();
        }
        elsif ($Il1I1IIlIll1II11l1ll111I1lI1lll =~ /Disabled/i) {
            $lI1IlI1II1IIIlll1ll1l111ll1IlIl = lIl11IllI1llllIIll1I1Illl1IlIIl();
        }
        else {
            if ($ll1lll1l1l11IlII11lIlI1111ll111 eq 'C6220') {
                my $l11l1lllIIlIIIII11l1II1l1l1lll1 = $Il1I1IIlIll1II11l1ll111I1lI1lll / 16380 * 100;
                $lI1IlI1II1IIIlll1ll1l111ll1IlIl = sprintf('%d', $l11l1lllIIlIIIII11l1II1l1l1lll1);
            }
            elsif ($ll1lll1l1l11IlII11lIlI1111ll111 eq 'C8220') {
                my $l11l1lllIIlIIIII11l1II1l1l1lll1 = $Il1I1IIlIll1II11l1ll111I1lI1lll / 7500 * 100;
                $lI1IlI1II1IIIlll1ll1l111ll1IlIl = sprintf('%d', $l11l1lllIIlIIIII11l1II1l1l1lll1);
            }
            else {
                my $lII11llI1IllIllll1lIIl1lIII1lI1;
                $lII11llI1IllIllll1lIIl1lIII1lI1 = $IIllI1I1llllIllII1llII11Ill1111;
                if ($I1l11Il1l11I1IlllII1llll1l11ll1 > $IIllI1I1llllIllII1llII11Ill1111) {
                    $lII11llI1IllIllll1lIIl1lIII1lI1 = $I1l11Il1l11I1IlllII1llll1l11ll1;
                }
                my $l11l1lllIIlIIIII11l1II1l1l1lll1 = $Il1I1IIlIll1II11l1ll111I1lI1lll / $lII11llI1IllIllll1lIIl1lIII1lI1 * 100;
                $lI1IlI1II1IIIlll1ll1l111ll1IlIl = sprintf('%d', $l11l1lllIIlIIIII11l1II1l1l1lll1);
            }
            if ($lI1IlI1II1IIIlll1ll1l111ll1IlIl > 100) {
                $lI1IlI1II1IIIlll1ll1l111ll1IlIl = 100;
            }
        }
        push @IIl1I1I11lIlll11II1111I11ll11ll, $llI1I11lll111l1llI11lll1I11I111;
        push @IIl1I1I11lIlll11II1111I11ll11ll, $Il1I1IIlIll1II11l1ll111I1lI1lll;
        push @IIl1I1I11lIlll11II1111I11ll11ll, $IIllI1I1llllIllII1llII11Ill1111;
        push @IIl1I1I11lIlll11II1111I11ll11ll, $lI1IlI1II1IIIlll1ll1l111ll1IlIl;
        push @Il1lI1llllIII11Ill11111II11I1I1, \@IIl1I1I11lIlll11II1111I11ll11ll;
    }
    return \@Il1lI1llllIII11Ill11111II11I1I1;
}
sub I1l111lll1lIIIl11l1ll1Il11llllI {
    my $IIII1IIllllIll1Il1l11I111IIlIlI = 0;
    my $IIIIlI11llI1lII1I1l1IIl1llIll11 = 0;
    my $llI111llIlI1lI11IIl1l1IIIIIll1I;
    my $I11Il1IlllI1Il1I1IlII1ll1IIll1l = IIl1lIlll1lIIll1I1Ill1I1lll11I1();
    foreach my $I11I11lIl1l11IlI1IIlIIIIIIl1l1l (@$I11Il1IlllI1Il1I1IlII1ll1IIll1l) {
        my(@l1lII1l11I1lIlIl1lllIlllII11111) = @$I11I11lIl1l11IlI1IIlIIIIIIl1l1l;
        if (II1l11l111l1ll1l1l1IllIl1I1I1ll $l1lII1l11I1lIlIl1lllIlllII11111[3]) {
            return Illll1ll1IIII1ll1I11IllI1I1lI1I();
        }
        if (lI1I1llll1I1Il1111Il1I11IlIlIII $l1lII1l11I1lIlIl1lllIlllII11111[3]) {
            return lIl11IllI1llllIIll1I1Illl1IlIIl();
        }
        $IIIIlI11llI1lII1I1l1IIl1llIll11 += $l1lII1l11I1lIlIl1lllIlllII11111[3];
        ++$IIII1IIllllIll1Il1l11I111IIlIlI;
    }
    $llI111llIlI1lI11IIl1l1IIIIIll1I = $IIIIlI11llI1lII1I1l1IIl1llIll11 / $IIII1IIllllIll1Il1l11I111IIlIlI;
    $llI111llIlI1lI11IIl1l1IIIIIll1I = sprintf('%d', $llI111llIlI1lI11IIl1l1IIIIIll1I);
    return $llI111llIlI1lI11IIl1l1IIIIIll1I;
}
sub l1l11I111ll111IIlIl1Ill1I1lll11 {
    my $II1ll1l1l1llll1lll11I1Ill1I11Il = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my @lIII111ll1IIl11IIIlIlIIll1lI1Il;
    my $II11IIIIIIlII111I11lIl1I1IlIlII;
    my $IllI1IIll1IIlllIIl1Il11111II11l;
    my $I111lI11llIlII1Il111111Il1lIIIl;
    my $II1l111II11l1lI111I1l1II1IllIIl;
    my $Il1IlIIIIlI1l1l1I11l11l11II1Il1;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1I1Ill1Ill1lI1l11lll1111lIII(qq[sdr type "$II1ll1l1l1llll1lll11I1Ill1I11Il" ]);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $II1ll1l1l1llll1lll11I1Ill1I11Il = lc $II1ll1l1l1llll1lll11I1Ill1I11Il;
    my(@lll1Ill1l1IIlI1IIllIlllllllIllI) = split(/\n/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
    foreach my $lIIIlIl1ll1111IllIIllIlllllI1I1 (@lll1Ill1l1IIlI1IIllIlllllllIllI) {
        $lIIIlIl1ll1111IllIIllIlllllI1I1 = l1Illl1llII111l1Il11Il111l1Illl($lIIIlIl1ll1111IllIIllIlllllI1I1);
        @lIII111ll1IIl11IIIlIlIIll1lI1Il = split(/\|/, $lIIIlIl1ll1111IllIIllIlllllI1I1, 0);
        $II11IIIIIIlII111I11lIl1I1IlIlII = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII111ll1IIl11IIIlIlIIll1lI1Il[0]);
        $IllI1IIll1IIlllIIl1Il11111II11l = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII111ll1IIl11IIIlIlIIll1lI1Il[1]);
        $I111lI11llIlII1Il111111Il1lIIIl = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII111ll1IIl11IIIlIlIIll1lI1Il[2]);
        $II1l111II11l1lI111I1l1II1IllIIl = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII111ll1IIl11IIIlIlIIll1lI1Il[3]);
        $Il1IlIIIIlI1l1l1I11l11l11II1Il1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII111ll1IIl11IIIlIlIIll1lI1Il[4]);
        $Il1IlIIIIlI1l1l1I11l11l11II1Il1 =~ s/,/|/g;
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = sprintf("ipmi,%s,%s,%s,%s,%s\n", $II1ll1l1l1llll1lll11I1Ill1I11Il, $IllI1IIll1IIlllIIl1Il11111II11l, $II11IIIIIIlII111I11lIl1I1IlIlII, $Il1IlIIIIlI1l1l1I11l11l11II1Il1, $I111lI11llIlII1Il111111Il1lIIIl);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = lc $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        $I1l1I111I111111Il1II1lllIl1l1ll .= $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llI111lIIllllll1III11IlI11IlI1I {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $lIll1IlII11IIl1IlII1II11lI1I1l1 = shift @_;
    my $III1l111l1lI111IlII1I1l1Il1l1Il = shift @_;
    my @lll1Ill1l1IIlI1IIllIlllllllIllI;
    my @lIII111ll1IIl11IIIlIlIIll1lI1Il;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = '';
    my $lll1lIIll1IlllII1IlII1lIllll1lI = '';
    @lll1Ill1l1IIlI1IIllIlllllllIllI = split(/\n/, $lIl1II11I1llIIII1I1lIlIllI111I1, 0);
    foreach my $lIIIlIl1ll1111IllIIllIlllllI1I1 (@lll1Ill1l1IIlI1IIllIlllllllIllI) {
        $lll1lIIll1IlllII1IlII1lIllll1lI = '';
        $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = '';
        my($Ill111IIII1I1I1ll11IIl1lIl11Ill, $II1I1I1I11lllI1III1I1IIIl1lIIII, $IllI1IIll1IIlllIIl1Il11111II11l, $II11IIIIIIlII111I11lIl1I1IlIlII, $Il1IlIIIIlI1l1l1I11l11l11II1Il1, $I111lI11llIlII1Il111111Il1lIIIl) = split(/,/, $lIIIlIl1ll1111IllIIllIlllllI1I1, 7);
        if ($Ill111IIII1I1I1ll11IIl1lIl11Ill ne 'ipmi') {
            print "not ipmi\n";
            $I1l1I111I111111Il1II1lllIl1l1ll .= "$lIIIlIl1ll1111IllIIllIlllllI1I1" . "\n";
            next;
        }
        $IllI1IIll1IIlllIIl1Il11111II11l =~ s/h//g;
        $IllI1IIll1IIlllIIl1Il11111II11l = '0x' . $IllI1IIll1IIlllIIl1Il11111II11l;
        if ($II1I1I1I11lllI1III1I1IIIl1lIIII eq 'fan') {
            $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = 'fan';
        }
        if ($II1I1I1I11lllI1III1I1IIIl1lIIII eq 'temperature') {
            $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = 'temp';
        }
        if ($II1I1I1I11lllI1III1I1IIIl1lIIII eq 'voltage') {
            $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = 'volt';
        }
        if ($II1I1I1I11lllI1III1I1IIIl1lIIII eq 'power supply') {
            $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = 'psu';
        }
        if ($II1I1I1I11lllI1III1I1IIIl1lIIII eq 'power unit') {
            $IIlIIllIl1lIIl1lIIIlI1II1l11IIl = 'psu';
        }
        if ($lIll1IlII11IIl1IlII1II11lI1I1l1 =~ /inject/i) {
            $I111lI11llIlII1Il111111Il1lIIIl = $III1l111l1lI111IlII1I1l1Il1l1Il;
        }
        if ($I111lI11llIlII1Il111111Il1lIIIl eq 'ok' or $I111lI11llIlII1Il111111Il1lIIIl eq 'ns') {
            $lll1lIIll1IlllII1IlII1lIllll1lI = 'Ok';
        }
        else {
            $lll1lIIll1IlllII1IlII1lIllll1lI = 'Alert';
        }
        $I1l1I111I111111Il1II1lllIl1l1ll .= "$Ill111IIII1I1I1ll11IIl1lIl11Ill,$II1I1I1I11lllI1III1I1IIIl1lIIII,$IllI1IIll1IIlllIIl1Il11111II11l,$II11IIIIIIlII111I11lIl1I1IlIlII,$Il1IlIIIIlI1l1l1I11l11l11II1Il1,$I111lI11llIlII1Il111111Il1lIIIl,$IIlIIllIl1lIIl1lIIIlI1II1l11IIl" . $lll1lIIll1IlllII1IlII1lIllll1lI . "\n";
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub llIlll1l1IllllIIIII11IllIlIllI1 {
    my $II111IIlll1111lIIIl11l111111III = shift @_;
    my $I11l11IlIlllIlI1lI1Il1II1I1l1II = shift @_;
    my $lIIlIlIlllII1I1IIlI111IlIl1I1II = shift @_;
    my $lI1IIIlIlll11lll1lI1Il1I1Ill1I1 = shift @_;
    my $Illll1II1lII11IIIlI1Illl11llI11 = shift @_;
    my $lIIl1l1l11l1lIl111lIllIl1l11lI1 = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $IlllIIlI11lIlII11I1I11lIlIl11lI;
    $IlllIIlI11lIlII11I1I11lIlIl11lI = 'Ok';
    if ($Illll1II1lII11IIIlI1Illl11llI11) {
        $IlllIIlI11lIlII11I1I11lIlIl11lI = 'Full';
    }
    elsif ($lI1IIIlIlll11lll1lI1Il1I1Ill1I1) {
        $IlllIIlI11lIlII11I1I11lIlIl11lI = 'AlmostFull';
    }
    $I1l1I111I111111Il1II1lllIl1l1ll = sprintf('ipmi,sel log,%s,%s,%s,%s,sel%s', $II111IIlll1111lIIIl11l111111III, $I11l11IlIlllIlI1lI1Il1II1I1l1II, $lIIlIlIlllII1I1IIlI111IlIl1I1II, $lIIl1l1l11l1lIl111lIllIl1l11lI1, $IlllIIlI11lIlII11I1I11lIlIl11lI);
    $I1l1I111I111111Il1II1lllIl1l1ll .= "\n";
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub III1lllllI11lII11l1I11I111lllI1 {
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $lIll1IlII11IIl1IlII1II11lI1I1l1 = shift @_ || '';
    my $lIIIlIII111IllIl1l11IIl1lll1IIl = shift @_ || '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = '';
    my $I11llI1I1ll1IlllllI1II1IIII1lll;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= l1l11I111ll111IIlIl1Ill1I1lll11('Fan');
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= l1l11I111ll111IIlIl1Ill1I1lll11('Temperature');
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= l1l11I111ll111IIlIl1Ill1I1lll11('Voltage');
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6100') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= l1l11I111ll111IIlIl1Ill1I1lll11('Power Unit');
    }
    else {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= l1l11I111ll111IIlIl1Ill1I1lll11('Power Supply');
    }
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = llI111lIIllllll1III11IlI11IlI1I($l11lIIl111IIIIl1l1Il1l1lI1ll111, $lIll1IlII11IIl1IlII1II11lI1I1l1, $lIIIlIII111IllIl1l11IIl1lll1IIl);
    my($II111IIlll1111lIIIl11l111111III, $I11l11IlIlllIlI1lI1Il1II1I1l1II, $lIIlIlIlllII1I1IIlI111IlIl1I1II, $lI1IIIlIlll11lll1lI1Il1I1Ill1I1, $Illll1II1lII11IIIlI1Illl11llI11, $lIIl1l1l11l1lIl111lIllIl1l11lI1) = IIIIIII1l111lll1lll1II1llI11IIl();
    $I11llI1I1ll1IlllllI1II1IIII1lll = llIlll1l1IllllIIIII11IllIlIllI1($II111IIlll1111lIIIl11l111111III, $I11l11IlIlllIlI1lI1Il1II1I1l1II, $lIIlIlIlllII1I1IIlI111IlIl1I1II, $lI1IIIlIlll11lll1lI1Il1I1Ill1I1, $Illll1II1lII11IIIlI1Illl11llI11, $lIIl1l1l11l1lIl111lIllIl1l11lI1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $I11llI1I1ll1IlllllI1II1IIII1lll . $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111";
}
sub IIIlI11II1lllI1I1111II1I1lllI11 {
    my @I1Il111IIlll1lllII1I1I111II1lII;
    my $lIIIlIl1ll1111IllIIllIlllllI1I1 = shift @_;
    my $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 = shift @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll = 1;
    my $l1I1111I1IIl1lIIIIIIl11IlIIlllI = 0;
    $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII1I1ll1IIl1l1I1lI1IlI1l1I111);
    if ($l1I1111I1IIl1lIIIIIIl11IlIIlllI) {
        print "line: $lIIIlIl1ll1111IllIIllIlllllI1I1\n";
        print "rule: $lIII1I1ll1IIl1l1I1lI1IlI1l1I111\n";
    }
    if ($lIII1I1ll1IIl1l1I1lI1IlI1l1I111 eq '') {
        $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    }
    @I1Il111IIlll1lllII1I1I111II1lII = split(/{{&&}}/, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111, 0);
    foreach my $lIllIl1I111llI1lIlllllIIIIl1llI (@I1Il111IIlll1lllII1I1I111II1lII) {
        $lIllIl1I111llI1lIlllllIIIIl1llI = I11IllIl11lI1IIl1lIllllI1I1IIll($lIllIl1I111llI1lIlllllIIIIl1llI);
        if (index($lIIIlIl1ll1111IllIIllIlllllI1I1, $lIllIl1I111llI1lIlllllIIIIl1llI) < 0) {
            $I1l1I111I111111Il1II1lllIl1l1ll = 0;
        }
    }
    print "match:$I1l1I111I111111Il1II1lllIl1l1ll\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lllI1IlllI1I11Il1I11l1lIlIlIl11 {
    my $l11lIl1IlI11IIlllI11l11ll1111lI = shift @_;
    my $lll11IIlIllIl1IllIllllI1l111lIl = 'crit';
    my $i;
    my $lIII1I1ll1IIl1l1I1lI1IlI1l1I111;
    my $l1I1111I1IIl1lIIIIIIl11IlIIlllI = 0;
    if ($l1I1111I1IIl1lIIIIIIl11IlIIlllI) {
        printf "crit rules:  %d \n", $#llIlII11I111I11lIII1l1lIl1lIlll + 1;
        printf "warn rules:  %d \n", $#I1I1II11ll1lI1lI1ll1111Il1l1ll1 + 1;
        printf "info rules:  %d \n", $#Ill11II1l1II11IlIlIll1l11l11l11 + 1;
        printf "ign  rules:  %d \n", $#IllIlI11lllIIlIllIll1IIlIIl1IIl + 1;
    }
    if ($#llIlII11I111I11lIII1l1lIl1lIlll >= 0) {
        $i = 0;
        foreach $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 (@llIlII11I111I11lIII1l1lIl1lIlll) {
            print "\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
            ++$i;
            if (IIIlI11II1lllI1I1111II1I1lllI11($l11lIl1IlI11IIlllI11l11ll1111lI, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111) != 0) {
                $lll11IIlIllIl1IllIllllI1l111lIl = 'CRIT';
                print "*** matched CRIT $i :: $lIII1I1ll1IIl1l1I1lI1IlI1l1I111\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
                return $lll11IIlIllIl1IllIllllI1l111lIl;
            }
        }
    }
    if ($#I1I1II11ll1lI1lI1ll1111Il1l1ll1 >= 0) {
        $i = 0;
        foreach $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 (@I1I1II11ll1lI1lI1ll1111Il1l1ll1) {
            print "\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
            ++$i;
            if (IIIlI11II1lllI1I1111II1I1lllI11($l11lIl1IlI11IIlllI11l11ll1111lI, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111) != 0) {
                $lll11IIlIllIl1IllIllllI1l111lIl = 'WARN';
                print "*** matched WARN $i :: $lIII1I1ll1IIl1l1I1lI1IlI1l1I111\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
                return $lll11IIlIllIl1IllIllllI1l111lIl;
            }
        }
    }
    if ($#Ill11II1l1II11IlIlIll1l11l11l11 >= 0) {
        $i = 0;
        foreach $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 (@Ill11II1l1II11IlIlIll1l11l11l11) {
            print "\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
            ++$i;
            if (IIIlI11II1lllI1I1111II1I1lllI11($l11lIl1IlI11IIlllI11l11ll1111lI, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111) != 0) {
                $lll11IIlIllIl1IllIllllI1l111lIl = 'INFO';
                print "*** matched INFO $i :: $lIII1I1ll1IIl1l1I1lI1IlI1l1I111\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
                return $lll11IIlIllIl1IllIllllI1l111lIl;
            }
        }
    }
    if ($#IllIlI11lllIIlIllIll1IIlIIl1IIl >= 0) {
        $i = 0;
        foreach $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 (@IllIlI11lllIIlIllIll1IIlIIl1IIl) {
            print "\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
            ++$i;
            if (IIIlI11II1lllI1I1111II1I1lllI11($l11lIl1IlI11IIlllI11l11ll1111lI, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111) != 0) {
                $lll11IIlIllIl1IllIllllI1l111lIl = 'XXXX';
                print "*** matched IGNORE $i :: $lIII1I1ll1IIl1l1I1lI1IlI1l1I111\n" if $l1I1111I1IIl1lIIIIIIl11IlIIlllI;
                return $lll11IIlIllIl1IllIllllI1l111lIl;
            }
        }
    }
    return $lll11IIlIllIl1IllIllllI1l111lIl;
}
sub lII11II11I11IIlI11l1111IIIIl11I {
    my $lIlllIlI1llIlI1l1l1IlIII111llII;
    my $llI1I11lll111l1llI11lll1I11I111;
    my @l1II11l1l1III1l1IlllIIll1I1lIll;
    my $lll11IIlIllIl1IllIllllI1l111lIl;
    my $lIII1I1ll1IIl1l1I1lI1IlI1l1I111;
    @IllIlI11lllIIlIllIll1IIlIIl1IIl = ();
    @Ill11II1l1II11IlIlIll1l11l11l11 = ();
    @I1I1II11ll1lI1lI1ll1111Il1l1ll1 = ();
    @llIlII11I111I11lIII1l1lIl1lIlll = ();
    $llI1I11lll111l1llI11lll1I11I111 = './bmc.selfilter.' . IIIl1IIlIIIlll1l1I1I1l1llI111lI($IllII1l1IIIIlI1ll1IIlI1IIll1ll1);
    if (not -e "$llI1I11lll111l1llI11lll1I11I111") {
        $llI1I11lll111l1llI11lll1I11I111 = $lll1I1lIIl11I1l1I1IIII1ll1I1111 . 'bmc.selfilter.' . IIIl1IIlIIIlll1l1I1I1l1llI111lI($IllII1l1IIIIlI1ll1IIlI1IIll1ll1);
    }
    if (not -e "$llI1I11lll111l1llI11lll1I11I111") {
        print "\n";
        print "Could not find SEL filter rules file for platform $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 in current directory\n";
        print "or in default location: $llI1I11lll111l1llI11lll1I11I111 \n";
        print "\n";
        print "See the README and the rules file for short instructions regarding how to configure\n";
        print "this.  (It's very quick to set up.)\n";
        print "\n";
        exit 1;
    }
    if (-e "$llI1I11lll111l1llI11lll1I11I111") {
        die "\nError: could not open file: $llI1I11lll111l1llI11lll1I11I111\n\n" unless open MYFILE, $llI1I11lll111l1llI11lll1I11I111;
        while (defined($_ = <MYFILE>)) {
            $lIlllIlI1llIlI1l1l1IlIII111llII = I11IllIl11lI1IIl1lIllllI1I1IIll($_);
            if ($lIlllIlI1llIlI1l1l1IlIII111llII eq '') {
                next;
            }
            if ($lIlllIlI1llIlI1l1l1IlIII111llII =~ /^#/) {
                next;
            }
            $lll11IIlIllIl1IllIllllI1l111lIl = lI1l1IllIl11lI111lI1lIllll11ll1(',', $lIlllIlI1llIlI1l1l1IlIII111llII);
            $lll11IIlIllIl1IllIllllI1l111lIl = I11IllIl11lI1IIl1lIllllI1I1IIll($lll11IIlIllIl1IllIllllI1l111lIl);
            $lll11IIlIllIl1IllIllllI1l111lIl = IIIl1IIlIIIlll1l1I1I1l1llI111lI($lll11IIlIllIl1IllIllllI1l111lIl);
            if (not $lll11IIlIllIl1IllIllllI1l111lIl eq 'ignore' || $lll11IIlIllIl1IllIllllI1l111lIl eq 'info' || $lll11IIlIllIl1IllIllllI1l111lIl eq 'warn' || $lll11IIlIllIl1IllIllllI1l111lIl eq 'crit') {
                print "invalid severity text : $lll11IIlIllIl1IllIllllI1l111lIl \n";
                next;
            }
            $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 = I1I1lII1I1lllI1111Il11II1I111II(',', $lIlllIlI1llIlI1l1l1IlIII111llII);
            $lIII1I1ll1IIl1l1I1lI1IlI1l1I111 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIII1I1ll1IIl1l1I1lI1IlI1l1I111);
            if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'ignore') {
                push @IllIlI11lllIIlIllIll1IIlIIl1IIl, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111;
            }
            if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'info') {
                push @Ill11II1l1II11IlIlIll1l11l11l11, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111;
            }
            if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'warn') {
                push @I1I1II11ll1lI1lI1ll1111Il1l1ll1, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111;
            }
            if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'crit') {
                push @llIlII11I111I11lIII1l1lIl1lIlll, $lIII1I1ll1IIl1l1I1lI1IlI1l1I111;
            }
        }
        close MYFILE;
    }
}
sub l1lIl1l1I11lII1lI111I1lI1II1Ill {
    my $IlllI1ll1l11IIlllII11lIl1lI11l1 = shift @_;
    my $llII111IIlIl1I1Ill111l1111Il1I1 = shift @_ || '';
    my $lIIIlIl1ll1111IllIIllIlllllI1I1;
    my @lll1Ill1l1IIlI1IIllIlllllllIllI;
    my $lll11IIlIllIl1IllIllllI1l111lIl;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $I1I1lIll1l11IlII1111lllIl1llIIl;
    my $I1lII11IlIl1I1llIlII11IIlII1III = 1;
    my $IIlIll1lIII1IIIl111l1l1llIIII11 = 1;
    my $Il1llI1IlI111II1llI1l11ll1lIllI = 1;
    my $Il1l1lIlI1IllIl1I1Illl1lII1l1lI = 1;
    $llII111IIlIl1I1Ill111l1111Il1I1 = I11IllIl11lI1IIl1lIllllI1I1IIll($llII111IIlIl1I1Ill111l1111Il1I1);
    $llII111IIlIl1I1Ill111l1111Il1I1 = IIIl1IIlIIIlll1l1I1I1l1llI111lI($llII111IIlIl1I1Ill111l1111Il1I1);
    if ($llII111IIlIl1I1Ill111l1111Il1I1 eq 'info') {
        $I1lII11IlIl1I1llIlII11IIlII1III = 0;
        $IIlIll1lIII1IIIl111l1l1llIIII11 = 1;
        $Il1llI1IlI111II1llI1l11ll1lIllI = 1;
        $Il1l1lIlI1IllIl1I1Illl1lII1l1lI = 1;
    }
    if ($llII111IIlIl1I1Ill111l1111Il1I1 eq 'warn') {
        $I1lII11IlIl1I1llIlII11IIlII1III = 0;
        $IIlIll1lIII1IIIl111l1l1llIIII11 = 0;
        $Il1llI1IlI111II1llI1l11ll1lIllI = 1;
        $Il1l1lIlI1IllIl1I1Illl1lII1l1lI = 1;
    }
    if ($llII111IIlIl1I1Ill111l1111Il1I1 eq 'crit') {
        $I1lII11IlIl1I1llIlII11IIlII1III = 0;
        $IIlIll1lIII1IIIl111l1l1llIIII11 = 0;
        $Il1llI1IlI111II1llI1l11ll1lIllI = 0;
        $Il1l1lIlI1IllIl1I1Illl1lII1l1lI = 1;
    }
    @lll1Ill1l1IIlI1IIllIlllllllIllI = split(/\n/, $IlllI1ll1l11IIlllII11lIl1lI11l1, 0);
    foreach my $lIIIlIl1ll1111IllIIllIlllllI1I1 (@lll1Ill1l1IIlI1IIllIlllllllIllI) {
        $lIIIlIl1ll1111IllIIllIlllllI1I1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIIIlIl1ll1111IllIIllIlllllI1I1);
        if ($lIIIlIl1ll1111IllIIllIlllllI1I1 eq '') {
            next;
        }
        $lll11IIlIllIl1IllIllllI1l111lIl = lllI1IlllI1I11Il1I11l1lIlIlIl11($lIIIlIl1ll1111IllIIllIlllllI1I1);
        $I1I1lIll1l11IlII1111lllIl1llIIl = 1;
        if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'crit' or $lll11IIlIllIl1IllIllllI1l111lIl eq 'CRIT') {
            $I1I1lIll1l11IlII1111lllIl1llIIl = $Il1l1lIlI1IllIl1I1Illl1lII1l1lI;
        }
        if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'WARN') {
            $I1I1lIll1l11IlII1111lllIl1llIIl = $Il1llI1IlI111II1llI1l11ll1lIllI;
        }
        if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'INFO') {
            $I1I1lIll1l11IlII1111lllIl1llIIl = $IIlIll1lIII1IIIl111l1l1llIIII11;
        }
        if ($lll11IIlIllIl1IllIllllI1l111lIl eq 'XXXX') {
            $I1I1lIll1l11IlII1111lllIl1llIIl = $I1lII11IlIl1I1llIlII11IIlII1III;
        }
        if ($I1I1lIll1l11IlII1111lllIl1llIIl) {
            $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf("$lll11IIlIllIl1IllIllllI1l111lIl | $lIIIlIl1ll1111IllIIllIlllllI1I1\n");
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lI1IlIIII1lI1llIl11l1ll111I11ll {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $I1I11lll11lIlI11l1lllIl11l1l1I1 = shift @_;
    my $llII111IIlIl1I1Ill111l1111Il1I1 = shift @_ || 'all';
    my $lI1lIIl1l1lII1I11Illll1l1l11ll1;
    my $IllIIIIIll1ll1I1lIIllIIIlIIIlI1;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  num_most_recent_entries|all  [all|info|warn|crit]  \n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1I11lll11lIlI11l1lllIl11l1l1I1 eq 'all') {
        $lI1lIIl1l1lII1I11Illll1l1l11ll1 = IlI1I1Ill1Ill1lI1l11lll1111lIII('sel list');
    }
    else {
        $lI1lIIl1l1lII1I11Illll1l1l11ll1 = IlI1I1Ill1Ill1lI1l11lll1111lIII("sel list last $I1I11lll11lIlI11l1lllIl11l1l1I1 ");
    }
    lII11II11I11IIlI11l1111IIIIl11I ;
    $IllIIIIIll1ll1I1lIIllIIIlIIIlI1 = l1lIl1l1I11lII1lI111I1lI1II1Ill($lI1lIIl1l1lII1I11Illll1l1l11ll1, $llII111IIlIl1I1Ill111l1111Il1I1);
    print "$IllIIIIIll1ll1I1lIIllIIIlIIIlI1\n";
}
sub l1I1IIIll11llll1l1Il1IIl11ll1II {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $llII111IIlIl1I1Ill111l1111Il1I1 = shift @_ || 'all';
    my $lI1lIIl1l1lII1I11Illll1l1l11ll1;
    my $IllIIIIIll1ll1I1lIIllIIIlIIIlI1;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  [all|info|warn|crit]  \n";
        printf "\n";
        printf "This function affixes a severity to each SEL line, based on the rules file (usually\n";
        printf "bmc.selfilter.PLATFORM).\n";
        printf "\n";
        printf "Only SEL errors exceeding the specified level will be shown.\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    $lI1lIIl1l1lII1I11Illll1l1l11ll1 = IlI1I1Ill1Ill1lI1l11lll1111lIII('sel list');
    lII11II11I11IIlI11l1111IIIIl11I ;
    $IllIIIIIll1ll1I1lIIllIIIlIIIlI1 = l1lIl1l1I11lII1lI111I1lI1II1Ill($lI1lIIl1l1lII1I11Illll1l1l11ll1, $llII111IIlIl1I1Ill111l1111Il1I1);
    print "\n";
    print "$IllIIIIIll1ll1I1lIIllIIIlIIIlI1\n";
}
sub ll111llIIl1ll1ll1Ill1llIl1Il1I1 {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $llI1I11lll111l1llI11lll1I11I111 = shift @_;
    my $llII111IIlIl1I1Ill111l1111Il1I1 = shift @_ || 'all';
    my $lI1lIIl1l1lII1I11Illll1l1l11ll1 = '';
    my $IllIIIIIll1ll1I1lIIllIIIlIIIlI1;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  sel_log_filename  [all|info|warn|crit]  \n";
        printf "\n";
        printf "This function reads a SEL log from a file and affixes a severity to each SEL line,\n";
        printf "based on the rules file (usually bmc.selfilter.PLATFORM).\n";
        printf "\n";
        printf "Only SEL errors exceeding the specified level will be shown.\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    die "\nError: could not open file: $llI1I11lll111l1llI11lll1I11I111\n\n" unless open MYFILE, $llI1I11lll111l1llI11lll1I11I111;
    while (defined($_ = <MYFILE>)) {
        $lI1lIIl1l1lII1I11Illll1l1l11ll1 .= $_;
    }
    lII11II11I11IIlI11l1111IIIIl11I ;
    $IllIIIIIll1ll1I1lIIllIIIlIIIlI1 = l1lIl1l1I11lII1lI111I1lI1II1Ill($lI1lIIl1l1lII1I11Illll1l1l11ll1, $llII111IIlIl1I1Ill111l1111Il1I1);
    print "$IllIIIIIll1ll1I1lIIllIIIlIIIlI1\n";
}
sub IIIIIII1l111lll1lll1II1llI11IIl {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $II111IIlll1111lIIIl11l111111III;
    my $I11l11IlIlllIlI1lI1Il1II1I1l1II;
    my $lIIlIlIlllII1I1IIlI111IlIl1I1II;
    my $lI1IIIlIlll11lll1lI1Il1I1Ill1I1 = 0;
    my $Illll1II1lII11IIIlI1Illl11llI11 = 0;
    my $lIIl1l1l11l1lIl111lIllIl1l11lI1;
    my $x;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1I1Ill1Ill1lI1l11lll1111lIII('sel info');
    $II111IIlll1111lIIIl11l111111III = Il1ll11IllIIllIIIl11IIIIII1ll11('Entries', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $I11l11IlIlllIlI1lI1Il1II1I1l1II = Il1ll11IllIIllIIIl11IIIIII1ll11(' of Alloc Units', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $lIIlIlIlllII1I1IIlI111IlIl1I1II = Il1ll11IllIIllIIIl11IIIIII1ll11('Percent Used', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $lIIlIlIlllII1I1IIlI111IlIl1I1II = lI1l1IllIl11lI111lI1lIllll11ll1('%', $lIIlIlIlllII1I1IIlI111IlIl1I1II);
    $x = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'Last Add Time', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $lIIl1l1l11l1lIl111lIllIl1l11lI1 = I1I1lII1I1lllI1111Il11II1I111II(':', $x);
    $lIIl1l1l11l1lIl111lIllIl1l11lI1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIIl1l1l11l1lIl111lIllIl1l11lI1);
    $lIIl1l1l11l1lIl111lIllIl1l11lI1 = I11111ll11I111lIl1Il1III111lIII($lIIl1l1l11l1lIl111lIllIl1l11lI1);
    if ($lIIlIlIlllII1I1IIlI111IlIl1I1II > 75) {
        $lI1IIIlIlll11lll1lI1Il1I1Ill1I1 = 1;
    }
    if ($lIIlIlIlllII1I1IIlI111IlIl1I1II > 99) {
        $Illll1II1lII11IIIlI1Illl11llI11 = 1;
    }
    return $II111IIlll1111lIIIl11l111111III, $I11l11IlIlllIlI1lI1Il1II1I1l1II, $lIIlIlIlllII1I1IIlI111IlIl1I1II, $lI1IIIlIlll11lll1lI1Il1I1Ill1I1, $Illll1II1lII11IIIlI1Illl11llI11, $lIIl1l1l11l1lIl111lIllIl1l11lI1;
}
sub lIIlI1Il1ll1l1l1llIlIII1IllIIll {
    my($II111IIlll1111lIIIl11l111111III, $I11l11IlIlllIlI1lI1Il1II1I1l1II, $lIIlIlIlllII1I1IIlI111IlIl1I1II, $lI1IIIlIlll11lll1lI1Il1I1Ill1I1, $Illll1II1lII11IIIlI1Illl11llI11, $lIIl1l1l11l1lIl111lIllIl1l11lI1) = IIIIIII1l111lll1lll1II1llI11IIl();
    printf "%s / %s ( %d%% ) almostfull: %d   full: %d  last_add_time: %s \n", $II111IIlll1111lIIIl11l111111III, $I11l11IlIlllIlI1lI1Il1II1I1l1II, $lIIlIlIlllII1I1IIlI111IlIl1I1II, $lI1IIIlIlll11lll1lI1Il1I1Ill1I1, $Illll1II1lII11IIIlI1Illl11llI11, $lIIl1l1l11l1lIl111lIllIl1l11lI1;
    return;
}
sub lIIlIll1l1l1IIllIIIIllllll1IIll {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $IIlI1l1IlIl1Il1l11l1lll1Il111II;
    my $i;
    my $l1IIl111I1I111lI111l1l1l1I1IIIl;
    my $I1Il1I11I1ll1ll1IIIl1Il1I1I1lII;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $I1llI1lIllI1IIlII1I11lII1lIIIll = shift @_;
    my $Ill111l1l1II1ll1lIlIIIlII11III1 = shift @_;
    my $I1IlllI111lIlll1II1ll1IlIIllllI = shift @_;
    my $IIllIlI111IlI1II1lII1lllIlI1l11 = shift @_;
    my $IIll111IllI1Ill1IIlIl1II11Il1l1 = shift @_;
    my $I111lIlIIl11lll1lIII1lI1111I1I1 = join(' ', @_);
    my @llIIIIl11IIl11lII1IlI11IIl1Il11;
    my $III1llIIll1lIIlIIl1l1lI1111II11;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 6) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  get|set cfg_id  att_id  tbl_id  field_width  [data_to_set]\n";
        printf "\n";
        printf "     Field width of zero implies that the field is variable-length (as compared to\n";
        printf "     a 1-4 byte fixed width field\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    $Ill111l1l1II1ll1lIlIIIlII11III1 = l111lII111IIlIlIl1IlII1IllIlllI($Ill111l1l1II1ll1lIlIIIlII11III1);
    $I1IlllI111lIlll1II1ll1IlIIllllI = l111lII111IIlIlIl1IlII1IllIlllI($I1IlllI111lIlll1II1ll1IlIIllllI);
    $IIllIlI111IlI1II1lII1lllIlI1l11 = l111lII111IIlIlIl1IlII1IllIlllI($IIllIlI111IlI1II1lII1lllIlI1l11);
    if ($IIll111IllI1Ill1IIlIl1II11Il1l1 > 4) {
        $IIll111IllI1Ill1IIlIl1II11Il1l1 = 0;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = II1lIIIllIllIll1Ill11lIIl1l1IlI($Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1);
        if ($IIll111IllI1Ill1IIlIl1II11Il1l1 == 0) {
            printf "as hex:      %s\n", $l11lIIl111IIIIl1l1Il1l1lI1ll111;
            $l1IIl111I1I111lI111l1l1l1I1IIIl = llll11IIIlI11lI1Il1I11I1lII11lI($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            printf "as ASCII:    %s\n", $l1IIl111I1I111lI111l1l1l1I1IIIl;
        }
        else {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            printf "as hex:      %s\n", $l11lIIl111IIIIl1l1Il1l1lI1ll111;
            $I1Il1I11I1ll1ll1IIIl1Il1I1I1lII = II11IIl1ll1Il1Ill1I1IIl1II1Ill1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            printf "as a number: %d\n", $I1Il1I11I1ll1ll1IIIl1Il1I1I1lII;
        }
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        if ($IIll111IllI1Ill1IIlIl1II11Il1l1 == 0) {
            my $Il111II1IIlIl1l11111II1llIlI1l1 = ll1111llIIIIl11lIIlIl11llIll1l1($I111lIlIIl11lll1lIII1lI1111I1I1, $IllI1IlIll111lI11lI1I111lIlllll);
            l11IllIlII1IlI1lIII1I1IIllII1lI $Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $Il111II1IIlIl1l11111II1llIlI1l1;
        }
        else {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($I111lIlIIl11lll1lIII1lI1111I1I1);
            @llIIIIl11IIl11lII1IlI11IIl1Il11 = split(/\s+/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
            $III1llIIll1lIIlIIl1l1lI1111II11 = $#llIIIIl11IIl11lII1IlI11IIl1Il11 + 1;
            if ($IIll111IllI1Ill1IIlIl1II11Il1l1 == 4 and $III1llIIll1lIIlIIl1l1lI1111II11 == 4) {
                $l11lIIl111IIIIl1l1Il1l1lI1ll111 = '';
                foreach $i (0 .. $#llIIIIl11IIl11lII1IlI11IIl1Il11) {
                    $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= I1III1I11ll1lII1l11l1llI1l111ll($llIIIIl11IIl11lII1IlI11IIl1Il11[$i], 1);
                    if ($i < $#llIIIIl11IIl11lII1IlI11IIl1Il11) {
                        $l11lIIl111IIIIl1l1Il1l1lI1ll111 .= ' ';
                    }
                }
            }
            else {
                $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1III1I11ll1lII1l11l1llI1l111ll($I111lIlIIl11lll1lIII1lI1111I1I1, $IIll111IllI1Ill1IIlIl1II11Il1l1);
            }
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = Illll11l1I111Il1IlIII1l1IllIIl1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = ll1Ill1I1III1I1lIIlI11IlI1I11l1($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            l111II1I1ll11l11lll1lll1llI1111 $Ill111l1l1II1ll1lIlIIIlII11III1, $I1IlllI111lIlll1II1ll1IlIIllllI, $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1, $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        }
    }
}
sub lIl11I1111IIl1lI1I1l1111lIllIIl {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IIl111I1I111lI111l1l1l1I1IIIl;
    my $I1Il1I11I1ll1ll1IIIl1Il1I1I1lII;
    my $i;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $I1llI1lIllI1IIlII1I11lII1lIIIll = shift @_;
    my $I1llIIlI1ll11lllII1lI1l1lIlIl1I = shift @_ || '';
    my $lIlIIlIII1IIIllI1lI1lIl11llI1II = join(' ', @_);
    my $ll1I1I11ll1llI1111IlllIlIllII1I;
    my $II1ll1l1l1llll1lll11I1Ill1I11Il;
    my $Ill111l1l1II1ll1lIlIIIlII11III1;
    my $I1IlllI111lIlll1II1ll1IlIIllllI;
    my $IIllIlI111IlI1II1lII1lllIlI1l11;
    my $IIll111IllI1Ill1IIlIl1II11Il1l1;
    my $III1III111I1IIII1ll1l1ll11ll11I;
    my $l1Ill1I1l1llIIlIII1IIlIIll1111I;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  list|get|set  [attr_name]  [attr_value]\n";
        printf "\n";
        printf "Note that not all attributes are supported on all platforms.\n";
        printf "This is provided, but it isn't expected to be the primary method by which these\n";
        printf "things are set.  If there's a feature you use frequently from here, please ask\n";
        printf "for it to be added.\n";
        printf "\n";
        printf "This is meant to be a 'plan B', giving you direct access to the configuration\n";
        printf "space inside the BMC.\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'list') {
        printf "\n";
        printf "Available attributes:\n";
        printf "\n";
        printf "%17s  %6s  %s\n", 'Category', 'Length', 'Attribute';
        printf "%17s  %6s  %s\n", '--------', '------', '---------';
        for ($i = 0; $i <= $#llll11IllllIII11l1ll11I11I1IlIl; ++$i) {
            printf "(%15s)  %6s  %s\n", $llll11IllllIII11l1ll11I11I1IlIl[$i][0], $llll11IllllIII11l1ll11I11I1IlIl[$i][5], $llll11IllllIII11l1ll11I11I1IlIl[$i][1];
        }
        printf "\n";
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get' or $I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        $ll1I1I11ll1llI1111IlllIlIllII1I = IllIl111IlIlIIlII1I11I11llIIlII($I1llIIlI1ll11lllII1lI1l1lIlIl1I);
        if ($ll1I1I11ll1llI1111IlllIlIllII1I < 0) {
            printf "Cannot find attribute $I1llIIlI1ll11lllII1lI1l1lIlIl1I.  Halting.\n";
            Il11III111lI111IIlllllllIIll1I1 ;
        }
        $II1ll1l1l1llll1lll11I1Ill1I11Il = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][0];
        $Ill111l1l1II1ll1lIlIIIlII11III1 = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][2];
        $I1IlllI111lIlll1II1ll1IlIIllllI = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][3];
        $IIllIlI111IlI1II1lII1lllIlI1l11 = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][4];
        $IIll111IllI1Ill1IIlIl1II11Il1l1 = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][5];
        $III1III111I1IIII1ll1l1ll11ll11I = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][6];
        $l1Ill1I1l1llIIlIII1IIlIIll1111I = $llll11IllllIII11l1ll11I11I1IlIl[$ll1I1I11ll1llI1111IlllIlIllII1I][7] || '';
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        lIIlIll1l1l1IIllIIIIllllll1IIll 'ext_cfg', 'get', '0x' . $Ill111l1l1II1ll1lIlIIIlII11III1, '0x' . $I1IlllI111lIlll1II1ll1IlIIllllI, '0x' . $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1;
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        lIIlIll1l1l1IIllIIIIllllll1IIll 'ext_cfg', 'set', '0x' . $Ill111l1l1II1ll1lIlIIIlII11III1, '0x' . $I1IlllI111lIlll1II1ll1IlIIllllI, '0x' . $IIllIlI111IlI1II1lII1lllIlI1l11, $IIll111IllI1Ill1IIlIl1II11Il1l1, $lIlIIlIII1IIIllI1lI1lIl11llI1II;
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub I11lII1l1llI1I1IIl1II1I1ll11I1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $I1llI1lIllI1IIlII1I11lII1lIIIll = shift @_;
    my $Ill111l1l1II1ll1lIlIIIlII11III1 = shift @_;
    my $I1IlllI111lIlll1II1ll1IlIIllllI = shift @_;
    my $IIllIlI111IlI1II1lII1lllIlI1l11 = shift @_;
    my $II11IllllI1ll11llIIl1111l1II1II = shift @_ || '0x00';
    my $Il1III1IIlIl1ll1I1ll111IIlIIIlI = shift @_ || '0x00';
    my $IIlII1I1II1l1lIllll1lll1l11I1lI = shift @_ || '0x01';
    my $I111lIlIIl11lll1lIII1lI1111I1I1 = join(' ', @_);
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 5) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  get|set  cfg_id  att_id  tbl_id  [low_offset]  [hi_offset]  [length]  [data_to_set]\n";
        printf "\n";
        printf "If not specified, offsets default to 0, and length defaults to 1.\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    $Ill111l1l1II1ll1lIlIIIlII11III1 = l111lII111IIlIlIl1IlII1IllIlllI($Ill111l1l1II1ll1lIlIIIlII11III1);
    $I1IlllI111lIlll1II1ll1IlIIllllI = l111lII111IIlIlIl1IlII1IllIlllI($I1IlllI111lIlll1II1ll1IlIIllllI);
    $IIllIlI111IlI1II1lII1lllIlI1l11 = l111lII111IIlIlIl1IlII1IllIlllI($IIllIlI111IlI1II1lII1lllIlI1l11);
    printf "data to set: $I111lIlIIl11lll1lIII1lI1111I1I1\n";
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x02 $l1IllIIl1llIIIll111llI1lIlI11II $Ill111l1l1II1ll1lIlIIIlII11III1 $I1IlllI111lIlll1II1ll1IlIIllllI $IIllIlI111IlI1II1lII1lllIlI1l11 $II11IllllI1ll11llIIl1111l1II1II $Il1III1IIlIl1ll1I1ll111IIlIIIlI $IIlII1I1II1l1lIllll1lll1l11I1lI");
        printf "response was: $l11lIIl111IIIIl1l1Il1l1lI1ll111\n\n";
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        $l1IllIIl1llIIIll111llI1lIlI11II = IIl1IIl11l1IlI11ll11lI111IIIlI1();
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("raw 0x30 0x03 $l1IllIIl1llIIIll111llI1lIlI11II $Ill111l1l1II1ll1lIlIIIlII11III1 $I1IlllI111lIlll1II1ll1IlIIllllI $IIllIlI111IlI1II1lII1lllIlI1l11 $II11IllllI1ll11llIIl1111l1II1II $Il1III1IIlIl1ll1I1ll111IIlIIIlI $IIlII1I1II1l1lIllll1lll1l11I1lI $I111lIlIIl11lll1lIII1lI1111I1I1");
        printf "response was: $l11lIIl111IIIIl1l1Il1l1lI1ll111\n\n";
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub l11I1llIIlIIIlll1lI11l11IIIlI1I {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $III1IlII111I1I1IIIl111111111lIl) = @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  on|off|blink|fastblink  \n";
        printf "\n";
        printf "    NOTE:  blink currently locks the tool in an infinite loop.  Thus, it only\n";
        printf "    works with a single BMC.\n";
        printf "\n";
        printf "    You can also use the commands:  \n";
        printf qq[        "blink" instaed of "id_led blink".\n];
        printf qq[        "fastblink" instaed of "id_led fastblink".\n];
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($III1IlII111I1I1IIIl111111111lIl eq 'on') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis identify force');
        printf "\n";
        return;
    }
    if ($III1IlII111I1I1IIIl111111111lIl eq 'off') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis identify 0');
        printf "\n";
        return;
    }
    if ($III1IlII111I1I1IIIl111111111lIl eq 'blink') {
        printf "Blinking a single host ID light forever...\n";
        while (1) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis identify force');
            select undef, undef, undef, 0.4;
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis identify 0');
            select undef, undef, undef, 0.4;
        }
        return;
    }
    if ($III1IlII111I1I1IIIl111111111lIl eq 'fastblink') {
        printf "Fast-blinking a single host ID light forever...\n";
        while (1) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis identify force');
            select undef, undef, undef, 0.125;
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I('chassis identify 0');
            select undef, undef, undef, 0.125;
        }
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub IIllI1111III1Ill111lll11lI11IIl {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $II11IlIlI11I11III1lI1III1l1llI1) = @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  status|on|off|cycle  \n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($II11IlIlI11I11III1lI1III1l1llI1 eq 'status' or $II11IlIlI11I11III1lI1III1l1llI1 eq 'on' or $II11IlIlI11I11III1lI1III1l1llI1 eq 'off' or $II11IlIlI11I11III1lI1III1l1llI1 eq 'cycle') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("chassis power $II11IlIlI11I11III1lI1III1l1llI1");
        if ($II11IlIlI11I11III1lI1III1l1llI1 eq 'status') {
            print "$l11lIIl111IIIIl1l1Il1l1lI1ll111";
        }
        print "\n";
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub l1I1IIlllIIlllll1IlIl11IlIIII11 {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $II11IlIlI11I11III1lI1III1l1llI1 = shift @_;
    my $lIIllll1llI1lIIl111I111l1lIlllI = join(' ', @_);
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  info|list|clear  \n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1I1Ill1Ill1lI1l11lll1111lIII("sel $II11IlIlI11I11III1lI1III1l1llI1 $lIIllll1llI1lIIl111I111l1lIlllI");
    print "\n";
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111";
    print "\n";
    return;
}
sub I1II1lIlIll1IlII1II1lI1lIlIllIl {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $II11IlIlI11I11III1lI1III1l1llI1 = shift @_ || '';
    my $lIIllll1llI1lIIl111I111l1lIlllI = join(' ', @_);
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1I1Ill1Ill1lI1l11lll1111lIII("sdr $II11IlIlI11I11III1lI1III1l1llI1 $lIIllll1llI1lIIl111I111l1lIlllI");
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111";
    print "\n";
    return;
}
sub l111l1Il1II1I111lllllIl111I1II1 {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $II11IlIlI11I11III1lI1III1l1llI1 = shift @_ || '';
    my $lIIllll1llI1lIIl111I111l1lIlllI = join(' ', @_);
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1I1Ill1Ill1lI1l11lll1111lIII("sensor $II11IlIlI11I11III1lI1III1l1llI1 $lIIllll1llI1lIIl111I111l1lIlllI");
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111";
    print "\n";
    return;
}
sub II1I11lI1l1lIl1l1lIIII1Ill1l1ll {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1llI1lIllI1IIlII1I11lII1lIIIll, $Il1I1l1lIlI1IIIlIIl1I1l1llI1IIl, $Illl1lIII111l1I1lI111IlllI1lIlI, $IIll1l1l1II11lIIIIlI1ll1l1Il1II) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 == 1) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  get|set  user_number  name|callin|linkauth|ipmimsg|channelprivlimit  [val]\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1llI1llIIII1II1llI1lI1lIIl111I("user list 1 | grep -ve '^ID' | grep -e '^${Il1I1l1lIlI1IIIlIIl1I1l1llI1IIl}'");
        if (not defined $l11lIIl111IIIIl1l1Il1l1lI1ll111) {
            printf "\n";
            return;
        }
        my(@lIII111ll1IIl11IIIlIlIIll1lI1Il) = split(/\s+/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
        if (not defined $Illl1lIII111l1I1lI111IlllI1lIlI) {
            $I1l1I111I111111Il1II1lllIl1l1ll = sprintf('%s %s %s %s %s', $lIII111ll1IIl11IIIlIlIIll1lI1Il[1], $lIII111ll1IIl11IIIlIlIIll1lI1Il[2], $lIII111ll1IIl11IIIlIlIIll1lI1Il[3], $lIII111ll1IIl11IIIlIlIIll1lI1Il[4], $lIII111ll1IIl11IIIlIlIIll1lI1Il[5]);
        }
        else {
            $_ = $Illl1lIII111l1I1lI111IlllI1lIlI;
            if ($_ eq 'name') {
                $I1l1I111I111111Il1II1lllIl1l1ll = $lIII111ll1IIl11IIIlIlIIll1lI1Il[1];
            }
            elsif ($_ eq 'callin') {
                $I1l1I111I111111Il1II1lllIl1l1ll = $lIII111ll1IIl11IIIlIlIIll1lI1Il[2];
            }
            elsif ($_ eq 'linkauth') {
                $I1l1I111I111111Il1II1lllIl1l1ll = $lIII111ll1IIl11IIIlIlIIll1lI1Il[3];
            }
            elsif ($_ eq 'ipmimsg') {
                $I1l1I111I111111Il1II1lllIl1l1ll = $lIII111ll1IIl11IIIlIlIIll1lI1Il[4];
            }
            elsif ($_ eq 'channelprivlimit') {
                $I1l1I111I111111Il1II1lllIl1l1ll = $lIII111ll1IIl11IIIlIlIIll1lI1Il[5];
            }
            else {
                printf "Unknown target field:  %s\n\n", $Illl1lIII111l1I1lI111IlllI1lIlI;
                Il11III111lI111IIlllllllIIll1I1 ;
            }
        }
        printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub IlII1IlI11Il11Il1lll1I11IlIIl1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my $II11IIIIIIlII111I11lIl1I1IlIlII = shift @_;
    my $I1llI1lIllI1IIlII1I11lII1lIIIll = shift @_;
    my $IIll1l1l1II11lIIIIlI1ll1l1Il1II = shift @_;
    my $lllI11IIlI1111lIIl1IlI1IlIlIIIl = shift @_ || '';
    my $Il111llllllIllllIIIIII1l1llI111 = 1;
    if ($lllI11IIlI1111lIIl1IlI1IlIlIIIl eq 'silent') {
        $Il111llllllIllllIIIIII1l1llI111 = 0;
    }
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "    $II11IIIIIIlII111I11lIl1I1IlIlII  get|set|toggle  [shared|dedicated]\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1Il111II1Il1lII1l1lI111Ill1l11();
        if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
            l11II11111I11II1II1Ill11l1Il11l ;
        }
        printf "$I1l1I111I111111Il1II1lllIl1l1ll\n";
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        I1l11I11lI1llll1I11lI1IIl1llIIl $IIll1l1l1II11lIIIIlI1ll1l1Il1II;
        if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
            l11II11111I11II1II1Ill11l1Il11l ;
        }
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'toggle') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1Il111II1Il1lII1l1lI111Ill1l11();
        if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
            l11II11111I11II1II1Ill11l1Il11l ;
        }
        if ($I1l1I111I111111Il1II1lllIl1l1ll eq 'shared') {
            if ($Il111llllllIllllIIIIII1l1llI111) {
                print "BMC nic is currently shared.  Toggling to dedicated.\n";
            }
            I1l11I11lI1llll1I11lI1IIl1llIIl 'd';
        }
        if ($I1l1I111I111111Il1II1lllIl1l1ll eq 'dedicated') {
            if ($Il111llllllIllllIIIIII1l1llI111) {
                print "BMC nic is currently dedicated.  Toggling to shared.\n";
            }
            I1l11I11lI1llll1I11lI1IIl1llIIl 'sh';
        }
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub IIll1lIllll1I11II1IlII1lIll1lIl {
    my $I1l1I111I111111Il1II1lllIl1l1ll = llIIl1lIIIllI1I1ll1lIl1I11lll1l();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        l11II11111I11II1II1Ill11l1Il11l ;
        return;
    }
    return;
}
sub I1I1lIIllIll1ll1I11llIIIIlllIlI {
    my($l11lIIl111IIIIl1l1Il1l1lI1ll111, $IIlI1l1IlIl1Il1l11l1lll1Il111II) = I11Ill1I1IlIl1I1lII1l1lll1lI1ll();
    printf "EEPROM returned:  $l11lIIl111IIIIl1l1Il1l1lI1ll111  ($IIlI1l1IlIl1Il1l11l1lll1Il111II)\n";
}
sub II1lIIlI1llII1l111ll1l1IlI1lI1l {
    printf "%s\n", llIII1lIl1llI111Il1ll1I1IlllIIl();
}
sub II1I1IlIIlI11I1l11II1lllI1I1lI1 {
    printf "%s\n", $IIlI11l1l1II1IIlIlIII11llIl1IIl;
}
sub llllIll111l1I1ll1lIIllIIlII1IIl {
    printf "%18s : %s \n", 'user-facing name', $ll1lll1l1l11IlII11lIlI1111ll111;
    printf "%18s : %s \n", 'PLAT', $IllII1l1IIIIlI1ll1IIlI1IIll1ll1;
    printf "%18s : %s \n", 'platform variant', $IIlI11l1l1II1IIlIlIII11llIl1IIl;
    printf "%18s : %s \n", 'platform raw', $I111I1lI1I11III11IIll1IIl11l1ll;
    printf "%18s : %s \n", 'platform family', $IIll111lllII1l1111I1IlllIlll1Il;
}
sub lllI11lI1I1ll11llIIIlII1IllII1I {
    my $l11I11IlI1l11111lI1II1IlIll11II = IllIllI1l1l111I1IIlll1I1IlI1II1();
    print "$l11I11IlI1l11111lI1II1IlIll11II \n";
}
sub IIlIIII11I1I11II1llI1IIlIIIll1I {
    my $l11I11IlI1l11111lI1II1IlIll11II = llIII1111II1lIl1IIII11llI1l1l1l();
    print "$l11I11IlI1l11111lI1II1IlIll11II \n";
}
sub Il1lIlI1lI11IlllIlIllllIllllIII {
    my $ll1lI1I1lll1l1l1I1lIlIIllIlI111 = l11llIl11l1l11Il1I11II1lIIll1II();
    print "$ll1lI1I1lll1l1l1I1lIlIIllIlI111 \n";
}
sub ll11IllllIllI1IlIll11IlIllII1I1 {
    my $Il1IlI11I1lIIlI1Il1lII1l1I1llIl = lIl1IIl1lI11I1I1lI11lIlI111l111();
    print "$Il1IlI11I1lIIlI1Il1lII1l1I1llIl \n";
}
sub IllIIl1lI1Ill1l11Il1II111llIIIl {
    my $I1IlI11111l11lIIIll1lIIlIl11I1l = shift @_;
    my $IIlI1lIll1l1llIIl11llI1l1IlIlI1 = 'eth';
    if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        print "Cannot get host IP address unless run locally on system.\n";
        return;
    }
    my $lIIll1I1llI1l1llIIlll111I1l1Il1;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $lIIll1I1llI1l1llIIlll111I1l1Il1 = `ifconfig -a`;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', '^em1', $lIIll1I1llI1l1llIIlll111I1l1Il1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 ne '') {
        $IIlI1lIll1l1llIIl11llI1l1IlIlI1 = 'em';
    }
    my $l1lll1llIIllIlIIl1l11l11IIll1Il;
    if ($IIlI1lIll1l1llIIl11llI1l1IlIlI1 eq 'eth') {
        $I1IlI11111l11lIIIll1lIIlIl11I1l -= 1;
        $l1lll1llIIllIlIIl1l11l11IIll1Il = "eth$I1IlI11111l11lIIIll1lIIlIl11I1l";
    }
    if ($IIlI1lIll1l1llIIl11llI1l1IlIlI1 eq 'em') {
        $l1lll1llIIllIlIIl1l11l11IIll1Il = "em$I1IlI11111l11lIIIll1lIIlIl11I1l";
    }
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('A1', "^$l1lll1llIIllIlIIl1l11l11IIll1Il", $lIIll1I1llI1l1llIIlll111I1l1Il1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'inet addr:', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = l111I1lll11I1lIIlIIl1I11lIlIIl1('inet addr:', 'Bcast', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111\n";
}
sub ll1llIl1IIlllIIII111I1I1llIll1l {
    my $I1IlI11111l11lIIIll1lIIlIl11I1l = shift @_;
    my $IIlI1lIll1l1llIIl11llI1l1IlIlI1 = 'eth';
    if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        print "Cannot get host IP address unless run locally on system.\n";
        return;
    }
    my $lIIll1I1llI1l1llIIlll111I1l1Il1;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $lIIll1I1llI1l1llIIlll111I1l1Il1 = `ifconfig -a`;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', '^em1', $lIIll1I1llI1l1llIIlll111I1l1Il1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 ne '') {
        $IIlI1lIll1l1llIIl11llI1l1IlIlI1 = 'em';
    }
    my $l1lll1llIIllIlIIl1l11l11IIll1Il;
    if ($IIlI1lIll1l1llIIl11llI1l1IlIlI1 eq 'eth') {
        $I1IlI11111l11lIIIll1lIIlIl11I1l -= 1;
        $l1lll1llIIllIlIIl1l11l11IIll1Il = "eth$I1IlI11111l11lIIIll1lIIlIl11I1l";
    }
    if ($IIlI1lIll1l1llIIl11llI1l1IlIlI1 eq 'em') {
        $l1lll1llIIllIlIIl1l11l11IIll1Il = "em$I1IlI11111l11lIIIll1lIIlIl11I1l";
    }
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', "^$l1lll1llIIllIlIIl1l11l11IIll1Il", $lIIll1I1llI1l1llIIlll111I1l1Il1);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1I1lII1I1lllI1111Il11II1I111II('HWaddr', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIIl1IIlIIIlll1l1I1I1l1llI111lI($l11lIIl111IIIIl1l1Il1l1lI1ll111);
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111\n";
}
sub IlIIIlIIl1lII1I1IlI1l1I11Ill1Il {
    my $I1l1I111I111111Il1II1lllIl1l1ll = I1Il1lIIlII11lIIlIIllII1IlIll1I();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub Il1III111IllIlIII1II11IlIlI1ll1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = I1lll1ll11Il11lIII1l11II111l11l();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIIlI11IlII111III1lllI1Il1II1II {
    my $I1l1I111I111111Il1II1lllIl1l1ll = II11II11Ill1IlIllIIllllI111IIII();
    printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I11III1lII1llIl111l1II1I1llI1Il {
    my $I11IIlIlIlllIIllI1lIIl111IIII1l = l1IlII1I11IIlIl11lIl11llI1lllII();
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        l11II11111I11II1II1Ill11l1Il11l ;
    }
    printf "$I11IIlIlIlllIIllI1lIIl111IIII1l\n";
}
sub lllll1II111I1I1lllll11I111I1III {
    my $I11IIlIlIlllIIllI1lIIl111IIII1l = l11IlI11lIlllIlIlllIIIlllII1IlI();
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        print "$I11IIlIlIlllIIllI1lIIl111IIII1l\n";
        return;
    }
    if (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        print "BIOS version could not be read.  This can occur when the BMC is reset after the main\n";
        print "server has been brought up.  Try rebooting the main server, and retry the command.\n";
        return;
    }
    printf "$I11IIlIlIlllIIllI1lIIl111IIII1l\n";
    return;
}
sub IIII1lI1I1I11Ill1I11llIII1lIIlI {
    my $l11l11l11l1IIlIII11I1I1IIllI1Il = I11I111l1I11lII111lIll1IlI1III1();
    printf "$l11l11l11l1IIlIII11I1I1IIllI1Il\n";
    return;
}
sub I1l1111l11lIl1I11lI111l1IIl1I1l {
    my $l11l11l11l1IIlIII11I1I1IIllI1Il = I1II1111lI11l11l1II1ll1IlI1IIll();
    printf "$l11l11l11l1IIlIII11I1I1IIllI1Il\n";
    return;
}
sub lII111ll1l11I1ll11IllI11IIlll11 {
    my $l111llIII1llII1II1llIIIlI1II1lI = IIIIIIIIIIIII1III111IlIII1lllI1();
    printf "$l111llIII1llII1II1llIIIlI1II1lI\n";
    return;
}
sub lIIlIlIl1llIlI11lIl1I1II1IIIIlI {
    my $l111llIII1llII1II1llIIIlI1II1lI = lIl11II1IIIlIIlI1II1lII1IllI1l1();
    printf "$l111llIII1llII1II1llIIIlI1II1lI\n";
    return;
}
sub l1l1IlIIlIlll11ll1ll1I11ll1l1Il {
    my $IlIlI1ll1Il11I1llI1l1I1lI1lIlIl = shift @_;
    my $Il1IIIIl1lIIl1l11lII1l1lI11l1I1 = shift @_;
    if (not defined $Il1IIIIl1lIIl1l11lII1l1lI11l1I1) {
        print "\n";
        print "Usage:  $IlIlI1ll1Il11I1llI1l1I1lI1lIlIl  duty_cycle\n";
        print "\n";
        print "        duty_cycle ranges from 0 to 100%, or specify 'auto' to return to\n";
        print "        automatic fan control.\n";
        print "\n";
        print "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    my $I1l1I111I111111Il1II1lllIl1l1ll = I11IIIl1lI1lIIll1II1lI1IlIlIll1($Il1IIIIl1lIIl1l11lII1l1lI11l1I1);
    print $I1l1I111I111111Il1II1lllIl1l1ll . "\n";
    if (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
        print "\n";
        print "Invalid input.  Halting.\n";
        print "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    print "\n";
    return;
}
sub I1ll1IllIllI11ll11III1lI1Il1llI {
    my $IlIlI1ll1Il11I1llI1l1I1lI1lIlIl = shift @_;
    my $IIl1IIIIIIlIII1lIlIllllII11III1 = shift @_ || '0';
    my $I1l1I111I111111Il1II1lllIl1l1ll = lII11Illl1IIll1IlIIlI11l1I11l1l($IIl1IIIIIIlIII1lIlIllllII11III1);
    if (llI11ll1lI11llI1lIl11llI1I11lI1 $I1l1I111I111111Il1II1lllIl1l1ll) {
        print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
    }
    return;
}
sub I1lllllI11Il1I11IlllIIlIlll11I1 {
    my $IlIlI1ll1Il11I1llI1l1I1lI1lIlIl = shift @_;
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = shift @_;
    my $IIII1I1lI11ll1II11l1llI111IllII;
    my $Il11I1I11lllIII1lllIIIlII1111II;
    my $lIllIll111llI1I11II1I111I1Illll;
    my $lI11ll1llI1l1I11II1Il1I11lI1111;
    my $i;
    my $lllII11I1I1lI1IlIIIIIlIII1I11Il;
    my $I1lII1Illl1llllIlIll11l1II1II1l;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $lllII11I1I1lI1IlIIIIIlIII1I11Il = 1;
        $I1lII1Illl1llllIlIll11l1II1II1l = 16;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        $lI11ll1llI1l1I11II1Il1I11lI1111 = l11lI1I111I1I11IIl1IIl1llI111II();
        $lIllIll111llI1I11II1I111I1Illll = l1111IllIIl1l1IIll1IIl111II111l($i);
        printf "%7s | power %-3s | %3d watts\n", 'chassis', $lI11ll1llI1l1I11II1Il1I11lI1111, $lIllIll111llI1I11II1I111I1Illll;
        for ($i = $lllII11I1I1lI1IlIIIIIlIII1I11Il; $i <= $I1lII1Illl1llllIlIll11l1II1II1l; ++$i) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = sprintf('%d', $i);
            $IIII1I1lI11ll1II11l1llI111IllII = l111l1llI11I11IlIlI1ll11III1l1l($i);
            $Il11I1I11lllIII1lllIIIlII1111II = III1III1IlIIl1l1l1llllI1l1l1IIl($i);
            printf "sled %2s | power %-3s | %3d watts\n", $l11lIIl111IIIIl1l1Il1l1lI1ll111, $IIII1I1lI11ll1II11l1llI111IllII, $Il11I1I11lllIII1lllIIIlII1111II;
        }
    }
    return;
}
sub IIlII1llllIIIlIII1IlIII1I1Il1II {
    my $IlIlI1ll1Il11I1llI1l1I1lI1lIlIl = shift @_;
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = shift @_;
    my $IIl1IIIIIIlIII1lIlIllllII11III1 = shift @_;
    my $i;
    my $lllII11I1I1lI1IlIIIIIlIII1I11Il;
    my $I1lII1Illl1llllIlIll11l1II1II1l;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    if (not defined $lIlIlI1I11llIllI1lI1IlIIIII1I1l && defined $IIl1IIIIIIlIII1lIlIllllII11III1) {
        print "\n";
        print "Usage:  $IlIlI1ll1Il11I1llI1l1I1lI1lIlIl   status|on|off  sled_number|all\n";
        print "\n";
        print "        C410X specific.  For a given sled, determine or set the power state of a GPGPU sled.\n";
        print "        The command targets either a single named sled or all sleds.\n";
        print "\n";
        print "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C410X') {
        if ($IIl1IIIIIIlIII1lIlIllllII11III1 eq 'all') {
            $lllII11I1I1lI1IlIIIIIlIII1I11Il = 1;
            $I1lII1Illl1llllIlIll11l1II1II1l = 16;
        }
        else {
            $lllII11I1I1lI1IlIIIIIlIII1I11Il = int $IIl1IIIIIIlIII1lIlIllllII11III1;
            $I1lII1Illl1llllIlIll11l1II1II1l = int $IIl1IIIIIIlIII1lIlIllllII11III1;
        }
    }
    if ($lIlIlI1I11llIllI1lI1IlIIIII1I1l eq 'status') {
        for ($i = $lllII11I1I1lI1IlIIIIIlIII1I11Il; $i <= $I1lII1Illl1llllIlIll11l1II1II1l; ++$i) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l111l1llI11I11IlIlI1ll11III1l1l($i);
            if ($IIl1IIIIIIlIII1lIlIllllII11III1 eq 'all') {
                printf "sled %2d :  $I1l1I111I111111Il1II1lllIl1l1ll\n", $i;
            }
            else {
                print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
            }
        }
        return;
    }
    if ($lIlIlI1I11llIllI1lI1IlIIIII1I1l eq 'on') {
        for ($i = $lllII11I1I1lI1IlIIIIIlIII1I11Il; $i <= $I1lII1Illl1llllIlIll11l1II1II1l; ++$i) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l111l1llI11I11IlIlI1ll11III1l1l($i);
            if ($I1l1I111I111111Il1II1lllIl1l1ll eq 'on') {
                $i = $i;
            }
            else {
                lII11Illl1IIll1IlIIlI11l1I11l1l $i;
            }
        }
        return;
    }
    if ($lIlIlI1I11llIllI1lI1IlIIIII1I1l eq 'off') {
        for ($i = $lllII11I1I1lI1IlIIIIIlIII1I11Il; $i <= $I1lII1Illl1llllIlIll11l1II1II1l; ++$i) {
            $I1l1I111I111111Il1II1lllIl1l1ll = l111l1llI11I11IlIlI1ll11III1l1l($i);
            if ($I1l1I111I111111Il1II1lllIl1l1ll eq 'off') {
                $i = $i;
            }
            else {
                lII11Illl1IIll1IlIIlI11l1I11l1l $i;
            }
        }
        return;
    }
    Il11III111lI111IIlllllllIIll1I1 ;
}
sub lIl111lIllIIlll1111l1l11llII1lI {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $IIlI1l1IlIl1Il1l11l1lll1Il111II;
    my $I1l1I111I111111Il1II1lllIl1l1ll = l1II11II1l1I1IIII11I1lI1I11II11();
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6105') {
        ($l11lIIl111IIIIl1l1Il1l1lI1ll111, $IIlI1l1IlIl1Il1l11l1lll1Il111II) = lI1ll1lll11I1lIII1lI11IIlIllIlI();
        if ($IIlI1l1IlIl1Il1l11l1lll1Il111II eq 'unknown' or $IIlI1l1IlIl1Il1l11l1lll1Il111II eq 'unprogrammed') {
            $I1l1I111I111111Il1II1lllIl1l1ll = 'Chassis type not set.  Contact Dell Support for instructions to fix.';
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub I1l1Il1Il1Il11ll111lll1II11llll {
    my $lIl1II11I1llIIII1I1lIlIllI111I1 = shift @_;
    my $I1IIl11ll1lllI111Il1l1IlIIlI1ll = shift @_;
    if (lI1111lIll1l1II1l1II1II11Il1I1I $lIl1II11I1llIIII1I1lIlIllI111I1) {
        $lIl1II11I1llIIII1I1lIlIllI111I1 = 'unimplemented in tool for this platform';
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $lIl1II11I1llIIII1I1lIlIllI111I1) {
        $lIl1II11I1llIIII1I1lIlIllI111I1 = 'n/a';
    }
    elsif (II1l11l111l1ll1l1l1IllIl1I1I1ll $lIl1II11I1llIIII1I1lIlIllI111I1) {
        $lIl1II11I1llIIII1I1lIlIllI111I1 = 'unavailable';
    }
    else {
        if (defined $I1IIl11ll1lllI111Il1l1IlIIlI1ll) {
            $lIl1II11I1llIIII1I1lIlIllI111I1 = sprintf($I1IIl11ll1lllI111Il1l1IlIIlI1ll, $lIl1II11I1llIIII1I1lIlIllI111I1);
        }
    }
    return $lIl1II11I1llIIII1I1lIlIllI111I1;
}
sub Il1llIlIl1lll1lllII1I1Ill1Il1l1 {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1IlIll111IIII11lIIII1l11IIIIIl, $II1I1lIIlI1l1llll11l1l1II1lI11I, $IllI1l1IIIlI1II1lIllll111IlllIl) = Illl1I1IlIllll1I1III1IlI1111l11();
        my $Il11lI111lll1lIlll1I1lIIlIllIll;
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll) {
            $Il11lI111lll1lIlll1I1lIIlIllIll = llIII1IIl111lIl1llllI1lII11IlII($III1IllllllII11IIIl1l11II1II1Il);
        }
        if ($l1II1lI1Il11lIIl1111Il1l11IIlll and $Il11lI111lll1lIlll1I1lIIlIllIll == 128) {
            return lIl11IllI1llllIIll1I1Illl1IlIIl();
        }
        return $II1I1lIIlI1l1llll11l1l1II1lI11I;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub IIl1llIIIIl1llllIl1l1Il1l1I11l1 {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1lll1l111I11l1Il1lIl1Ill1II111, $l1l1ll1III11IIlI11IIlI1I11lIll1, $I1lI11llIIIIIIlIIlIllIlII1IIlII, $l1IllllI1lll1lllI1II1I111ll1III, $IIIl111ll11lllIl1l1lI11II111lll, $lIIlIll11lIII11l1llllII1I1l1I1l) = lIl11IlIl1I1llI1II11l1lll1lI1l1();
        return $l1lll1l111I11l1Il1lIl1Ill1II111;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub l1IlIIlIII1lllI11111lI1Il1Ill11 {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1lll1l111I11l1Il1lIl1Ill1II111, $l1l1ll1III11IIlI11IIlI1I11lIll1, $I1lI11llIIIIIIlIIlIllIlII1IIlII, $l1IllllI1lll1lllI1II1I111ll1III, $IIIl111ll11lllIl1l1lI11II111lll, $lIIlIll11lIII11l1llllII1I1l1I1l) = lIl11IlIl1I1llI1II11l1lll1lI1l1();
        return $l1l1ll1III11IIlI11IIlI1I11lIll1;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub l1lIlIl1lI111II1l1IIlll1I1l1ll1 {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111) = lllllIIl1lIlll1lI1I11III1lIlll1();
        return $IlIIIlll11I11Ill1lIII111lIlIIll;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub IIIllI1lIIIl11111II1I1ll1IlII1l {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111) = lllllIIl1lIlll1lI1I11III1lIlll1();
        return $IlI111111l1lII1III111llll11I11l;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub l1llll11ll1IlI1Il111IIl1l11lI11 {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111) = lllllIIl1lIlll1lI1I11III1lIlll1();
        return $I1Il1l1IlIl1I1I1I111II111IlI111;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub II1l11I11I111lllII1ll11I1111llI {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111) = lllllIIl1lIlll1lI1I11III1lIlll1();
        my($IIlI11lIll1l11l11IIl1I1III111Il, $l111ll11ll11IIIIlII1lI1ll1l111I, $I11IIlI111IlllIIllIl1Il1I1lIll1) = lllII1l111IllI11I11IllIl1l1111I($lll111llIlI11Ill11l1I1IIIlI1lI1);
        return $I11IIlI111IlllIIllIl1Il1I1lIll1;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub llIl1I1lIII1lI1IlIlIlII111111l1 {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111) = lllllIIl1lIlll1lI1I11III1lIlll1();
        my $IIl1IIl1IlIlI1I1IIII1llI11I111l = IIlIIlII1IIIlll1l11l1l1IlI1I11l($IlII1l1I1lI11I1I1I1l1Il1lI1ll11);
        return $IIl1IIl1IlIlI1I1IIII1llI11I111l;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub llIlIlI1llIII1IlIII1IlllI1I11lI {
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 eq 'C6220') {
        my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1lll1l111I11l1Il1lIl1Ill1II111, $l1l1ll1III11IIlI11IIlI1I11lIll1, $I1lI11llIIIIIIlIIlIllIlII1IIlII, $l1IllllI1lll1lllI1II1I111ll1III, $IIIl111ll11lllIl1l1lI11II111lll, $lIIlIll11lIII11l1llllII1I1l1I1l) = lIl11IlIl1I1llI1II11l1lll1lI1l1();
        my $l1111lII1I1IllllII11IlIl1lll111 = lIIIlII1I1I11IIIll111I1llI11Ill($IIIl111ll11lllIl1l1lI11II111lll);
        return $l1111lII1I1IllllII11IlIl1lll111;
    }
    return lI1l1lII11l1IlIIIII1IlIlI1l11ll();
}
sub lI1III1II1IllI111IlIIl1lIIl1l11 {
    my $IlIIIlll11I11Ill1lIII111lIlIIll = l1lIlIl1lI111II1l1IIlll1I1l1ll1();
    print "$IlIIIlll11I11Ill1lIII111lIlIIll\n";
}
sub I1Il11lIl1IlIIIllIlIl11IIllI1l1 {
    my $IlI111111l1lII1III111llll11I11l = IIIllI1lIIIl11111II1I1ll1IlII1l();
    print "$IlI111111l1lII1III111llll11I11l\n";
}
sub lI1I1l11IIII111IIllI1111l1II1I1 {
    my $I1Il1l1IlIl1I1I1I111II111IlI111 = l1llll11ll1IlI1Il111IIl1l11lI11();
    print "$I1Il1l1IlIl1I1I1I111II111IlI111\n";
}
sub ll1lIIl1I11Il1ll11l1I1111IlllIl {
    my $I1l1I111I111111Il1II1lllIl1l1ll = 0;
    my $I11IIlI111IlllIIllIl1Il1I1lIll1 = II1l11I11I111lllII1ll11I1111llI();
    if ($I11IIlI111IlllIIllIl1Il1I1lIll1 eq '') {
        $I11IIlI111IlllIIllIl1Il1I1lIll1 = 'ok';
    }
    else {
        $I11IIlI111IlllIIllIl1Il1I1lIll1 = "$I11IIlI111IlllIIllIl1Il1I1lIll1";
        $I1l1I111I111111Il1II1lllIl1l1ll = 1;
    }
    print "$I11IIlI111IlllIIllIl1Il1I1lIll1\n";
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub lIlIII11IlI11IIllII1ll11IIllIIl {
    my $IIl1IIl1IlIlI1I1IIII1llI11I111l = llIl1I1lIII1lI1IlIlIlII111111l1();
    print "$IIl1IIl1IlIlI1I1IIII1llI11I111l\n";
}
sub II1ll1l1I11l1I1111I1llIIl1Illl1 {
    my $l1Il1l1111lII1l1I11Il1IIlll11I1 = llIlIlI1llIII1IlIII1IlllI1I11lI();
    print "$l1Il1l1111lII1l1I11Il1IIlll11I1\n";
}
sub lIl1IIII1I11I1l1lII1lll1l1ll1ll {
    my $Il1lIIll1II1IIll1l11Il1lII11Il1 = IllIllI1l1l111I1IIlll1I1IlI1II1();
    my $ll1lI1I1lll1l1l1I1lIlIIllIlI111 = l11llIl11l1l11Il1I11II1lIIll1II();
    my $Il1IlI11I1lIIlI1Il1lII1l1I1llIl = lIl1IIl1lI11I1I1lI11lIlI111l111();
    my $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    my $II11IIl1I11IIIII1III1II1IlIII1I = llIIl1lIIIllI1I1ll1lIl1I11lll1l();
    my $I1I11ll1l1IIlIIIII1l11l1Ill11lI = l11lI1I111I1I11IIl1IIl1llI111II();
    my $I11IIlIlIlllIIllI1lIIl111IIII1l = l11IlI11lIlllIlIlllIIIlllII1IlI();
    my $l11111ll11llII1ll1lI111lIll1IlI = I1Il1lIIlII11lIIlIIllII1IlIll1I();
    my $l11l11l11l1IIlIII11I1I1IIllI1Il = I1II1111lI11l11l1II1ll1IlI1IIll();
    my $ll1IIII1I1lI11l1Il1Ill1l1llIl11 = lIl11II1IIIlIIlI1II1lII1IllI1l1();
    my $I1111I11llII1ll1llII1IllIIlIIlI = II1I11IlIl1Il1IIlll11lll1111lII();
    my $ll1III1IIlllllIllllI11II11l1l1I = l1111IllIIl1l1IIll1IIl111II111l();
    my $IIIllI1l1lIl11lIIlI1IlII1lll11l = lIl111lIllIIlll1111l1l11llII1lI();
    my $lIIIl1lllIlIlII1l1lIIIIII1I1lIl = llIII1lIl1llI111Il1ll1I1IlllIIl('terse');
    if (l111I1IlIlII11ll11IIlllIl11Illl $II11IIl1I11IIIII1III1II1IlIII1I) {
        $II11IIl1I11IIIII1III1II1IlIII1I = '   ';
    }
    elsif (lI1111lIll1l1II1l1II1II11Il1I1I $II11IIl1I11IIIII1III1II1IlIII1I) {
        $II11IIl1I11IIIII1III1II1IlIII1I = '.??';
    }
    else {
        $II11IIl1I11IIIII1III1II1IlIII1I = '.' . sprintf('%2s', $II11IIl1I11IIIII1III1II1IlIII1I);
    }
    my $ll1IllI1lIll1l11lIlllIl1IIll1ll;
    my $IIlI1IIl11l11Il1I1IlIl11l1llI1I = '   ';
    my $llllll11I11IIIIlIlIIllI11lllll1 = '      ';
    my $I1Illl1Il1lI1lIlIlllIIII1lll1l1 = '';
    my $Il111Il1l1I1l1I11lIl11IllI1lI1l;
    my $I11l1lII1I11lIIIIIl1lIIl1I1IIII;
    my $IIIlIl1I1lllIIll1II1lIl1I11lIII;
    my $l1llIlIl111IlII1I1II11III1IlI1l;
    my $I1Il1Illl1lII1lI1l11ll1lIIIlIlI;
    my $IlIlI1l11IlIlll11l111Il1II1I1I1;
    $ll1IllI1lIll1l11lIlllIl1IIll1ll = sprintf('%15s', $Il1lIIll1II1IIll1l11Il1lII11Il1);
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'shared') {
        $IIlI1IIl11l11Il1I1IlIl11l1llI1I = 'shd';
    }
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'dedicated') {
        $IIlI1IIl11l11Il1I1IlIl11l1llI1I = 'ded';
    }
    if ($ll1lI1I1lll1l1l1I1lIlIIllIlI111 eq 'static') {
        $llllll11I11IIIIlIlIIllI11lllll1 = 'static';
    }
    if ($ll1lI1I1lll1l1l1I1lIlIIllIlI111 eq 'dhcp') {
        $llllll11I11IIIIlIlIIllI11lllll1 = 'dhcp';
    }
    if ($Il1IlI11I1lIIlI1Il1lII1l1I1llIl ne 'disabled') {
        $I1Illl1Il1lI1lIlIlllIIII1lll1l1 = ',vlan' . $Il1IlI11I1lIIlI1Il1lII1l1I1llIl;
    }
    $Il111Il1l1I1l1I11lIl11IllI1lI1l = sprintf('%3s', $I1I11ll1l1IIlIIIII1l11l1Ill11lI);
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        $I11l1lII1I11lIIIIIl1lIIl1I1IIII = ' unavail';
    }
    elsif (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        $I11l1lII1I11lIIIIIl1lIIl1I1IIII = '  reboot';
    }
    else {
        $I11l1lII1I11lIIIIIl1lIIl1I1IIII = sprintf('%8s', $I11IIlIlIlllIIllI1lIIl111IIII1l);
    }
    $IIIlIl1I1lllIIll1II1lIl1I11lIII = sprintf('%4s', $l11111ll11llII1ll1lI111lIll1IlI);
    if (lI1111lIll1l1II1l1II1II11Il1I1I $l11l11l11l1IIlIII11I1I1IIllI1Il) {
        $l1llIlIl111IlII1I1II11III1IlI1l = 'FCB:  unavail';
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $l11l11l11l1IIlIII11I1I1IIllI1Il) {
        $l1llIlIl111IlII1I1II11III1IlI1l = '';
    }
    else {
        $l1llIlIl111IlII1I1II11III1IlI1l = sprintf('FCB: %4s', $l11l11l11l1IIlIII11I1I1IIllI1Il);
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $ll1IIII1I1lI11l1Il1Ill1l1llIl11) {
        ();
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $ll1IIII1I1lI11l1Il1Ill1l1llIl11) {
        ();
    }
    else {
        $l1llIlIl111IlII1I1II11III1IlI1l .= ' (' . $ll1IIII1I1lI11l1Il1Ill1l1llIl11 . ')';
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1111I11llII1ll1llII1IllIIlIIlI) {
        $I1Il1Illl1lII1lI1l11ll1lIIIlIlI = '     ';
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $I1111I11llII1ll1llII1IllIIlIIlI) {
        $I1Il1Illl1lII1lI1l11ll1lIIIlIlI = '     ';
    }
    elsif (II1l11l111l1ll1l1l1IllIl1I1I1ll $I1111I11llII1ll1llII1IllIIlIIlI) {
        $I1Il1Illl1lII1lI1l11ll1lIIIlIlI = '     ';
    }
    else {
        $I1Il1Illl1lII1lI1l11ll1lIIIlIlI = sprintf('%3d W', $I1111I11llII1ll1llII1IllIIlIIlI);
    }
    print $ll1IllI1lIll1l11lIlllIl1IIll1ll . ' (' . $IIlI1IIl11l11Il1I1IlIl11l1llI1I . ',' . $llllll11I11IIIIlIlIIllI11lllll1 . $I1Illl1Il1lI1lIlIlllIIII1lll1l1 . ') | ' . $ll1lll1l1l11IlII11lIlI1111ll111 . $II11IIl1I11IIIII1III1II1IlIII1I . ' | ' . 'power ' . $Il111Il1l1I1l1I11lIl11IllI1lI1l . ' : ' . $I1Il1Illl1lII1lI1l11ll1lIIIlIlI . ' | ' . 'BIOS: ' . $I11l1lII1I11lIIIIIl1lIIl1I1IIII . ' | ' . 'BMC: ' . $IIIlIl1I1lllIIll1II1lIl1I11lIII . ' | ' . $l1llIlIl111IlII1I1II11III1IlI1l . "\n";
    if (llI11ll1lI11llI1lIl11llI1I11lI1 $IIIllI1l1lIl11lIIlI1IlII1lll11l) {
        print "^^^^^^^^^^^^^^^--- Error:  $IIIllI1l1lIl11lIIlI1IlII1lll11l \n";
        print "\n";
    }
}
sub I11Il1I1IlI1llI111lI1IIllI1l1ll {
    my $i;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $l1IllIIl1llIIIll111llI1lIlI11II;
    my $l11lII11IlIl1l1I1II11Il1lIllIlI;
    my $Il1l1llI1lIII1lIlll11I1llllIll1;
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1llI1lIllI1IIlII1I11lII1lIIIll, $IllIl1IlllllI1I11IIlI1l1I1l1I1l, $lll1l1Il11ll11Ill1l1lI1ll1Il11l) = @_;
    $l11lII11IlIl1l1I1II11Il1lIllIlI = -1;
    if (defined $IllIl1IlllllI1I11IIlI1l1I1l1I1l) {
        if ($IllIl1IlllllI1I11IIlI1l1I1l1I1l eq 'all_but_ipmi_disabled') {
            $l11lII11IlIl1l1I1II11Il1lIllIlI = $lll1lllIIl1IlIlIl1lI1l11ll1lIlI;
        }
        if ($IllIl1IlllllI1I11IIlI1l1I1l1I1l eq 'ikvm_disabled') {
            $l11lII11IlIl1l1I1II11Il1lIllIlI = $l11ll11l1IlllIII1I1l11l1IIlIlI1;
        }
        if ($IllIl1IlllllI1I11IIlI1l1I1l1I1l eq 'http_disabled') {
            $l11lII11IlIl1l1I1II11Il1lIllIlI = $Il111l1I1ll1IllIIll11I1IllI1lIl;
        }
        if ($IllIl1IlllllI1I11IIlI1l1I1l1I1l eq 'ssh_telnet_disabled') {
            $l11lII11IlIl1l1I1II11Il1lIllIlI = $Il1I11lllIllll1I1Il1I1IIl1111lI;
        }
        if ($IllIl1IlllllI1I11IIlI1l1I1l1I1l eq 'snmp_disabled') {
            $l11lII11IlIl1l1I1II11Il1lIllIlI = $I1IlI1IllI1I11lI1Ill1l1II11lllI;
        }
    }
    $Il1l1llI1lIII1lIlll11I1llllIll1 = -1;
    if (defined $lll1l1Il11ll11Ill1l1lI1ll1Il11l) {
        if ($lll1l1Il11ll11Ill1l1lI1ll1Il11l eq 'yes') {
            $Il1l1llI1lIII1lIlll11I1llllIll1 = 1;
        }
        if ($lll1l1Il11ll11Ill1l1lI1ll1Il11l eq 'no') {
            $Il1l1llI1lIII1lIlll11I1llllIll1 = 0;
        }
    }
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 3 or $l11lII11IlIl1l1I1II11Il1lIllIlI == -1 or $I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set' and $Il1l1llI1lIII1lIlll11I1llllIll1 == -1) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  get|set  ((option))  [yes|no]\n";
        printf "\n";
        printf "     Available options:\n";
        printf "       all_but_ipmi_disabled\n";
        printf "       ikvm_disabled\n";
        printf "       http_disabled\n";
        printf "       ssh_telnet_disabled\n";
        printf "       snmp_disabled\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'get') {
        $I1l1I111I111111Il1II1lllIl1l1ll = I1I111IIIIlIl1IIl1II1lIIll1I1I1($l11lII11IlIl1l1I1II11Il1lIllIlI);
        if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
            printf "$I1l1I111I111111Il1II1lllIl1l1ll\n";
            return;
        }
        if (Il1l1I11l1Il1111ll1l1Illl11Il11 $I1l1I111I111111Il1II1lllIl1l1ll) {
            printf "Operation is not supported on this platform.\n";
            return;
        }
        printf "%s\n", lI1l11111111I1llIl11Il1Illl1111($I1l1I111I111111Il1II1lllIl1l1ll);
        return;
    }
    if ($I1llI1lIllI1IIlII1I11lII1lIIIll eq 'set') {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1IIII1llllIllIIIlI1I1I11lIlllI($l11lII11IlIl1l1I1II11Il1lIllIlI, $Il1l1llI1lIII1lIlll11I1llllIll1);
        if (lI1111lIll1l1II1l1II1II11Il1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
            printf "Operation did not succeed.  (likely an unsupported bit setting)\n";
            return;
        }
        if (Il1l1I11l1Il1111ll1l1Illl11Il11 $I1l1I111I111111Il1II1lllIl1l1ll) {
            printf "Operation is not supported on this platform.\n";
            return;
        }
        print "\n";
        return;
    }
}
sub l11IIl11I1II1lIll1Ill1IIIIlll1l {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $lll1l1Il11ll11Ill1l1lI1ll1Il11l) = @_;
    my $Il1l1llI1lIII1lIlll11I1llllIll1;
    $Il1l1llI1lIII1lIlll11I1llllIll1 = -1;
    if (defined $lll1l1Il11ll11Ill1l1lI1ll1Il11l) {
        if ($lll1l1Il11ll11Ill1l1lI1ll1Il11l eq 'yes') {
            $Il1l1llI1lIII1lIlll11I1llllIll1 = 1;
        }
        if ($lll1l1Il11ll11Ill1l1lI1ll1Il11l eq 'no') {
            $Il1l1llI1lIII1lIlll11I1llllIll1 = 0;
        }
    }
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2 or $Il1l1llI1lIII1lIlll11I1llllIll1 == -1) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  yes|no\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    printf "\n";
    I1l1l1llIIII1ll1llIIlIIl1I1lII1 $Il1l1llI1lIII1lIlll11I1llllIll1;
    return;
}
sub lII11l1Il11llll1lI1IIIl1I1IlIll {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1lI1lIII1II1IlI111IIII1lI1l1ll) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  port_number\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    printf "\n";
    I1IIIl111I1l11I1l1l1llII1I1II1I $I1lI1lIII1II1IlI111IIII1lI1l1ll;
    return;
}
sub I11lII1l1lIllIl111lll1l1IlII1ll {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1lI1lIII1II1IlI111IIII1lI1l1ll) = @_;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  port_number\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    printf "\n";
    I1I11IlIlll11lI1111l1l1II1lII1l $I1lI1lIII1II1IlI111IIII1lI1l1ll;
    return;
}
sub ll11l1IIl1III1IIlllIIllIllIlIl1 {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $I1II1lll1111lI11IIIl1IlI1lII1I1) = @_;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  sensor_id\n";
        printf "\n";
        printf "     The sensor_id can be found as the second field in 'ipmitool sdr elist'.\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    $I1l1I111I111111Il1II1lllIl1l1ll = IIlIII1lI1l11IlI1llI1I11II11I1I(hex $I1II1lll1111lI11IIIl1IlI1lII1I1);
    $I1l1I111I111111Il1II1lllIl1l1ll = hex $I1l1I111I111111Il1II1lllIl1l1ll;
    printf "Sensor $I1II1lll1111lI11IIIl1IlI1lII1I1%s  reading in decimal: %d  \n", ':', $I1l1I111I111111Il1II1lllIl1l1ll;
    printf "Sensor $I1II1lll1111lI11IIIl1IlI1lII1I1%s  reading in hex:     0x%02x  \n", ':', $I1l1I111I111111Il1II1lllIl1l1ll;
    return;
}
sub IIIII1lIl1l1l1I11Illl11I11I1lII {
    my $Il11I111l1II1llIII1lI1l1I111III = shift @_ || '';
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my(@Il1II111l1l1lI1lIIlI11I1ll11II1) = ();
    my $llI1I11lll111l1llI11lll1I11I111 = substr($Il11I111l1II1llIII1lI1l1I111III, 1);
    my $I111lIll111l1IIllll1IlIlIl11111;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($Il11I111l1II1llIII1lI1l1I111III);
    if (not $l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /^\^/) {
        push @Il1II111l1l1lI1lIIlI11I1ll11II1, $l11lIIl111IIIIl1l1Il1l1lI1ll111;
        return @Il1II111l1l1lI1lIIlI11I1ll11II1;
    }
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /^\^/) {
        die "\nError:  Could not open BMC list file $llI1I11lll111l1llI11lll1I11I111\n\n" unless open $I111lIll111l1IIllll1IlIlIl11111, $llI1I11lll111l1llI11lll1I11I111;
        while (defined($_ = <$I111lIll111l1IIllll1IlIlIl11111>)) {
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $_;
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = llIIllIl1ll1lI1IIIII1l1I1lI11ll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /^$/) {
                next;
            }
            if (substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, 0, 1) eq '^') {
                push @Il1II111l1l1lI1lIIlI11I1ll11II1, IIIII1lIl1l1l1I11Illl11I11I1lII($l11lIIl111IIIIl1l1Il1l1lI1ll111);
            }
            else {
                if (l1I1lIl1lI111Il1Il1IlI11Il1I1II($l11lIIl111IIIIl1l1Il1l1lI1ll111)) {
                    push @Il1II111l1l1lI1lIIlI11I1ll11II1, $l11lIIl111IIIIl1l1Il1l1lI1ll111;
                }
                else {
                    printf "$l11lIIl111IIIIl1l1Il1l1lI1ll111 is not a valid ip adress format.\n";
                }
            }
        }
    }
    return @Il1II111l1l1lI1lIIlI11I1ll11II1;
}
sub l1I1lIl1lI111Il1Il1IlI11Il1I1II {
    if ($_[0] =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/) {
        if ($1 >= 0 and $1 <= 255 and ($2 >= 0 and $2 <= 255) and ($3 >= 0 and $3 <= 255) and ($4 >= 0 and $4 <= 255)) {
            return 1;
        }
        else {
            return 0;
        }
    }
    else {
        return 0;
    }
}
sub l1ll1II11II111I1l1IlIlI1IIII1I1 {
    my $l11111ll11llII1ll1lI111lIll1IlI = '';
    ++$ll11lIl1llII1111IIllllI1IIlIIIl;
    if ($ll11lIl1llII1111IIllllI1IIlIIIl < $#l1ll1llll11II1Il1lIllIII1Il1lIl + 1) {
        $l11111ll11llII1ll1lI111lIll1IlI = $l1ll1llll11II1Il1lIllIII1Il1lIl[$ll11lIl1llII1111IIllllI1IIlIIIl];
        $lIIIIlIll11IIlIlIlI11IlIllIIlIl = $l11111ll11llII1ll1lI111lIll1IlI;
        I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURBMC', $l11111ll11llII1ll1lI111lIll1IlI;
    }
    return $l11111ll11llII1ll1lI111lIll1IlI;
}
sub lIII1l11Il11lll1111Il1lI111l1lI {
    if ($IlII11l11lIIIll1IIll111lllIll1l) {
        printf '%' . $III1lllI1IlIIl111lII1llIIIIIll1 . 's: ', $lIIIIlIll11IIlIlIlI11IlIllIIlIl;
    }
}
sub I1II1lIlIII11lI1ll11ll1I1lIl1lI {
    printf "BMC is awake\n";
}
sub l1I1Il1lIl111IlIIlllI1l11l1IIII {
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = shift @_;
    my $I111l1lll1lI111llI1ll1I11llI11l = join(' ', @_);
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    I1I1I1IlIlIII111IllllIIl111I1I1 'ipmitool_passthrough';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII("$I111l1lll1lI111llI1ll1I11llI11l");
    print "\n";
    print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
    return;
}
sub Il1111Illl1l1ll1IlllIl1l11lIIIl {
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = shift @_;
    my $I111l1lll1lI111llI1ll1I11llI11l = join(' ', @_);
    my $l1II1lI1Il11lIIl1111Il1l11IIlll;
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    I1I1I1IlIlIII111IllllIIl111I1I1 'ipmitool_passthrough_raw';
    ($l1II1lI1Il11lIIl1111Il1l11IIlll, $I1l1I111I111111Il1II1lllIl1l1ll) = IlI1I1Ill1Ill1lI1l11lll1111lIII("raw $I111l1lll1lI111llI1ll1I11llI11l");
    print "\n";
    print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
    return;
}
sub I1lII1lIlIll1II1lIl1lI1l1l1l11l {
    my $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IIl1lllll1l1Illl1lIll1III1lIl1l('', 'FRU Device Description', $lllIIIl1ll1I111llII1llllII1IIII);
    my(@lll1Ill1l1IIlI1IIllIlllllllIllI) = split(/\n/, $l11lIIl111IIIIl1l1Il1l1lI1ll111, 0);
    my $IIII1IIllllIll1Il1l11I111IIlIlI = $#lll1Ill1l1IIlI1IIllIlllllllIllI + 1;
    return $IIII1IIllllIll1Il1l11I111IIlIlI;
}
sub ll1IIIl1IIIl111lIllIl1l1IlI1Ill {
    my $Ill11I1lIllII1ll1Ill1lIl1ll1Il1 = shift @_;
    my $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    my(@lI1lllI111I1I1IlllIl1Il1111Illl) = split(/FRU Device Description/, $lllIIIl1ll1I111llII1llllII1IIII, 0);
    shift @lI1lllI111I1I1IlllIl1Il1111Illl;
    my $lllIII1lI1l11l11lI1l1I111IIllII = $lI1lllI111I1I1IlllIl1Il1111Illl[$Ill11I1lIllII1ll1Ill1lIl1ll1Il1];
    $lllIII1lI1l11l11lI1l1I111IIllII = I11IllIl11lI1IIl1lIllllI1I1IIll($lllIII1lI1l11l11lI1l1I111IIllII);
    return $lllIII1lI1l11l11lI1l1I111IIllII;
}
sub IlI1l111l1Il11l1I1l111IIlIl1111 {
    my $lIlIlI1I11llIllI1lI1IlIIIII1I1l = shift @_;
    my $I111l1lll1lI111llI1ll1I11llI11l = join(' ', @_);
    my $lllIIIl1ll1I111llII1llllII1IIII = llI1Ill11lI1lI111II1l1I1I111I11();
    my $ll1II1111ll1III11IIl1IlIIl11l1l;
    my $lI1lllI111I1I1IlllIl1Il1111Illl;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $IIIIIllIlI1lIIIIl1lI1ll1llI111l;
    my $III11I1lllIl11Ill1Il111lllIII1l;
    my $i;
    my @lll1Ill1l1IIlI1IIllIlllllllIllI;
    my $I1l1I111I111111Il1II1lllIl1l1ll = '';
    my $IIII1IIllllIll1Il1l11I111IIlIlI = I1lII1lIlIll1II1lIl1lI1l1l1l11l();
    for ($i = 0; $i < $IIII1IIllllIll1Il1l11I111IIlIlI; ++$i) {
        $ll1II1111ll1III11IIl1IlIIl11l1l = ll1IIIl1IIIl111lIllIl1l1IlI1Ill($i);
        $ll1II1111ll1III11IIl1IlIIl11l1l = I11IllIl11lI1IIl1lIllllI1I1IIll($ll1II1111ll1III11IIl1IlIIl11l1l);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I1Il11lIl111l1l1IlIllI1lI1lIl1l(1, $ll1II1111ll1III11IIl1IlIIl11l1l);
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = I11IllIl11lI1IIl1lIllllI1I1IIll($l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $III11I1lllIl11Ill1Il111lllIII1l = l111I1lll11I1lIIlIIl1I11lIlIIl1('\\(', '\\)', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $III11I1lllIl11Ill1Il111lllIII1l = I1I1lII1I1lllI1111Il11II1I111II('ID', $III11I1lllIl11Ill1Il111lllIII1l);
        $III11I1lllIl11Ill1Il111lllIII1l = I11IllIl11lI1IIl1lIllllI1I1IIll($III11I1lllIl11Ill1Il111lllIII1l);
        $IIIIIllIlI1lIIIIl1lI1ll1llI111l = l111I1lll11I1lIIlIIl1I11lIlIIl1('\\:', '\\(', $l11lIIl111IIIIl1l1Il1l1lI1ll111);
        $IIIIIllIlI1lIIIIl1lI1ll1llI111l = I11IllIl11lI1IIl1lIllllI1I1IIll($IIIIIllIlI1lIIIIl1lI1ll1llI111l);
        $lI1lllI111I1I1IlllIl1Il1111Illl = lI1lI11IlIllI11lI1IlI1IIIllIlIl(2, 0, $ll1II1111ll1III11IIl1IlIIl11l1l);
        @lll1Ill1l1IIlI1IIllIlllllllIllI = split(/\n/, $lI1lllI111I1I1IlllIl1Il1111Illl, 0);
        $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf("FRU ID $III11I1lllIl11Ill1Il111lllIII1l Device Section Name : $IIIIIllIlI1lIIIIl1lI1ll1llI111l\n");
        foreach my $lIIIlIl1ll1111IllIIllIlllllI1I1 (@lll1Ill1l1IIlI1IIllIlllllllIllI) {
            $I1l1I111I111111Il1II1lllIl1l1ll .= sprintf("FRU ID $III11I1lllIl11Ill1Il111lllIII1l $lIIIlIl1ll1111IllIIllIlllllI1I1\n");
        }
    }
    return $I1l1I111I111111Il1II1lllIl1l1ll;
}
sub IIIlI11I1ll11II111I1lllI1lll1l1 {
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111 = IlI1l111l1Il11l1I1l111IIlIl1111();
    print "$l11lIIl111IIIIl1l1Il1l1lI1ll111\n";
}
sub I1Il1IlIllI1I11111IlIl1IIIIIlII {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    $I1l1I111I111111Il1II1lllIl1l1ll = l1111IllIIl1l1IIll1IIl111II111l();
    print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
}
sub I11II111I1IIll111llIIll11IllI11 {
    my $I1l1I111I111111Il1II1lllIl1l1ll;
    $I1l1I111I111111Il1II1lllIl1l1ll = II1I11IlIl1Il1IIlll11lll1111lII();
    print "$I1l1I111I111111Il1II1lllIl1l1ll\n";
}
my $IIII11Il1lIIllI1II1I1Il1l1lII1I = 1;
my $l1I1ll11IIlIllIlIlI1l1llIllI1ll;
sub I1lIIlllIl11l11l1IlIlllIl1I1111 {
    if ($IIII11Il1lIIllI1II1I1Il1l1lII1I == 2) {
        print '.' . $l1I1ll11IIlIllIlIlI1l1llIllI1ll . '.';
        ++$l1I1ll11IIlIllIlIlI1l1llIllI1ll;
    }
    if ($IIII11Il1lIIllI1II1I1Il1l1lII1I == 1) {
        if ($l1I1ll11IIlIllIlIlI1l1llIllI1ll % 5 == 0) {
            print ':';
        }
        else {
            print '.';
        }
        $l1I1ll11IIlIllIlIlI1l1llIllI1ll++;
    }
}
sub ll1I11lIII11lIll1l111lIl11I11ll {
    $l1I1ll11IIlIllIlIlI1l1llIllI1ll = 1;
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $Il1lIIll1II1IIll1l11Il1lII11Il1 = IllIllI1l1l111I1IIlll1I1IlI1II1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $lIII1lI1111III1lII1IIIIIlIllIII = llIIlI1Il1lIII1lIl111l1I111lll1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $ll1lI1I1lll1l1l1I1lIlIIllIlI111 = l11llIl11l1l11Il1I11II1lIIll1II();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $Il1IlI11I1lIIlI1Il1lII1l1I1llIl = lIl1IIl1lI11I1I1lI11lIlI111l111();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $II11IIl1I11IIIII1III1II1IlIII1I = llIIl1lIIIllI1I1ll1lIl1I11lll1l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I1I11ll1l1IIlIIIII1l11l1Ill11lI = l11lI1I111I1I11IIl1IIl1llI111II();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I11IIlIlIlllIIllI1lIIl111IIII1l = l11IlI11lIlllIlIlllIIIlllII1IlI();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l11111ll11llII1ll1lI111lIll1IlI = I1Il1lIIlII11lIIlIIllII1IlIll1I();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l11l11l11l1IIlIII11I1I1IIllI1Il = I1II1111lI11l11l1II1ll1IlI1IIll();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $ll1IIII1I1lI11l1Il1Ill1l1llIl11 = lIl11II1IIIlIIlI1II1lII1IllI1l1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I1111Il11ll1IIlI1I1lI11lI11Ill1 = IllIII1I1ll11III1IIIIlIIIlIllI1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l1l1lII111l1IlI1III1lllll1IIl1I = III1IIlll1l111I1IIlI1IlI11IllII();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $Ill1IIIl11I11l1IIIIlII1lIllIlI1 = lll1I1I11l111lI1lIl1l11lIllIIlI();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I1l1lIl1I1IIl111II1ll1IIllIII1l = l111IIl11IIl1lIIl1lI1l1lllIII1l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $llI11Il1l11II111I1l1I11I1II1l11 = llIlIlIlIlII1I111IIIl11lllI1lII();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l1l1l111lll1llI11l11I11llIl111l = ll1I1I11lI1IlIIl1ll1l1llI1I1lIl();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l11IIll1IlIllIllIllll11Il1lIIIl = I1lI1111I1II1IIlI1I1lllI1l1l1ll();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $II1lIII1l11lI1l11lIl1lII1I1Il1I = llIIl11IlllII1Il111I111l1IllIlI();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $lI1IlI111I1I1lI1lII1IIl1IIlllIl = I1l11lIlIIlIll1IllII1I11llllIl1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l11II1Il11l1llllIIII1II1I1IIIIl = I1Il1lI1lll1Il11lI1l1IlI1II1lII();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I1l1Il1111l1I1lIIl1111I1Il1llIl = lIIllll1I11l1lI1l1Il111lIl1lI1l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $llI1lllIlIlll11IIl11lI1II1IIIll = l1lI1l1I11Il1IllIIlI11Il111I11l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I1111I11llII1ll1llII1IllIIlIIlI = II1I11IlIl1Il1IIlll11lll1111lII();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $ll1III1IIlllllIllllI11II11l1l1I = l1111IllIIl1l1IIll1IIl111II111l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l1lIII1lI11lIIIIlII1IlI1I1IIl1I = llIlllIIlIIll11IllIII1ll11l11II();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $ll11lI1lII1IlII1lIllI1III1l1I1l = I1I1lIl1Il1Il11Il1llIllI1lllII1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $ll1ll1llllII11lIl11ll1IlIl1llll = IlI1I11I1Illl11IIIIllIllIIll11l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $lI1l1II1IlIl111111111111I1I11I1 = llIII1111II1lIl1IIII11llI1l1l1l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $IIIllI1l1lIl11lIIlI1IlII1lll11l = lIl111lIllIIlll1111l1l11llII1lI();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $lIIIl1lllIlIlII1l1lIIIIII1I1lIl = llIII1lIl1llI111Il1ll1I1IlllIIl();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my($l1I1llIl1I1Illl1lIIl1IlIlllII1I, $lII1l1l1lI1l1l1lll1l1111II1Il1l) = lI1ll1lll11I1lIII1lI11IIlIllIlI();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $Il1lI1I111l1III11ll1I11llI11IlI = l11l111llIlIll111lll1III11lII1l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l11IIIlI1lII11lIIl1lII11I1lIl11 = l11IlI1111IIII1l1lIlI1lI1IlI1II();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l1II111l1IlI1lIlIll1I11lllI1lII = Il1llIlIl1lll1lllII1I1Ill1Il1l1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $lIlIIl1IIlllIII1I11lIlIlI1IllI1 = l1IlIIlIII1lllI11111lI1Il1Ill11();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l111l1Il1IIIlll1lIIlI1IlllIl1ll = IIl1llIIIIl1llllIl1l1Il1l1I11l1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $IlIIIlll11I11Ill1lIII111lIlIIll = l1lIlIl1lI111II1l1IIlll1I1l1ll1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $IlI111111l1lII1III111llll11I11l = IIIllI1lIIIl11111II1I1ll1IlII1l();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I1Il1l1IlIl1I1I1I111II111IlI111 = l1llll11ll1IlI1Il111IIl1l11lI11();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $I11IIlI111IlllIIllIl1Il1I1lIll1 = II1l11I11I111lllII1ll11I1111llI();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $IIl1IIl1IlIlI1I1IIII1llI11I111l = llIl1I1lIII1lI1IlIlIlII111111l1();
    I1lIIlllIl11l11l1IlIlllIl1I1111 ;
    my $l1Il1l1111lII1l1I11Il1IIlll11I1 = llIlIlI1llIII1IlIII1IlllI1I11lI();
    print "\n";
    if (l111I1IlIlII11ll11IIlllIl11Illl $II11IIl1I11IIIII1III1II1IlIII1I) {
        $II11IIl1I11IIIII1III1II1IlIII1I = 'n/a';
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $II11IIl1I11IIIII1III1II1IlIII1I) {
        $II11IIl1I11IIIII1III1II1IlIII1I = 'unimplemented in tool for this platform';
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        $I11IIlIlIlllIIllI1lIIl111IIII1l = 'unavailable';
    }
    elsif (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I11IIlIlIlllIIllI1lIIl111IIII1l) {
        $I11IIlIlIlllIIllI1lIIl111IIII1l = 'reboot of server required';
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $l11l11l11l1IIlIII11I1I1IIllI1Il) {
        $l11l11l11l1IIlIII11I1I1IIllI1Il = 'unimplemented in tool for this platform';
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $l11l11l11l1IIlIII11I1I1IIllI1Il) {
        $l11l11l11l1IIlIII11I1I1IIllI1Il = 'n/a';
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $ll1IIII1I1lI11l1Il1Ill1l1llIl11) {
        $ll1IIII1I1lI11l1Il1Ill1l1llIl11 = 'unimplemented in tool for this platform';
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $ll1IIII1I1lI11l1Il1Ill1l1llIl11) {
        $ll1IIII1I1lI11l1Il1Ill1l1llIl11 = 'n/a';
    }
    if (lI1111lIll1l1II1l1II1II11Il1I1I $I1111Il11ll1IIlI1I1lI11lI11Ill1) {
        $I1111Il11ll1IIlI1I1lI11lI11Ill1 = 'unimplemented in tool for this platform';
    }
    elsif (l111I1IlIlII11ll11IIlllIl11Illl $I1111Il11ll1IIlI1I1lI11lI11Ill1) {
        $I1111Il11ll1IIlI1I1lI11lI11Ill1 = 'n/a';
    }
    elsif (II1l11l111l1ll1l1l1IllIl1I1I1ll $I1111Il11ll1IIlI1I1lI11lI11Ill1) {
        $I1111Il11ll1IIlI1I1lI11lI11Ill1 = 'unavailable - power node on to read';
    }
    elsif (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I1111Il11ll1IIlI1I1lI11lI11Ill1) {
        $I1111Il11ll1IIlI1I1lI11lI11Ill1 = 'invalid - Intel ME may be disabled in BIOS (Power Management)';
    }
    $I1111I11llII1ll1llII1IllIIlIIlI = I1l1Il1Il1Il11ll111lll1II11llll($I1111I11llII1ll1llII1IllIIlIIlI, '%d Watts');
    $ll1III1IIlllllIllllI11II11l1l1I = I1l1Il1Il1Il11ll111lll1II11llll($ll1III1IIlllllIllllI11II11l1l1I, '%d Watts');
    if (lI1I1llll1I1Il1111Il1I11IlIlIII $l1II111l1IlI1lIlIll1I11lllI1lII) {
        $l1II111l1IlI1lIlIll1I11lllI1lII = '---';
    }
    if (II1l11l111l1ll1l1l1IllIl1I1I1ll $lII1l1l1lI1l1l1lll1l1111II1Il1l) {
        $lII1l1l1lI1l1l1lll1l1111II1Il1l = IIIl1IIlIIIlll1l1I1I1l1llI111lI($lII1l1l1lI1l1l1lll1l1111II1Il1l);
    }
    if ($I11IIlI111IlllIIllIl1Il1I1lIll1 eq '') {
        $I11IIlI111IlllIIllIl1Il1I1lIll1 = 'ok, no issues';
    }
    elsif ($I11IIlI111IlllIIllIl1Il1I1lIll1 eq lI1l1lII11l1IlIIIII1IlIlI1l11ll()) {
        ();
    }
    else {
        $I11IIlI111IlllIIllIl1Il1I1lIll1 = "ERROR - $I11IIlI111IlllIIllIl1Il1I1lIll1";
    }
    my $l11I11lIIlIl1IlIl1lllI1l11I1l1I = 38;
    printf "\n";
    if (llI11ll1lI11llI1lIl11llI1I11lI1 $IIIllI1l1lIl11lIIlI1IlII1lll11l) {
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'ERROR', '>'), $IIIllI1l1lIl11lIIlI1IlII1lll11l;
    }
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power is'), $I1I11ll1l1IIlIIIII1l11l1Ill11lI;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Platform name'), $ll1lll1l1l11IlII11lIlI1111ll111;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Platform type'), $lIIIl1lllIlIlII1l1lIIIIII1I1lIl;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Node number in chassis'), $II11IIl1I11IIIII1III1II1IlIII1I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis type'), $lII1l1l1lI1l1l1lll1l1111II1Il1l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis Service Tag'), $Il1lI1I111l1III11ll1I11llI11IlI;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power drawn by this node'), $I1111I11llII1ll1llII1IllIIlIIlI;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power limit for this node'), $l1II111l1IlI1lIlIll1I11lllI1lII;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power drawn by whole chassis'), $ll1III1IIlllllIllllI11II11l1l1I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power limit for this chassis'), $lIlIIl1IIlllIII1I11lIlIlI1IllI1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis power limiting enabled'), lI1l11111111I1llIl11Il1Illl1111($l111l1Il1IIIlll1lIIlI1IlllIl1ll);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSUs required'), $IlIIIlll11I11Ill1lIII111lIlIIll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSUs redundant'), $IlI111111l1lII1III111llll11I11l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis emergency throttling'), $l1Il1l1111lII1l1I11Il1IIlll11I1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSUs seen'), $I1Il1l1IlIl1I1I1I111II111IlI111;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSU mismatch state'), $I11IIlI111IlllIIllIl1Il1I1lIll1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSU redundancy state'), $IIl1IIl1IlIlI1I1IIII1llI11I111l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'AC restore policy'), $ll1ll1llllII11lIl11ll1IlIl1llll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BIOS version'), $I11IIlIlIlllIIllI1lIIl111IIII1l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC version'), $l11111ll11llII1ll1lI111lIll1IlI;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'FCB version'), $l11l11l11l1IIlIII11I1I1IIllI1Il;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'FCB PIC version'), $ll1IIII1I1lI11l1Il1Ill1l1llIl11;
    if ($I1111Il11ll1IIlI1I1lI11lI11Ill1 ne 'n/a') {
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Intel ME version (if applicable)'), $I1111Il11ll1IIlI1I1lI11lI11Ill1;
    }
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'ipmitool version'), $l1lIII1lI11lIIIIlII1IlI1I1IIl1I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'bmc tool version'), $ll11lI1lII1IlII1lIllI1III1l1I1l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC hostname'), $llI11Il1l11II111I1l1I11I1II1l11;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC IP source'), $ll1lI1I1lll1l1l1I1lIlIIllIlI111;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC IP address'), $Il1lIIll1II1IIll1l11Il1lII11Il1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC subnet mask'), $lIII1lI1111III1lII1IIIIIlIllIII;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC MAC address'), $lI1l1II1IlIl111111111111I1I11I1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC VLAN setting'), $Il1IlI11I1lIIlI1Il1lII1l1I1llIl;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC NIC mode (which physical port)'), $IlI1llI1lI11lI1lI11IlII11III1I1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Service tag'), $Ill1IIIl11I11l1IIIIlII1lIllIlI1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Asset tag (set by customer)'), $I1l1lIl1I1IIl111II1ll1IIllIII1l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PPID (unique board serial num)'), $l1l1lII111l1IlI1III1lllll1IIl1I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Security: all_but_ipmi_disabled'), lI1l11111111I1llIl11Il1Illl1111($l1l1l111lll1llI11l11I11llIl111l);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Security: ikvm_disabled'), lI1l11111111I1llIl11Il1Illl1111($l11IIll1IlIllIllIllll11Il1lIIIl);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Security: http_disabled'), lI1l11111111I1llIl11Il1Illl1111($II1lIII1l11lI1l11lIl1lII1I1Il1I);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Security: ssh_telnet_disabled'), lI1l11111111I1llIl11Il1Illl1111($lI1IlI111I1I1lI1lII1IIl1IIlllIl);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Security: snmp_disabled'), lI1l11111111I1llIl11Il1Illl1111($l11IIIlI1lII11lIIl1lII11I1lIl11);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC Web GUI enabled'), lI1l11111111I1llIl11Il1Illl1111($l11II1Il11l1llllIIII1II1I1IIIIl);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC Web GUI http port'), $I1l1Il1111l1I1lIIl1111I1Il1llIl;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'BMC Web GUI https port'), $llI1lllIlIlll11IIl11lI1II1IIIll;
    my $lII1lI11IIIllIIIlI1lI1l111III1I = IlI1l111l1Il11l1I1l111IIlIl1111();
    my(@lll1Ill1l1IIlI1IIllIlllllllIllI) = split(/\n/, $lII1lI11IIIllIIIlI1lI1l111III1I, 0);
    my $lII1I1ll1l1lII11111lII11IIlI111;
    my $lIlIllIIlI1IIlI11Il1IIIIlI1l1II;
    foreach my $lIIIlIl1ll1111IllIIllIlllllI1I1 (@lll1Ill1l1IIlI1IIllIlllllllIllI) {
        $lII1I1ll1l1lII11111lII11IIlI111 = lI1l1IllIl11lI111lI1lIllll11ll1(':', $lIIIlIl1ll1111IllIIllIlllllI1I1);
        $lIlIllIIlI1IIlI11Il1IIIIlI1l1II = I1I1lII1I1lllI1111Il11II1I111II(':', $lIIIlIl1ll1111IllIIllIlllllI1I1);
        $lII1I1ll1l1lII11111lII11IIlI111 = I11IllIl11lI1IIl1lIllllI1I1IIll($lII1I1ll1l1lII11111lII11IIlI111);
        $lIlIllIIlI1IIlI11Il1IIIIlI1l1II = I11IllIl11lI1IIl1lIllllI1I1IIll($lIlIllIIlI1IIlI11Il1IIIIlI1l1II);
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, $lII1I1ll1l1lII11111lII11IIlI111), $lIlIllIIlI1IIlI11Il1IIIIlI1l1II;
    }
    if (llI11ll1lI11llI1lIl11llI1I11lI1 $IIIllI1l1lIl11lIIlI1IlII1lll11l) {
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'ERROR', '>'), $IIIllI1l1lIl11lIIlI1IlII1lll11l;
    }
    printf "\n";
}
sub lI11I1lI1Il1I1l1I11111I11l1l1ll {
    my $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    my $lI1l1II1IlIl111111111111I1I11I1 = llIII1111II1lIl1IIII11llI1l1l1l();
    printf "%s,%s\n", $IlI1llI1lI11lI1lI11IlII11III1I1, $lI1l1II1IlIl111111111111I1I11I1;
}
sub l1l111lI1IllII1I1lIIl1l1111lI1I {
    if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        printf "\n";
        printf "This function cannot be used remotely, because it is possible to render the BMC inaccessible.\n";
        printf "If you really, really, really want to do this remotely, use:\n";
        printf "\n";
        printf "    print_this_mac\n";
        printf "    nic_mode toggle\n";
        printf "    (wait 30 seconds)\n";
        printf "    print_this_mac\n";
        printf "    nic_mode toggle\n";
        printf "    (wait 30 seconds)\n";
        printf "\n";
        printf "... and you will get the same result, assuming the BMC can communicate in both shared & dedicated mode.\n";
        printf "But to reapply the MAC addresses, you must do it only locally (ssh into target machine, run\n";
        printf "set_both_macs)\n";
        printf "\n";
        exit 1;
    }
    my $IIlIl111I1lII111IIll1I1I1I1I11l = '';
    my $I111lIl1I1lIIlIllIl1Il1ll1II11l = '';
    my $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    my $lI1l1II1IlIl111111111111I1I11I1 = llIII1111II1lIl1IIII11llI1l1l1l();
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'shared') {
        $IIlIl111I1lII111IIll1I1I1I1I11l = $lI1l1II1IlIl111111111111I1I11I1;
    }
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'dedicated') {
        $I111lIl1I1lIIlIllIl1Il1ll1II11l = $lI1l1II1IlIl111111111111I1I11I1;
    }
    IlII1IlI11Il11Il1lll1I11IlIIl1l 'nic_mode', 'toggle', '', 'silent';
    sleep 30;
    lIl1lIlIIlI1ll1Il1lIIIll1I111l1 ;
    $IlI1llI1lI11lI1lI11IlII11III1I1 = l1Il111II1Il1lII1l1lI111Ill1l11();
    $lI1l1II1IlIl111111111111I1I11I1 = llIII1111II1lIl1IIII11llI1l1l1l();
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'shared') {
        $IIlIl111I1lII111IIll1I1I1I1I11l = $lI1l1II1IlIl111111111111I1I11I1;
    }
    if ($IlI1llI1lI11lI1lI11IlII11III1I1 eq 'dedicated') {
        $I111lIl1I1lIIlIllIl1Il1ll1II11l = $lI1l1II1IlIl111111111111I1I11I1;
    }
    IlII1IlI11Il11Il1lll1I11IlIIl1l 'nic_mode', 'toggle', '', 'silent';
    printf "%s,%s\n", 'shared', $IIlIl111I1lII111IIll1I1I1I1I11l;
    printf "%s,%s\n", 'dedicated', $I111lIl1I1lIIlIllIl1Il1ll1II11l;
}
sub IIl111l1I1Il1II11lIIl1lIlII11l1 {
    my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1IlIll111IIII11lIIII1l11IIIIIl, $II1I1lIIlI1l1llll11l1l1II1lI11I, $IllI1l1IIIlI1II1lIllll111IlllIl) = Illl1I1IlIllll1I1III1IlI1111l11();
    my $Il11lI111lll1lIlll1I1lIIlIllIll;
    my $l11I11lIIlIl1IlIl1lllI1l11I1l1I = 38;
    print "\n";
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'ec'), $l1II1lI1Il11lIIl1111Il1l11IIlll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'raw'), $III1IllllllII11IIIl1l11II1II1Il;
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll) {
        $Il11lI111lll1lIlll1I1lIIlIllIll = llIII1IIl111lIl1llllI1lII11IlII($III1IllllllII11IIIl1l11II1II1Il);
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'completion code'), $Il11lI111lll1lIlll1I1lIIlIllIll;
    }
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll and $Il11lI111lll1lIlll1I1lIIlIllIll == 128) {
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power Limit'), 'DISABLED';
    }
    else {
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Power Limit'), $II1I1lIIlI1l1llll11l1l1II1lI11I . ' watt';
    }
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Exception Actions'), $l1IlIll111IIII11lIIII1l11IIIIIl;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Correction Time'), $IllI1l1IIIlI1II1lIllll111IlllIl;
    print "\n";
}
sub lII1IlIlIII11I1lI11II11lI11Il1l {
    my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $l1lll1l111I11l1Il1lIl1Ill1II111, $l1l1ll1III11IIlI11IIlI1I11lIll1, $I1lI11llIIIIIIlIIlIllIlII1IIlII, $l1IllllI1lll1lllI1II1I111ll1III, $IIIl111ll11lllIl1l1lI11II111lll, $lIIlIll11lIII11l1llllII1I1l1I1l) = lIl11IlIl1I1llI1II11l1lll1lI1l1();
    my $Il11lI111lll1lIlll1I1lIIlIllIll;
    my $l11I11lIIlIl1IlIl1lllI1l11I1l1I = 38;
    my $l1111lII1I1IllllII11IlIl1lll111 = lIIIlII1I1I11IIIll111I1llI11Ill($IIIl111ll11lllIl1l1lI11II111lll);
    print "\n";
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'ec'), $l1II1lI1Il11lIIl1111Il1l11IIlll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'raw'), $III1IllllllII11IIIl1l11II1II1Il;
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll) {
        $Il11lI111lll1lIlll1I1lIIlIllIll = llIII1IIl111lIl1llllI1lII11IlII($III1IllllllII11IIIl1l11II1II1Il);
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'completion code'), $Il11lI111lll1lIlll1I1lIIlIllIll;
    }
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Enabled'), $l1lll1l111I11l1Il1lIl1Ill1II111;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis Power Limit'), $l1l1ll1III11IIlI11IIlI1I11lIll1 . ' watt';
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis Power Limit Action'), $I1lI11llIIIIIIlIIlIllIlII1IIlII;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Node Power Limit Exception'), $l1IllllI1lll1lllI1II1I111ll1III;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis Emergency Limit Action'), $IIIl111ll11lllIl1l1lI11II111lll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    chs emergency limit action text'), $l1111lII1I1IllllII11IlIl1lll111;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Node Emergency Limit Action (encoded)'), $lIIlIll11lIII11l1llllII1I1l1I1l;
    print "\n";
}
sub lIIIlII1I1I11IIIll111I1llI11Ill {
    my $llIllIII1IlII1l1l11l1I1II1III1l = shift @_ || 9999;
    my $lI1IlI1II1Il1IIIlIl1Il11llll1II = '';
    if ($llIllIII1IlII1l1l11l1I1II1III1l == 0) {
        $lI1IlI1II1Il1IIIlIl1Il11llll1II = 'disabled';
    }
    elsif ($llIllIII1IlII1l1l11l1I1II1III1l == 1) {
        $lI1IlI1II1Il1IIIlIl1Il11llll1II = 'limit power via hardware';
    }
    elsif ($llIllIII1IlII1l1l11l1I1II1III1l == 2) {
        $lI1IlI1II1Il1IIIlIl1Il11llll1II = 'limit power via software';
    }
    elsif ($llIllIII1IlII1l1l11l1I1II1III1l == 3) {
        $lI1IlI1II1Il1IIIlIl1Il11llll1II = 'power off the chassis';
    }
    else {
        $lI1IlI1II1Il1IIIlIl1Il11llll1II = 'unknown';
    }
    return $lI1IlI1II1Il1IIIlIl1Il11llll1II;
}
sub lII11llll1Il1I1Ill11l111ll1lIlI {
    my($l1II1lI1Il11lIIl1111Il1l11IIlll, $III1IllllllII11IIIl1l11II1II1Il, $lll111llIlI11Ill11l1I1IIIlI1lI1, $IlII1l1I1lI11I1I1I1l1Il1lI1ll11, $IlIIIlll11I11Ill1lIII111lIlIIll, $IlI111111l1lII1III111llll11I11l, $l11IIlII11I1ll1IIlIlIlIII1l1I1I, $lII1IllI1IIIl1llII1I1l1lllIl1I1, $I111llI1llll1IIl1llIlll1l1l1l1I, $l1lIl11l111111l1lIlI1IIIl1111ll, $IIlI1lIl1lI1ll1l1111IlIl1IIII11, $IlII111llI11l111I1Il1IlIllI1IIl, $I1Il1lIIlIlll1I1Il1lII1I1lllIII, $lI1l111IlIl1111llIl11lIIl1IIlI1, $I1I1lI11lII1l1l1l1I1lI1I1lIllII, $I1Il1l1IlIl1I1I1I111II111IlI111) = lllllIIl1lIlll1lI1I11III1lIlll1();
    my $Il11lI111lll1lIlll1I1lIIlIllIll;
    my $l11I11lIIlIl1IlIl1lllI1l11I1l1I = 38;
    print "\n";
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'ec'), $l1II1lI1Il11lIIl1111Il1l11IIlll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'raw'), $III1IllllllII11IIIl1l11II1II1Il;
    if ($l1II1lI1Il11lIIl1111Il1l11IIlll) {
        $Il11lI111lll1lIlll1I1lIIlIllIll = llIII1IIl111lIl1llllI1lII11IlII($III1IllllllII11IIIl1l11II1II1Il);
        printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'completion code'), $Il11lI111lll1lIlll1I1lIIlIllIll;
    }
    my($IIlI11lIll1l11l11IIl1I1III111Il, $l111ll11ll11IIIIlII1lI1ll1l111I, $I11IIlI111IlllIIllIl1Il1I1lIll1) = lllII1l111IllI11I11IllIl1l1111I($lll111llIlI11Ill11l1I1IIIlI1lI1);
    my $IIl1IIl1IlIlI1I1IIII1llI11I111l = IIlIIlII1IIIlll1l11l1l1IlI1I11l($IlII1l1I1lI11I1I1I1l1Il1lI1ll11);
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU Mismatch (encoded)'), $lll111llIlI11Ill11l1I1IIIlI1lI1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    mismatch asserted'), $IIlI11lIll1l11l11IIl1I1III111Il;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    mismatch error code'), $l111ll11ll11IIIIlII1lI1ll1l111I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    mismatch error text'), $I11IIlI111IlllIIllIl1Il1I1lIll1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU Redundancy (encoded)'), $IlII1l1I1lI11I1I1I1l1Il1lI1ll11;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    redundancy error text'), $IIl1IIl1IlIlI1I1IIII1llI11I111l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSUs required'), $IlIIIlll11I11Ill1lIII111lIlIIll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'Chassis PSUs redundant'), $IlI111111l1lII1III111llll11I11l;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 1 Max Output'), $l11IIlII11I1ll1IIlIlIlIII1l1I1I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 2 Max Output'), $lII1IllI1IIIl1llII1I1l1lllIl1I1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 3 Max Output'), $I111llI1llll1IIl1llIlll1l1l1l1I;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 4 Max Output'), $l1lIl11l111111l1lIlI1IIIl1111ll;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 5 Max Output'), $IIlI1lIl1lI1ll1l1111IlIl1IIII11;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 6 Max Output'), $IlII111llI11l111I1Il1IlIllI1IIl;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 7 Max Output'), $I1Il1lIIlIlll1I1Il1lII1I1lllIII;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, 'PSU 8 Max Output'), $lI1l111IlIl1111llIl11lIIl1IIlI1;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    PSUs seen count'), $I1I1lI11lII1l1l1l1I1lI1I1lIllII;
    printf "%s : %s\n", II1ll1lII1111III111Il1lI11IlIII($l11I11lIIlIl1IlIl1lllI1l11I1l1I, '    PSUs seen max output text'), $I1Il1l1IlIl1I1I1I111II111IlI111;
    printf "\n";
}
sub IlI1l1Il1I1I1I1Il111Ill1l11lIIl {
    my $IIIlll1l1lll1IllIIIIll1lIII1IIl = IllIII1I1ll11III1IIIIlIIIlIllI1();
    my $l11Il1ll1ll11l1lIllll1I111ll1l1 = llIIl1lIIIllI1I1ll1lIl1I11lll1l();
    my $I1111I11llII1ll1llII1IllIIlIIlI = II1I11IlIl1Il1IIlll11lll1111lII();
    my $l1II111l1IlI1lIlIll1I11lllI1lII = Il1llIlIl1lll1lllII1I1Ill1Il1l1();
    my $ll1III1IIlllllIllllI11II11l1l1I = l1111IllIIl1l1IIll1IIl111II111l();
    my $lIlIIl1IIlllIII1I11lIlIlI1IllI1 = l1IlIIlIII1lllI11111lI1Il1Ill11();
    my $IIl1I1IlllII11ll11I1Il1IIl1IllI = IIl1llIIIIl1llllIl1l1Il1l1I11l1();
    my $lI1lII11I1llII1Il1lIlll1I1lIlI1 = I1l111lll1lIIIl11l1ll1Il11llllI();
    my $I11l1lIlI1l111IIlll1l1II1Il1llI = lll1II1I1II1l11I11IlIlII1IlllI1(0, 3);
    if (lI1I1llll1I1Il1111Il1I11IlIlIII $l1II111l1IlI1lIlIll1I11lllI1lII) {
        $l1II111l1IlI1lIlIll1I11lllI1lII = '---';
    }
    if (II1l11l111l1ll1l1l1IllIl1I1I1ll $lI1lII11I1llII1Il1lIlll1I1lIlI1) {
        $lI1lII11I1llII1Il1lIlll1I1lIlI1 = 'n/a';
    }
    printf " node %s%s %3s%s of %3s%s   NMlimit: %3s%s   chassis: %4s%s of %4s%s (limiting: %3s)   fans: %d%s\n", $l11Il1ll1ll11l1lIllll1I111ll1l1, ':', $I1111I11llII1ll1llII1IllIIlIIlI, 'w', $l1II111l1IlI1lIlIll1I11lllI1lII, 'w', $I11l1lIlI1l111IIlll1l1II1Il1llI, 'w', $ll1III1IIlllllIllllI11II11l1l1I, 'w', $lIlIIl1IIlllIII1I11lIlIlI1IllI1, 'w', lI11lll111l1ll1I1IlIIII111lIl11($IIl1I1IlllII11ll11I1Il1IIl1IllI), $lI1lII11I1llII1Il1lIlll1I1lIlI1, '%';
}
sub IIlIl1II1lIIll1I11lIll11l1IIl11 {
    my $lI1lII11I1llII1Il1lIlll1I1lIlI1 = I1l111lll1lIIIl11l1ll1Il11llllI();
    print "$lI1lII11I1llII1Il1lIlll1I1lIlI1" . '%' . "\n";
}
sub II1I1llllll1111IIl111l11l11I1ll {
    my $I1111I11llII1ll1llII1IllIIlIIlI = II1I11IlIl1Il1IIlll11lll1111lII();
    $ll11llII1ll1I1Ill1lI1l1llI111ll += $I1111I11llII1ll1llII1IllIIlIIlI;
    printf "this node:  %3d W    total power so far: %5d W\n", $I1111I11llII1ll1llII1IllIIlIIlI, $ll11llII1ll1I1Ill1lI1l1llI111ll;
}
sub l1IIII1lIll1l1I11Il1Il1lllIlIlI {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $lI1Illl111lI1ll1lIlIl1I1lIl111l) = @_;
    my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
    my $ll11lII1I1ll1lI1I1lI1Il1I11lll1 = '0x01';
    my $l11IIIIII1lll1lIlIl1I1l11l1IIIl = '0x00';
    my $l11ll1IlIlIlIIllllllIlIllI1lIl1 = '0x00';
    my $lIIlIlI11IllIII1lI11II1lIl1lIIl = '0x02';
    my $l1IIl1lIlI111I1llllIIlIIl11ll1I = '0x02';
    my $lIlI1l1l1lIl1lIIl1lIllI1111llII = '0x00';
    my $Illlll1IIIllIl1IlllI11l1Il11III = '0x00';
    my $Ill11II1I1IlIlllIl1Illl11lIlll1 = '0x01';
    my $IIllIll1I1lI1llI1ll1IlI11I1I111 = '0x00';
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  chassis_power_limit | disable\n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($lI1Illl111lI1ll1lIlIl1I1lIl111l =~ /disable/i) {
        $ll11lII1I1ll1lI1I1lI1Il1I11lll1 = '0x00';
    }
    else {
        $l11lIIl111IIIIl1l1Il1l1lI1ll111 = sprintf('%04x', $lI1Illl111lI1ll1lIlIl1I1lIl111l);
        $l11ll1IlIlIlIIllllllIlIllI1lIl1 = '0x' . substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, 0, 2);
        $l11IIIIII1lll1lIlIl1I1l11l1IIIl = '0x' . substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, 2, 2);
    }
    IlI1I1Ill1Ill1lI1l11lll1111lIII "raw 0x30 0x17 $ll11lII1I1ll1lI1I1lI1Il1I11lll1 $l11IIIIII1lll1lIlIl1I1l11l1IIIl $l11ll1IlIlIlIIllllllIlIllI1lIl1 $lIIlIlI11IllIII1lI11II1lIl1lIIl $l1IIl1lIlI111I1llllIIlIIl11ll1I $lIlI1l1l1lIl1lIIl1lIllI1111llII $Illlll1IIIllIl1IlllI11l1Il11III $Ill11II1I1IlIlllIl1Illl11lIlll1 $IIllIll1I1lI1llI1ll1IlI11I1I111";
    print "\n";
}
sub I1Ill1I1lllI1IIlII11Ill1l1111I1 {
    my $I1l1I111I111111Il1II1lllIl1l1ll = lII11IllllI1llIl1lIlIlI111I1II1();
    if ($I1l1I111I111111Il1II1lllIl1l1ll eq 0) {
        print "no:  Intel ME is on.\n";
        return;
    }
    if ($I1l1I111I111111Il1II1lllIl1l1ll eq 1) {
        print "yes:  Intel ME is off.\n";
        return;
    }
    print "unknown.  sense_is_intel_me_off returned:  $I1l1I111I111111Il1II1lllIl1l1ll \n";
}
sub Il1l1lI1lI111I11ll111Il1lll1l1I {
    my $lIlIl1I11lII1l1IIIII1l1I111lIl1 = @_;
    my($II11IIIIIIlII111I11lIl1I1IlIlII, $III1IlII111I1I1IIIl111111111lIl) = @_;
    my $l1l11llI1IIIlllI11111Il1Ill1Il1;
    if ($IllII1l1IIIIlI1ll1IIlI1IIll1ll1 ne 'C6220') {
        l11II11111I11II1II1Ill11l1Il11l ;
        return;
    }
    if ($lIlIl1I11lII1l1IIIII1l1I111lIl1 < 2) {
        printf "Usage:\n";
        printf "     $II11IIIIIIlII111I11lIl1I1IlIlII  on | off  \n";
        printf "\n";
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    if ($III1IlII111I1I1IIIl111111111lIl =~ /on/i) {
        $l1l11llI1IIIlllI11111Il1Ill1Il1 = '0x00';
    }
    elsif ($III1IlII111I1I1IIIl111111111lIl =~ /off/i) {
        $l1l11llI1IIIlllI11111Il1Ill1Il1 = '0x02';
    }
    else {
        Il11III111lI111IIlllllllIIll1I1 ;
    }
    IlI1I1Ill1Ill1lI1l11lll1111lIII "raw 0x30 0xE3 $l1l11llI1IIIlllI11111Il1Ill1Il1";
    print "\n";
}
sub IIIIIll1lIIIl1l1IIl11IIllI11l1l {
    my $I1l1I111I111111Il1II1lllIl1l1ll = IlI1I1Ill1Ill1lI1l11lll1111lIII('raw 0x30 0xE2 0x13 0x00 0x00');
    $I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
    print "$I1l1I111I111111Il1II1lllIl1l1ll \n";
}
my $lIlIl1I11lII1l1IIIII1l1I111lIl1;
my $i;
my $II1I1I1IIIlIlIIII1111Il1IlI1IIl;
my $Ill1lll1II1IIlI1lI1llll1lII1l11;
my $ll1lII11lll1lIlI111I11I1lII11I1;
my $I1l1I111I111111Il1II1lllIl1l1ll;
my $l1II1lI1Il11lIIl1111Il1l11IIlll;
my $lIlIlI1I11llIllI1lI1IlIIIII1I1l;
my $IIl1IIllIII11Il1lIIl1ll1l11l11I = 0;
$lIlIl1I11lII1l1IIIII1l1I111lIl1 = $#ARGV + 1;
select STDERR;
$| = 1;
select STDOUT;
$| = 1;
$Ill1lll1II1IIlI1lI1llll1lII1l11 = 'root';
$ll1lII11lll1lIlI111I11I1lII11I1 = 'root';
I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURUSER', 'root';
I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURPASS', 'root';
if (defined $ENV{'BMCTOOL_IPMITOOL_USER'}) {
    $Ill1lll1II1IIlI1lI1llll1lII1l11 = $ENV{'BMCTOOL_IPMITOOL_USER'};
    I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURUSER', $Ill1lll1II1IIlI1lI1llll1lII1l11;
}
if (defined $ENV{'BMCTOOL_IPMITOOL_PASSWORD'}) {
    $ll1lII11lll1lIlI111I11I1lII11I1 = $ENV{'BMCTOOL_IPMITOOL_PASSWORD'};
    I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURPASS', $ll1lII11lll1lIlI111I11I1lII11I1;
}
my $I1l11II1Il1llll1IlI1I1ll111lIll;
my $lIIl111111IIIlI1Illl1lIlI1IlII1;
my $l11lIIl111IIIIl1l1Il1l1lI1ll111;
my $IIlI1l1IlIl1Il1l11l1lll1Il111II;
for ($i = 0; $i <= $#ARGV; ++$i) {
    $I1l11II1Il1llll1IlI1I1ll111lIll = '';
    $lIIl111111IIIlI1Illl1lIlI1IlII1 = '';
    $l11lIIl111IIIIl1l1Il1l1lI1ll111 = $ARGV[$i];
    if ($l11lIIl111IIIIl1l1Il1l1lI1ll111 =~ /^-/) {
        if (length $l11lIIl111IIIIl1l1Il1l1lI1ll111 < 2) {
            next;
        }
        if (length $l11lIIl111IIIIl1l1Il1l1lI1ll111 == 2) {
            $I1l11II1Il1llll1IlI1I1ll111lIll = substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, 1, 1);
            if ($i + 1 <= $#ARGV) {
                if (not $ARGV[$i + 1] =~ /^-/) {
                    $lIIl111111IIIlI1Illl1lIlI1IlII1 = $ARGV[$i + 1];
                    ++$i;
                }
            }
        }
        else {
            $I1l11II1Il1llll1IlI1I1ll111lIll = substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, 1, 1);
            $lIIl111111IIIlI1Illl1lIlI1IlII1 = substr($l11lIIl111IIIIl1l1Il1l1lI1ll111, 2);
        }
        $_ = $I1l11II1Il1llll1IlI1I1ll111lIll;
        if ($_ eq 'H') {
            $I1l1IIlllIIIl1III1Il1l1lI1lI11I = $IIll1llllIl11I1IIl11I1Ill11I1II;
            $lIIl111111IIIlI1Illl1lIlI1IlII1 = I11IllIl11lI1IIl1lIllllI1I1IIll($lIIl111111IIIlI1Illl1lIlI1IlII1);
            push @l1ll1llll11II1Il1lIllIII1Il1lIl, IIIII1lIl1l1l1I11Illl11I11I1lII($lIIl111111IIIlI1Illl1lIlI1IlII1);
        }
        elsif ($_ eq 'U') {
            $I1l1IIlllIIIl1III1Il1l1lI1lI11I = $IIll1llllIl11I1IIl11I1Ill11I1II;
            $Ill1lll1II1IIlI1lI1llll1lII1l11 = $lIIl111111IIIlI1Illl1lIlI1IlII1;
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURUSER', $Ill1lll1II1IIlI1lI1llll1lII1l11;
        }
        elsif ($_ eq 'P') {
            $I1l1IIlllIIIl1III1Il1l1lI1lI11I = $IIll1llllIl11I1IIl11I1Ill11I1II;
            $ll1lII11lll1lIlI111I11I1lII11I1 = $lIIl111111IIIlI1Illl1lIlI1IlII1;
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'CURPASS', $ll1lII11lll1lIlI111I11I1lII11I1;
        }
        elsif ($_ eq 'v') {
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'VERBOSE', $IllI1IlIll111lI11lI1I111lIlllll;
        }
        else {
            print "Unrecognized switch: -$_\n";
            lllII1Ill1I1I1II111I1IllIlIllll($0);
            exit 1;
        }
    }
    else {
        last;
    }
}
my(@I111l1lll1lI111llI1ll1I11llI11l) = ();
@I111l1lll1lI111llI1ll1I11llI11l = @ARGV[$i .. $#ARGV];
if (not @I111l1lll1lI111llI1ll1I11llI11l) {
    lllII1Ill1I1I1II111I1IllIlIllll($0);
    exit 1;
}
if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
    l1ll1II11II111I1l1IlIlI1IIII1I1 ;
    if ($#l1ll1llll11II1Il1lIllIII1Il1lIl + 1 > 1) {
        $IlII11l11lIIIll1IIll111lllIll1l = 1;
    }
    foreach $_ (@l1ll1llll11II1Il1lIllIII1Il1lIl) {
        if (length $_ > $III1lllI1IlIIl111lII1llIIIIIll1) {
            $III1lllI1IlIIl111lII1llIIIIIll1 = length $_;
        }
    }
}
my $I111lII1lIl1Il1lI1IlIll1ll1l1lI = $ENV{'BMCTOOL_IPMITOOL_CMD'} || 'ipmitool';
I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'IPMITOOL', $I111lII1lIl1Il1lI1IlIll1ll1l1lI;
I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'IPMITOOL_FLAGS', '-Ilanplus' if not $I1l1IIlllIIIl1III1Il1l1lI1lI11I;
if ($I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
    I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'USEKCS', '1';
}
else {
    I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'USEKCS', '0';
}
$lIlIlI1I11llIllI1lI1IlIIIII1I1l = "which $I111lII1lIl1Il1lI1IlIll1ll1l1lI";
$I1l1I111I111111Il1II1lllIl1l1ll = `$lIlIlI1I11llIllI1lI1IlIIIII1I1l 2>&1`;
$I1l1I111I111111Il1II1lllIl1l1ll = I11IllIl11lI1IIl1lIllllI1I1IIll($I1l1I111I111111Il1II1lllIl1l1ll);
$l1II1lI1Il11lIIl1111Il1l11IIlll = $?;
if ($l1II1lI1Il11lIIl1111Il1l11IIlll != 0) {
    print "\n";
    print "This tool requires 'ipmitool' to work, but it doesn't seem to be accessible.\n";
    print "\n";
    print "  ipmitool command is set to:  $I111lII1lIl1Il1lI1IlIll1ll1l1lI\n";
    print "\n";
    print "  Here is the command that tells us we can't see/run ipmitool:\n";
    print "\n";
    print "     command:  $lIlIlI1I11llIllI1lI1IlIIIII1I1l\n";
    print "    response:  $I1l1I111I111111Il1II1lllIl1l1ll\n";
    print "   exit code:  $l1II1lI1Il11lIIl1111Il1l11IIlll\n";
    print "\n";
    print "  If you need to hard code a path, you can explicitly set the ipmitool command\n";
    print "  and path that will be used by setting an environment variable:\n";
    print "\n";
    print "    export BMCTOOL_IPMITOOL_CMD=/path/to/ipmitool\n";
    print "\n";
    print "\n";
    exit 1;
}
if (defined $ENV{'IPMIDEBUG'} or defined $ENV{'IPMI_DEBUG'} or defined $ENV{'BMCTOOL_IPMITOOL_DEBUG'}) {
    I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'IPMIDEBUG', $IllI1IlIll111lI11lI1I111lIlllll;
}
if (defined $ENV{'NO_RESV_CACHING'} or defined $ENV{'BMCTOOL_NO_RESV_CACHING'}) {
    I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'NO_RESV_CACHING', $IllI1IlIll111lI11lI1I111lIlllll;
}
$_ = IIIl1IIlIIIlll1l1I1I1l1llI111lI($I111l1lll1lI111llI1ll1I11llI11l[0]);
if ($_ eq 'help') {
    lllII1Ill1I1I1II111I1IllIlIllll();
    exit 0;
}
if ($_ eq 'eng_help' or $_ eq 'eng_menu') {
    lIlI1I111l1IllIl1I1IIlI1I1IIlI1();
    exit 0;
}
if ($_ eq 'env_var_help') {
    Ill11lI1l1111l1IlII1l11l1llIl1l();
    exit 0;
}
if ($_ eq 'help_eng') {
    lIlI1I111l1IllIl1I1IIlI1I1IIlI1();
    exit 0;
}
if ($_ eq 'help_env_var') {
    Ill11lI1l1111l1IlII1l11l1llIl1l();
    exit 0;
}
if ($_ eq 'hard_reset') {
    I11IIlIlll1ll11lIIIlllI1ll1IIII ;
    exit 0;
}
do {
    lIl1lIlIIlI1ll1Il1lIIIll1I111l1 ;
    if (not $I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
        $I1l1I111I111111Il1II1lllIl1l1ll = l1IlI1I111lI1lI1IlIl1lIII11l1II($lIIIIlIll11IIlIlIlI11IlIllIIlIl);
        if (not $I1l1I111I111111Il1II1lllIl1l1ll) {
            printf "-- unresponsive BMC (not on network?):  $lIIIIlIll11IIlIlIlI11IlIllIIlIl\n";
            goto nextiter;
        }
    }
    $I1l1I111I111111Il1II1lllIl1l1ll = lll1IlllIIlll1I1ll1l11llll111Il();
    if (not $I1l1I111I111111Il1II1lllIl1l1ll) {
        if ($I1l1IIlllIIIl1III1Il1l1lI1lI11I) {
            printf "\n";
            printf "BMC did not respond to a simple command.  Is the IPMI service enabled?\n";
            printf "(If not, try running 'service ipmi start')\n";
            printf "\n";
            printf "This command did not work:\n";
            lll1IlllIIlll1I1ll1l11llll111Il 'loud';
            printf "\n";
            printf "\n";
            printf "\n";
            exit 1;
        }
        else {
            printf "-- BMC $lIIIIlIll11IIlIlIlI11IlIllIIlIl responded to ping, but is unavailable (IPMI command was not answered)\n";
            printf "\n";
            printf "This command did not work:\n";
            lll1IlllIIlll1I1ll1l11llll111Il 'loud';
            printf "\n";
            printf "\n";
        }
        goto nextiter;
    }
    $_ = IIIl1IIlIIIlll1l1I1I1l1llI111lI($I111l1lll1lI111llI1ll1I11llI11l[0]);
    if ($_ eq 'info') {
        ();
    }
    else {
        lIII1l11Il11lll1111Il1lI111l1lI ;
    }
    if ($_ eq 'ping') {
        ();
    }
    else {
        $IIl1IIllIII11Il1lIIl1ll1l11l11I = 0;
        if (defined $ENV{'BMCTOOL_FORCE_PLATFORM'}) {
            $IllII1l1IIIIlI1ll1IIlI1IIll1ll1 = $ENV{'BMCTOOL_FORCE_PLATFORM'};
            $ll1lll1l1l11IlII11lIlI1111ll111 = $ENV{'BMCTOOL_FORCE_PLATFORM'};
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'PLAT', $IllII1l1IIIIlI1ll1IIlI1IIll1ll1;
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'PLAT_NAME', $ll1lll1l1l11IlII11lIlI1111ll111;
            $IIl1IIllIII11Il1lIIl1ll1l11l11I = 1;
        }
        if (defined $ENV{'BMCTOOL_FORCE_PLATFORM_VARIANT'}) {
            $IIlI11l1l1II1IIlIlIII11llIl1IIl = $ENV{'BMCTOOL_FORCE_PLATFORM_VARIANT'};
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'PLAT_VARIANT', $IIlI11l1l1II1IIlIlIII11llIl1IIl;
            $IIl1IIllIII11Il1lIIl1ll1l11l11I = 1;
        }
        if (defined $ENV{'BMCTOOL_FORCE_PLATFORM_FAMILY'}) {
            $IIll111lllII1l1111I1IlllIlll1Il = $ENV{'BMCTOOL_FORCE_PLATFORM_FAMILY'};
            I1ll1IIIIl1IIIl1IlI1l1l11l1I1Il 'PLAT_FAMILY', $IIll111lllII1l1111I1IlllIlll1Il;
            $IIl1IIllIII11Il1lIIl1ll1l11l11I = 1;
        }
        if (not $IIl1IIllIII11Il1lIIl1ll1l11l11I) {
            ($IIll111lllII1l1111I1IlllIlll1Il, $I111I1lI1I11III11IIll1IIl11l1ll, $ll1lll1l1l11IlII11lIlI1111ll111, $IIlI11l1l1II1IIlIlIII11llIl1IIl, $IllII1l1IIIIlI1ll1IIlI1IIll1ll1) = l1l1I1lI1ll1l1lllI1IIl1ll11IllI();
        }
    }
    if ($_ ne 'reset' and $_ ne 'ping' and $_ ne 'platform_debug') {
        if ($IIll111lllII1l1111I1IlllIlll1Il eq 'PEC' or $IIll111lllII1l1111I1IlllIlll1Il eq 'DCS') {
            $I1l1I111I111111Il1II1lllIl1l1ll = IIl1IIl11l1IlI11ll11lI111IIIlI1();
            if (Illll1ll1ll1IIIIl111lIIIl1l1I1I $I1l1I111I111111Il1II1lllIl1l1ll) {
                printf "-- BMC could not acquire a reservation.  This usually means the BMC is in firmware\n";
                printf "   update mode.  Please issue a reset to the BMC to force a reboot.\n";
                printf "\n";
                goto nextiter;
            }
        }
    }
    if ($_ eq 'nic_mode') {
        IlII1IlI11Il11Il1lll1I11IlIIl1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'users') {
        II1I11lI1l1lIl1l1lIIII1Ill1l1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'node_number') {
        IIll1lIllll1I11II1IlII1lIll1lIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'ext_cfg') {
        lIIlIll1l1l1IIllIIIIllllll1IIll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'ext_cfg_raw') {
        I11lII1l1llI1I1IIl1II1I1ll11I1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bmc_hostname') {
        IlllI1Il1ll1llII1lI1I1I1lI1II11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'reset') {
        IIIl11IlIIl1I1l1IllI1I1l1I11ll1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'platform') {
        II1lIIlI1llII1l111ll1l1IlI1lI1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'platform_variant') {
        II1I1IlIIlI11I1l11II1lllI1I1lI1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'platform_debug') {
        llllIll111l1I1ll1lIIllIIlII1IIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bmc_version') {
        IlIIIlIIl1lII1I1IlI1l1I11Ill1Il @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bios_version') {
        lllll1II111I1I1lllll11I111I1III @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bios_version_raw') {
        I11III1lII1llIl111l1II1I1llI1Il @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'fcb_version') {
        I1l1111l11lIl1I11lI111l1IIl1I1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'fcb_version_raw') {
        IIII1lI1I1I11Ill1I11llIII1lIIlI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'fcb_pic_version') {
        lIIlIlIl1llIlI11lIl1I1II1IIIIlI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'fcb_pic_version_raw') {
        lII111ll1l11I1ll11IllI11IIlll11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'intel_me_version') {
        lI1lll111lIlI1ll11lIlIlIll11l1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'gui_timeout') {
        IllIllI11lI1IIIlIlIl1I1l11l111I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'web_gui_timeout') {
        IllIllI11lI1IIIlIlIl1I1l11l111I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'attr') {
        lIl11I1111IIl1lI1I1l1111lIllIIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'id_led') {
        l11I1llIIlIIIlll1lI11l11IIIlI1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'power') {
        IIllI1111III1Ill111lll11lI11IIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'c6105_chassis_type') {
        I1I1lIIllIll1ll1I11llIIIIlllIlI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'info') {
        lIl1IIII1I11I1l1lII1lll1l1ll1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'summary') {
        lIl1IIII1I11I1l1lII1lll1l1ll1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'allinfo') {
        ll1I11lIII11lIll1l111lIl11I11ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'ppid') {
        Il11IIIIlIIlllIl1111I1l1lI1111I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'eppid') {
        Il11IIIIlIIlllIl1111I1l1lI1111I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'service_tag') {
        l1lIlIl11l11I1I1ll1lIlIl1l1lllI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'asset_tag') {
        IIl1IlI1l1I1III11IlI1Ill111II1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'security') {
        I11Il1I1IlI1llI111lI1IIllI1l1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'web_gui_enabled') {
        l11IIl11I1II1lIll1Ill1IIIIlll1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'web_gui_http_port') {
        lII11l1Il11llll1lI1IIIl1I1IlIll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'web_gui_https_port') {
        I11lII1l1lIllIl111lll1l1IlII1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'read_sensor') {
        ll11l1IIl1III1IIlllIIllIllIlIl1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'force_fan_speed') {
        l1l1IlIIlIlll11ll1ll1I11ll1l1Il @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'set_asset_tag') {
        ll11l1lI1IIIlIl111l1IIl1I1l1I1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'ping') {
        I1II1lIlIII11lI1ll11ll1I1lIl1lI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'ipmitool') {
        l1I1Il1lIl111IlIIlllI1l11l1IIII @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'ip') {
        l1I1Il1lIl111IlIIlllI1l11l1IIII @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'power_draw_node') {
        I11II111I1IIll111llIIll11IllI11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'node_power_draw') {
        I11II111I1IIll111llIIll11IllI11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'power_draw_chassis') {
        I1Il1IlIllI1I11111IlIl1IIIIIlII @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'chassis_power_draw') {
        I1Il1IlIllI1I11111IlIl1IIIIIlII @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'toggle_gpgpu_sled_power') {
        I1ll1IllIllI11ll11III1lI1Il1llI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'gpgpu_power') {
        IIlII1llllIIIlIII1IlIII1I1Il1II @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'gpgpu') {
        I1lllllI11Il1I11IlllIIlIlll11I1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'gpgpu_info') {
        I1lllllI11Il1I11IlllIIlIlll11I1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'required_psu_count') {
        lI1III1II1IllI111IlIIl1lIIl1l11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'redundant_psu_available') {
        I1Il11lIl1IlIIIllIlIl11IIllI1l1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'chassis') {
        my $I1l1I111I111111Il1II1lllIl1l1ll = lI1ll1lll11I1lIII1lI11IIlIllIlI();
        printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    elsif ($_ eq 'chassis_type') {
        my $I1l1I111I111111Il1II1lllIl1l1ll = lI1ll1lll11I1lIII1lI11IIlIllIlI();
        printf "%s\n", $I1l1I111I111111Il1II1lllIl1l1ll;
    }
    elsif ($_ eq 'state') {
        I1Ill11IIllIlIIIIlI1Il1IIIIIl1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'pecagent_health') {
        III1lllllI11lII11l1I11I111lllI1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'pecagent_sel') {
        lI1IlIIII1lI1llIl11l1ll111I11ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'selfilter') {
        l1I1IIIll11llll1l1Il1IIl11ll1II @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'selfilter_from_file') {
        ll111llIIl1ll1ll1Ill1llIl1Il1I1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'sel') {
        l1I1IIlllIIlllll1IlIl11IlIIII11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'sdr') {
        I1II1lIlIll1IlII1II1lI1lIlIllIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'sensor') {
        l111l1Il1II1I111lllllIl111I1II1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'print_this_mac') {
        lI11I1lI1Il1I1l1I11111I11l1l1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'print_both_macs') {
        l1l111lI1IllII1I1lIIl1l1111lI1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'get_this_mac') {
        lI11I1lI1Il1I1l1I11111I11l1l1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'get_both_macs') {
        l1l111lI1IllII1I1lIIl1l1111lI1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'set_this_mac') {
        II1111II1l1IlI11III1111IlII11lI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'set_both_macs') {
        IIIIl1lIlI1I1IIIlII1111IIIl1lIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'fru') {
        IIIlI11I1ll11II111I1lllI1lll1l1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'dcmi_get_power_limit') {
        IIl111l1I1Il1II11lIIl1lIlII11l1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'pcap') {
        IlI1l1Il1I1I1I1Il111Ill1l11lIIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'scbmc_get_chassis_power_capping') {
        lII1IlIlIII11I1lI11II11lI11Il1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'scbmc_get_chassis_enclosure_power_capping') {
        lII1IlIlIII11I1lI11II11lI11Il1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'set_chassis_power_cap') {
        l1IIII1lIll1l1I11Il1Il1lllIlIlI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'is_intel_me_off') {
        I1Ill1I1lllI1IIlII11Ill1l1111I1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'intel_me_power') {
        Il1l1lI1lI111I11ll111Il1lll1l1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'svn') {
        IIIIIll1lIIIl1l1IIl11IIllI11l1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'avg_fan_speed') {
        IIlIl1II1lIIll1I11lIll11l1IIl11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'total_power') {
        II1I1llllll1111IIl111l11l11I1ll @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bmc_ip_addr') {
        lllI11lI1I1ll11llIIIlII1IllII1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bmc_mac_addr') {
        IIlIIII11I1I11II1llI1IIlIIIll1I @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'host_ip_addr_1') {
        IllIIl1lI1Ill1l11Il1II111llIIIl 1;
    }
    elsif ($_ eq 'host_ip_addr_2') {
        IllIIl1lI1Ill1l11Il1II111llIIIl 2;
    }
    elsif ($_ eq 'host_mac_addr_1') {
        ll1llIl1IIlllIIII111I1I1llIll1l 1;
    }
    elsif ($_ eq 'host_mac_addr_2') {
        ll1llIl1IIlllIIII111I1I1llIll1l 2;
    }
    elsif ($_ eq 'blink') {
        l11I1llIIlIIIlll1lI11l11IIIlI1I 'id_led', 'blink';
    }
    elsif ($_ eq 'fastblink') {
        l11I1llIIlIIIlll1lI11l11IIIlI1I 'id_led', 'fastblink';
    }
    elsif ($_ eq 'raw') {
        Il1111Illl1l1ll1IlllIl1l11lIIIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bmc_ip_source') {
        Il1lIlI1lI11IlllIlIllllIllllIII @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'bmc_vlan') {
        ll11IllllIllI1IlIll11IlIllII1I1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'scbmc_get_psu_info') {
        lII11llll1Il1I1Ill11l111ll1lIlI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'psus_required') {
        lI1III1II1IllI111IlIIl1lIIl1l11 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'psus_redundant') {
        I1Il11lIl1IlIIIllIlIl11IIllI1l1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'psus_seen') {
        lI1I1l11IIII111IIllI1111l1II1I1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'psus_mismatch_state') {
        ll1lIIl1I11Il1ll11l1I1111IlllIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'psus_redundancy_state') {
        lIlIII11IlI11IIllII1ll11IIllIIl @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'chassis_emergency_throttling') {
        II1ll1l1I11l1I1111I1llIIl1Illl1 @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'set_chassis_svctag') {
        l1I11l1lIlI1IIII1I1lIIIIlI1lI1l @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'set_bmc_mac') {
        II1111II1l1IlI11III1111IlII11lI @I111l1lll1lI111llI1ll1I11llI11l;
    }
    elsif ($_ eq 'sense_psu_presence') {
        printf "%s\n", II11IlII1I1I1llIlIIIlIIIll11I1l();
    }
    elsif ($_ eq 'sense_psu_fault') {
        printf "%s\n", lIlI1Ill111lllIlIllI11ll1I1IlIl();
    }
    elsif ($_ eq 'dbg_sense_sel_info') {
        lIIlI1Il1ll1l1l1llIlIII1IllIIll ;
    }
    elsif ($_ eq 'sense_chassis_type') {
        my($Ill1llI1III1IIIIlllIIl1IllI11II, $II1llII1II1III1IIl1II1l1IIIll1l) = lI1ll1lll11I1lIII1lI11IIlIllIlI();
        printf "%s \n", $Ill1llI1III1IIIIlllIIl1IllI11II;
        printf "%s \n", $II1llII1II1III1IIl1II1l1IIIll1l;
    }
    else {
        printf "Unknown command:  %s\n\n", $_;
        exit 1;
    }
    nextiter: 
} while l1ll1II11II111I1l1IlIlI1IIII1I1 ;
exit 0;
sub lllII1Ill1I1I1II111I1IllIlIllll {
    use warnings;
    use strict 'refs';
    my $ll11ll1ll1llIlII1lI111l1IlI1lIl = shift @_;
    printf "\n";
    printf "Dell DCS/PE-C BMC manipulation tool | built: %s\n", I1I1lIl1Il1Il11Il1llIllI1lllII1();
    printf "Usage: \n";
    printf "\n";
    printf '%s  [-v]  [IPMI Connection Info]  command_name  arguments', $0;
    printf "\n";
    printf "\n";
    printf "    General Options\n";
    printf "      -v verbose output\n";
    printf "\n";
    printf "\n";
    printf "    IPMI Connection Info (default is the local system KCS interface, so these aren't required)\n";
    printf "      -H hostname  (or)  -H^file_with_hostnames  (multiple -H flags accepted)\n";
    printf "      -U user    \n";
    printf "      -P password\n";
    printf "\n";
    printf "\n";
    printf "    Supported commands:\n";
    printf "\n";
    printf "      info                  1-line summary of a server\n";
    printf "      pcap                  1-line summary of a server's power draw/capping state\n";
    printf "      allinfo               lots of info about a server\n";
    printf "      nic_mode              Get/set BMC ethernet mode (shared/dedicated)\n";
    printf "      ping                  Test if the BMC is alive and responsive\n";
    printf "      reset                 Reboot the BMC (ask the BMC to reboot itself via IPMI)\n";
    printf "      hard_reset            Reboot the BMC (whether it likes it or not, via hardware)\n";
    printf "      power                 Host system power commands\n";
    printf "      power cycle           Reboot host system\n";
    printf "      bmc_hostname          Get/set BMC hostname\n";
    printf "      web_gui_timeout       Get/set time before BMC Web GUI session expires\n";
    printf "      id_led                Toggle the blue identification LED\n";
    printf "      state                 Get/set/clear a small bit of state info inside the BMC\n";
    printf "      gpgpu_info            Display all available GPGPU state information\n";
    printf "      gpgpu_power           Get/set GPGPU power state, by sled\n";
    printf "      security              BMC security settings (disable services)\n";
    printf "      web_gui_enabled       Enable/disable BMC web GUI\n";
    printf "      web_gui_http_port     Set web gui http port\n";
    printf "      web_gui_https_port    Set web gui https port\n";
    printf "      set_asset_tag         Set a server's asset tag (currently C6100/C6145 only)\n";
    printf "      pecagent_health       Get a quick view of the server node's health\n";
    printf "      ipmitool              Generic command passthrough to ipmitool ('ip' for short)\n";
    printf "      sel                   Read and get details about the SEL (system event log)\n";
    printf "      selfilter             Read the SEL and affix a severity to each entry\n";
    printf "      selfilter_from_file   As above, but read SEL from a file\n";
    printf "      set_chassis_power_cap For C6000/C8000 only: set the max power draw policy\n";
    printf "\n";
    printf "      attr                  (Long list of configurable attributes)\n";
    printf "\n";
    printf "\n";
    printf "    Scripting helper commands:  (All of this is also in 'info' and 'allinfo')\n";
    printf "\n";
    printf "      platform              Report the platform type of the target BMC\n";
    printf "      platform_debug        Show all the detail about what platform is detected\n";
    printf "      node_number           Report the node number (if this BMC is in shared infr. chassis)\n";
    printf "      ppid                  Report the Piece Part ID (unique serial number per-board)\n";
    printf "      service_tag           Report the node's Dell Service Tag\n";
    printf "      asset_tag             Report the node's customer-defined Asset Tag\n";
    printf "\n";
    printf "      bios_version          |  bmc_version               | fcb_version\n";
    printf "      intel_me_version      |  fcb_pic_version           | platform_variant\n";
    printf "\n";
    printf "      power_draw_node       |  power_draw_chassis        | chassis\n";
    printf "\n";
    printf "      host_ip_addr_1        |  host_ip_addr_2            | host_mac_addr_1\n";
    printf "      host_mac_addr_2       |  bmc_ip_addr               | bmc_mac_addr\n";
    printf "      bmc_ip_source         |  bmc_vlan                  |             \n";
    printf "\n";
    printf "      psus_required                  How many PSUs must we have?\n";
    printf "      psus_redundant                 How many PSUs do we have in reserve?\n";
    printf "      psus_seen                      Report the list of PSU types we see attached\n";
    printf "      psus_mismatch_state            Are the PSUs mismatched in some way?\n";
    printf "      psus_redundancy_state          How is our redundancy?\n";
    printf "      chassis_emergency_throttling   What action is taken if a PSU fails?\n";
    printf "\n";
    printf "      avg_fan_speed         Report avg fan speed of all fans in the chassis (for a dashboard)\n";
    printf "\n";
    printf "      total_power           Report total power draw across multiple nodes/BMCs\n";
    printf "\n";
    printf "\n";
    printf "    Health Monitoring:\n";
    printf "\n";
    printf "      pecagent_health       Get a quick view of the server node's health\n";
    printf "      pecagent_sel          Same as selfilter; allows viewing last N entries\n";
    printf "\n";
    printf "    Power Capping and related commands\n";
    printf "\n";
    printf "      pcap                  1-line summary of a server's power draw/capping state\n";
    printf "      set_chassis_power_cap For C6000/C8000 only: set the max power draw policy\n";
    printf "      is_intel_me_off       Is the Intel ME switched off?\n";
    printf "      intel_me_power        Change the Intel ME power state\n";
    printf "\n";
    printf "      dcmi_get_power_limit  \n";
    printf "      scbmc_get_chassis_enclosure_power_capping \n";
    printf "\n";
    printf "\n";
    printf "    Advanced usage / not normally needed commands:\n";
    printf "\n";
    printf "      force_fan_speed       Force fans to a particular speed (0 to 100%%, or 'auto')\n";
    printf "      get_this_mac          Print the currently-in-use BMC MAC address\n";
    printf "      get_both_macs         Print both BMC MAC addresses.  Can't be used over the network.\n";
    printf "      set_this_mac          Program the currently-in-use BMC MAC address\n";
    printf "      set_both_macs         Program both BMC MAC addresses.\n";
    printf "\n";
    printf "\n";
    printf "    Additional help and config menus\n";
    printf "\n";
    printf "      help_env_var          All environment variables supported; many conveniences\n";
    printf "      help_eng              Engineering help menu.  You probably don't need this.\n";
    printf "\n";
    printf "\n";
    exit 0;
}
sub lIlI1I111l1IllIl1I1IIlI1I1IIlI1 {
    use warnings;
    use strict 'refs';
    my $ll11ll1ll1llIlII1lI111l1IlI1lIl = shift @_;
    printf "\n";
    printf "Dell DCS/PE-C BMC manipulation tool | built: $llI1llI11III1Illl1lIIlII1II1I11\n";
    printf "\n";
    printf "    Engineering menu: \n";
    printf "\n";
    printf "      bios_version_raw      Report the BIOS version in the raw format reported by the BMC\n";
    printf "      fcb_version_raw       Report the FCB version in the raw format reported by the BMC\n";
    printf "      pic_version_raw       Report the PIC version in the raw format reported by the BMC\n";
    printf "      ext_cfg               (developer debug only)\n";
    printf "      ext_cfg_raw           (developer debug only.  You don't want to use this.  Use ext_cfg.)\n";
    printf "      read_sensor           Given an id, read the sensor value\n";
    printf "      platform_debug        Show raw platform information\n";
    printf "      svn \n";
    printf "      scbmc_get_chassis_power_capping \n";
    printf "      scbmc_get_psu_info \n";
    printf "\n";
    printf "    Highly specific per-platform\n";
    printf "      c6105_chassis_type    Show this sled's programmed target chassis type\n";
    printf "\n";
    printf "\n";
    exit 0;
}
sub Ill11lI1l1111l1IlII1l11l1llIl1l {
    use warnings;
    use strict 'refs';
    my $ll11ll1ll1llIlII1lI111l1IlI1lIl = shift @_;
    printf "\n";
    printf "Dell DCS/PE-C BMC manipulation tool | built: $llI1llI11III1Illl1lIIlII1II1I11\n";
    printf "Environment Variables Supported\n";
    printf "\n";
    printf "      Use these by running this in the shell:  export ENV_VAR_NAME=value\n";
    printf "\n";
    printf "        BMCTOOL_IPMITOOL_CMD       Specify exact path to ipmitool\n";
    printf "        BMCTOOL_IPMITOOL_USER      Set the default ipmitool user (normally 'root')\n";
    printf "        BMCTOOL_IPMITOOL_PASSWORD  Set the default ipmitool password (normally 'root')\n";
    printf "\n";
    printf "      Platform can be forced by setting these.  NOTE: it is expected that you use PE-C\n";
    printf "      naming convention ('C6100' instead of 'plutonium')\n";
    printf "\n";
    printf "        BMCTOOL_FORCE_PLATFORM            Assert what platform we are; if autodetect fails\n";
    printf "        BMCTOOL_FORCE_PLATFORM_VARIANT    Set the variant (if any; rarely needed; leave blank)\n";
    printf "        BMCTOOL_FORCE_PLATFORM_FAMILY     (PEC,DCS)\n";
    printf "\n";
    printf "        IPMITOOL_DEBUG             Set to 1 to show all ipmitool commands\n";
    printf "        BMCTOOL_IPMITOOL_DEBUG       output is to stdout; redirect with 2>errfile\n";
    printf "        BMCTOOL_NO_RESV_CACHING    Debug only: do not cache IPMI reservations\n";
    printf "        NO_RESV_CACHING              NOTE: defaults to 1 (on).  You can turn this off to \n";
    printf "                                     enable caching; saves a little time on each ipmi call.\n";
    printf "\n";
    printf "\n";
    printf "\n";
    printf "\n";
    exit 0;
}
